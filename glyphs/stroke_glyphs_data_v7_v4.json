{"glyphs":[{"uuid":"hArRxUwa_Jv0eqYA2OZ7B","type":"system","name":"横","components":[],"groups":[],"orderedList":[],"selectedComponentsUUIDs":[],"view":{"zoom":100,"translateX":0,"translateY":0},"parameters":[{"uuid":"Xga8_nkAawU6kLsV_gnge","name":"length","type":0,"value":596,"min":400,"max":1000},{"uuid":"2pN9IVmE_hhmYmvI9f8Hn","name":"weight","type":0,"value":40,"min":20,"max":100},{"uuid":"Y8gdxAgCM5eYESXlC9L2I","name":"camber","type":0,"value":0.1,"min":0,"max":0.35},{"uuid":"fjrFn2qxqETv50bQ5npxR","name":"weightVariation","type":0,"value":0.7,"min":0.7,"max":1},{"uuid":"gPmI8f5u0ElKTritMzgsh","name":"起笔端点","type":2,"value":{"radius":{"name":"笔端长度","min":0,"max":50,"value":28.57142857142857},"degree":{"name":"笔端角度","min":-30,"max":30,"value":0},"params":[{"name":"左切角","min":-30,"max":30,"value":12.402785546132598},{"name":"上切角","min":-30,"max":30,"value":2.9822435506265634},{"name":"下切角","min":-30,"max":30,"value":29.59077226915568}]},"min":0,"max":1000},{"uuid":"g-SIKKodjQpfmWD9ePurd","name":"起笔顿笔","type":2,"value":{"radius":{"name":"顿笔长度","min":0,"max":100,"value":50},"degree":{"name":"顿笔角度","min":-30,"max":30,"value":-18},"params":[{"name":"粗细","min":1,"max":2.5,"value":1.5}]},"min":0,"max":1000},{"uuid":"BZYLN79VCffGvJbtDLgD7","name":"收笔","type":2,"value":{"radius":{"name":"长度","min":120,"max":200,"value":179.93866017120482},"degree":{"name":"右切角","min":0,"max":45,"value":36.38435181583589},"params":[{"name":"上曲度","min":0,"max":30,"value":10.43704953811138},{"name":"粗细","min":1,"max":1.5,"value":1.3279791303773694}]},"min":0,"max":1000}],"joints":[],"reflines":[],"script":"function script_hArRxUwa_Jv0eqYA2OZ7B (glyph, constants, FP) {\n  //Todo something\n  const length = glyph.getParam('length')\n  const camber = glyph.getParam('camber') || 0.1\n  const weightVariation = glyph.getParam('weightVariation') || 0.7\n  const weight = glyph.getParam('weight') || 40\n  // const weight = constants.get('weight')\n  const ox = 500\n  const oy = 500\n\n  const starter = glyph.getParam('起笔端点')\n  const starter_1 = glyph.getParam('起笔顿笔')\n  //const starter_2 = glyph.getParam('起笔提笔')\n  const ending = glyph.getParam('收笔')\n\n  const getCoordY = (canvasY) => {\n    return -(canvasY - 500)\n  }\n\n  const getCanvasY = (coordY) => {\n    return -coordY + 500\n  }\n\n  const toDegree = (radian) => radian / Math.PI * 180\n  const toRadian = (degree) => Math.PI / 180 * degree\n\n  const getK = (p1, p2) => {\n    return -(p2.y - p1.y) / (p2.x - p1.x)\n  }\n\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  const intersection = (k1, x1, y1, k2, x2, y2) => {\n    if (k1 === Infinity || k1 === -Infinity) {\n      const x = x1\n      const y = k2 * (x - x2) + y2\n      return {\n        x, y,\n      }\n    } else if (k2 === Infinity || k2 === -Infinity) {\n      const x = x2\n      const y = k1 * (x - x1) + y1\n      return {\n        x, y,\n      }\n    }\n    const x = ((y2 - y1) + (k1 * x1 - k2 * x2)) / (k1 - k2)\n    const y = (-k1 * y2 + k2 * y1 + (x2 - x1) * k1 * k2) / (k2 - k1)\n    return {\n      x, y,\n    }\n  }\n\n  const start_turns = [\n    {\n      angle: starter.degree.value,\n      step_left: starter.params[0].value,\n      step_top: starter.params[1].value,\n      step_bottom: starter.params[2].value,\n      length: starter.radius.value,\n    },\n    {\n      angle: starter_1.degree.value,\n      weight: starter_1.params[0].value * weight,\n      length: starter_1.radius.value,\n    },\n    // {\n    //   angle: starter_2.degree.value,\n    //   weight: starter_2.params[0].value,\n    //   length: starter_2.radius.value,\n    // },\n    // {\n    //   angle: 0,\n    //   step_left: -10,\n    //   step_top: 10,\n    //   step_bottom: -10,\n    //   length: length * 0.05,\n    // },\n    // {\n    //   angle: -18,\n    //   weight: weight * 1.5,\n    //   length: length * 0.1,\n    // },\n    {\n      angle: 0,\n      weight: weight,\n      length: length * 0,\n    },\n  ]\n\n  const endOption = {\n    // ratio: 0.3,\n    // weight: weight * 1.5,\n    // step_top: 10,\n    // step_right: 30,\n    ratio: ending.radius.value / length,\n    weight: ending.params[1].value * weight,\n    step_top: ending.params[0].value,\n    step_right: ending.degree.value,\n  }\n\n  const start_turn_1_x = ox - length / 2\n  const start_turn_1_a = -toRadian(start_turns[2].angle + start_turns[1].angle + start_turns[0].angle)\n  const start_turn_2_x = start_turn_1_x + start_turns[0].length * Math.cos(start_turn_1_a)\n  const start_turn_2_a = -toRadian(start_turns[2].angle + start_turns[1].angle)\n  const start_turn_3_x = start_turn_2_x + start_turns[1].length * Math.cos(start_turn_2_a)\n  const start_turn_3_a = -toRadian(start_turns[2].angle)\n  const start_x = start_turn_3_x + start_turns[2].length * Math.cos(start_turn_3_a)\n  const middle_x = start_x + (length - (start_x - start_turn_1_x) - length * endOption.ratio) / 2\n  const end_x = start_x + (length - (start_x - start_turn_1_x) - length * endOption.ratio)\n  const end_turn_1_x = end_x + length * endOption.ratio / 2\n  const end_turn_2_x = ox + length / 2\n\n  const start_y = oy\n  const start_turn_3_y = start_y + start_turns[2].length * Math.sin(start_turn_3_a)\n  const start_turn_2_y = start_turn_3_y + start_turns[1].length * Math.sin(start_turn_2_a)\n  const start_turn_1_y = start_turn_2_y + start_turns[0].length * Math.sin(start_turn_1_a)\n  const middle_y = oy - (length - (start_x - start_turn_1_x) - length * endOption.ratio) * camber\n  const end_y = oy\n\n  const middle_a = Math.atan(-(middle_y - start_y) / (middle_x - start_x))\n\n  const start_turn_1 = new FP.Joint(\n    'start_turn_1',\n    {\n      x: start_turn_1_x,\n      y: start_turn_1_y,\n    },\n  )\n  const start_turn_2 = new FP.Joint(\n    'start_turn_2',\n    {\n      x: start_turn_2_x,\n      y: start_turn_2_y,\n    },\n  )\n  const start_turn_3 = new FP.Joint(\n    'start_turn_3',\n    {\n      x: start_turn_3_x,\n      y: start_turn_3_y,\n    },\n  )\n  const start_turn_2_top = new FP.Joint(\n    'start_turn_2_top',\n    {\n      x: start_turn_2_x - start_turns[1].weight / 2 * Math.sin(start_turn_2_a),\n      y: start_turn_2_y - start_turns[1].weight / 2 * Math.cos(start_turn_2_a),\n    },\n  )\n  const start_turn_2_bottom = new FP.Joint(\n    'start_turn_2_bottom',\n    {\n      x: start_turn_2_x + start_turns[1].weight / 2 * Math.sin(start_turn_2_a),\n      y: start_turn_2_y + start_turns[1].weight / 2 * Math.cos(start_turn_2_a),\n    },\n  )\n  const start = new FP.Joint(\n    'start',\n    {\n      x: start_x,\n      y: start_y,\n    },\n  )\n  const middle = new FP.Joint(\n    'middle',\n    {\n      x: middle_x,\n      y: middle_y,\n    },\n  )\n  const end = new FP.Joint(\n    'end',\n    {\n      x: end_x,\n      y: end_y,\n    },\n  )\n  const bend_left = new FP.Joint(\n    'bend_left',\n    {\n      x: middle_x - distance(middle, start) / 3 / Math.cos(Math.abs(middle_a)),\n      y: middle_y,\n    },\n  )\n  const bend_right = new FP.Joint(\n    'bend_right',\n    {\n      x: middle_x + distance(middle, start) / 3 / Math.cos(Math.abs(middle_a)),\n      y: middle_y,\n    },\n  )\n\n  const { contour1, contour2 } = FP.Skeleton.getContours([start, {\n    x: bend_left.x,\n    y: bend_left.y,\n  }, {\n    x: bend_right.x,\n    y: bend_right.y,\n  }, end], [{\n    pos: 0,\n    weight,\n  }, {\n    pos: 0.5,\n    weight: weight * weightVariation,\n  }, {\n    pos: 1,\n    weight: weight,\n  }])\n\n  const start_turn_3_top = new FP.Joint(\n    'start_turn_3_top',\n    {\n      x: contour1[0].start.x,\n      y: contour1[0].start.y,\n    },\n  )\n  const start_turn_3_bottom = new FP.Joint(\n    'start_turn_3_bottom',\n    {\n      x: contour2[0].start.x,\n      y: contour2[0].start.y,\n    },\n  )\n  // glyph.addJoint(start_turn_3_top)\n  // glyph.addJoint(start_turn_3_bottom)\n  const end_turn_2 = new FP.Joint(\n    'end_turn_2',\n    {\n      x: end_turn_2_x,\n      y: contour1[contour1.length - 1].end.y,\n    },\n  )\n  //glyph.addJoint(end_turn_2)\n\n  const start_turn_3_top_a = Math.atan(getK(contour1[0].start, start_turn_3_top))\n  const start_turn_3_bottom_a = Math.atan(getK(contour2[0].start, start_turn_3_bottom))\n\n  const start_turn_2_top_a = Math.atan(getK(start_turn_3_top, start_turn_2_top))\n  const start_turn_2_bottom_a = Math.atan(getK(start_turn_3_bottom, start_turn_2_bottom))\n\n  const p1 = intersection(\n    Math.tan(start_turn_3_top_a - Math.PI / 2), (contour1[0].start.x + start_turn_3_top.x) / 2, getCoordY((contour1[0].start.y + start_turn_3_top.y) / 2),\n    getK(contour1[0].start, contour1[0].control1), contour1[0].start.x, getCoordY(contour1[0].start.y)\n  )\n  const p2 = intersection(\n    Math.tan(start_turn_3_bottom_a - Math.PI / 2), (contour2[0].start.x + start_turn_3_bottom.x) / 2, getCoordY((contour2[0].start.y + start_turn_3_bottom.y) / 2),\n    getK(contour2[0].start, contour2[0].control1), contour2[0].start.x, getCoordY(contour2[0].start.y)\n  )\n  const start_turn_3_top_bend = new FP.Joint(\n    'start_turn_3_top_bend',\n    {\n      x: p1.x,\n      y: getCanvasY(p1.y),\n    },\n  )\n  const start_turn_3_bottom_bend = new FP.Joint(\n    'start_turn_3_bottom_bend',\n    {\n      x: p2.x,\n      y: getCanvasY(p2.y),\n    },\n  )\n\n  // glyph.addJoint(start_turn_3_top_bend)\n  // glyph.addJoint(start_turn_3_bottom_bend)\n\n  const start_turn_3_top_control = {\n    x: start_turn_3_top.x + (2 / 3) * (start_turn_3_top_bend.x - start_turn_3_top.x),\n    y: start_turn_3_top.y + (2 / 3) * (start_turn_3_top_bend.y - start_turn_3_top.y),\n  }\n\n  const start_turn_3_bottom_control = {\n    x: start_turn_3_bottom.x + (2 / 3) * (start_turn_3_bottom_bend.x - start_turn_3_bottom.x),\n    y: start_turn_3_bottom.y + (2 / 3) * (start_turn_3_bottom_bend.y - start_turn_3_bottom.y),\n  }\n\n  const start_turn_3_top_control_a = Math.atan(getK(start_turn_3_top, start_turn_3_top_control))\n  const start_turn_3_bottom_control_a = Math.atan(getK(start_turn_3_bottom, start_turn_3_bottom_control))\n\n  const getPointAtPercentage = (start, end, percentage) => {\n    var x = start.x + (end.x - start.x) * percentage;\n    var y = start.y + (end.y - start.y) * percentage;\n    return { x: x, y: y };\n  }\n  let _start_turn_2_top_control_1 = intersection(\n    Math.tan(start_turn_2_top_a - Math.PI / 2), (start_turn_2_top.x + start_turn_3_top.x) * 0.5, getCoordY((start_turn_2_top.y + start_turn_3_top.y) * 0.5),\n    Math.tan(toRadian(start_turns[0].step_top)), start_turn_2_top.x, getCoordY(start_turn_2_top.y),\n  )\n  _start_turn_2_top_control_1 = getPointAtPercentage(start_turn_2_top, {\n    x: _start_turn_2_top_control_1.x,\n    y: getCanvasY(_start_turn_2_top_control_1.y)\n  }, 0.75)\n  let _start_turn_2_top_control_2 = start_turns[2].length ? intersection(\n    Math.tan(start_turn_2_top_a - Math.PI / 2), (start_turn_2_top.x + start_turn_3_top.x) * 0.5, getCoordY((start_turn_2_top.y + start_turn_3_top.y) * 0.5),\n    getK(start_turn_3_top, start_turn_3_top_control), start_turn_3_top.x, getCoordY(start_turn_3_top.y)\n  ) : intersection(\n    Math.tan(start_turn_2_top_a - Math.PI / 2), (start_turn_2_top.x + start_turn_3_top.x) * 0.5, getCoordY((start_turn_2_top.y + start_turn_3_top.y) * 0.5),\n    getK(contour1[0].start, contour1[0].control1), contour1[0].start.x, getCoordY(contour1[0].start.y)\n  )\n  _start_turn_2_top_control_2 = getPointAtPercentage(start_turn_3_top, {\n    x: _start_turn_2_top_control_2.x,\n    y: getCanvasY(_start_turn_2_top_control_2.y)\n  }, 0.75)\n  let _start_turn_2_bottom_control_1 = intersection(\n    Math.tan(start_turn_2_bottom_a - Math.PI / 2), (start_turn_2_bottom.x + start_turn_3_bottom.x) / 2, getCoordY((start_turn_2_bottom.y + start_turn_3_bottom.y) / 2),\n    Math.tan(toRadian(start_turns[0].step_bottom)), start_turn_2_bottom.x, getCoordY(start_turn_2_bottom.y),\n  )\n  _start_turn_2_bottom_control_1 = getPointAtPercentage(start_turn_2_bottom, {\n    x: _start_turn_2_bottom_control_1.x,\n    y: getCanvasY(_start_turn_2_bottom_control_1.y)\n  }, 0.75)\n  let _start_turn_2_bottom_control_2 = intersection(\n    Math.tan(start_turn_2_bottom_a - Math.PI / 2), (start_turn_2_bottom.x + start_turn_3_bottom.x) / 2, getCoordY((start_turn_2_bottom.y + start_turn_3_bottom.y) / 2),\n    getK(start_turn_3_bottom, contour2[0].control1), start_turn_3_bottom.x, getCoordY(start_turn_3_bottom.y)\n  )\n  _start_turn_2_bottom_control_2 = getPointAtPercentage(start_turn_3_bottom, {\n    x: _start_turn_2_bottom_control_2.x,\n    y: getCanvasY(_start_turn_2_bottom_control_2.y)\n  }, 0.75)\n\n  const _start_turn_1_top_control = intersection(\n    Math.tan(-toRadian(start_turns[0].step_left) - Math.PI / 2), start_turn_1.x, getCoordY(start_turn_1.y),\n    Math.tan(toRadian(start_turns[0].step_top)), start_turn_2_top.x, getCoordY(start_turn_2_top.y),\n  )\n  const _start_turn_1_bottom_control = intersection(\n    Math.tan(-toRadian(start_turns[0].step_left) - Math.PI / 2), start_turn_1.x, getCoordY(start_turn_1.y),\n    Math.tan(toRadian(start_turns[0].step_bottom)), start_turn_2_bottom.x, getCoordY(start_turn_2_bottom.y),\n  )\n\n  const start_turn_2_top_control_1 = new FP.Joint(\n    'start_turn_2_top_control_1',\n    {\n      x: _start_turn_2_top_control_1.x,\n      y: _start_turn_2_top_control_1.y,\n    },\n  )\n  const start_turn_2_top_control_2 = new FP.Joint(\n    'start_turn_2_top_control_2',\n    {\n      x: _start_turn_2_top_control_2.x,\n      y: _start_turn_2_top_control_2.y,\n    },\n  )\n  const start_turn_2_bottom_control_1 = new FP.Joint(\n    'start_turn_2_bottom_control_1',\n    {\n      x: _start_turn_2_bottom_control_1.x,\n      y: _start_turn_2_bottom_control_1.y,\n    },\n  )\n  const start_turn_2_bottom_control_2 = new FP.Joint(\n    'start_turn_2_bottom_control_2',\n    {\n      x: _start_turn_2_bottom_control_2.x,\n      y: _start_turn_2_bottom_control_2.y,\n    },\n  )\n  const start_turn_1_top_control = new FP.Joint(\n    'start_turn_1_top_control',\n    {\n      x: _start_turn_1_top_control.x,\n      y: getCanvasY(_start_turn_1_top_control.y),\n    },\n  )\n  const start_turn_1_bottom_control = new FP.Joint(\n    'start_turn_1_bottom_control',\n    {\n      x: _start_turn_1_bottom_control.x,\n      y: getCanvasY(_start_turn_1_bottom_control.y),\n    },\n  )\n\n  const _end_top_bend = intersection(\n    Math.tan(-(contour1[contour1.length - 1].control2.y - contour1[contour1.length - 1].end.y) / (contour1[contour1.length - 1].control2.x - contour1[contour1.length - 1].end.x)),\n    contour1[contour1.length - 1].end.x, getCoordY(contour1[contour1.length - 1].end.y),\n    Math.tan(toRadian(endOption.step_top)), end_turn_2.x, getCoordY(end_turn_2.y),\n  )\n\n  const end_top_bend = new FP.Joint(\n    'end_top_bend',\n    {\n      x: _end_top_bend.x,\n      y: getCanvasY(_end_top_bend.y),\n    },\n  )\n\n  const end_turn_1 = new FP.Joint(\n    'end_turn_1',\n    {\n      x: end_turn_1_x,\n      y: end_top_bend.y + endOption.weight,\n    },\n  )\n\n  const end_bottom_control_left_2 = new FP.Joint(\n    'end_bottom_control_left_2',\n    {\n      x: contour2[contour2.length - 1].end.x + (end_turn_1_x - contour2[contour2.length - 1].end.x) / 2,\n      y: end_turn_1.y,\n    },\n  )\n  const end_bottom_control_right = new FP.Joint(\n    'end_bottom_control_right',\n    {\n      x: end_turn_2.x - (end_turn_1.y - end_turn_2.y) * Math.tan(toRadian(endOption.step_right)),\n      y: end_turn_1.y,\n    },\n  )\n  const end_control_bottom_a = Math.atan(-(contour2[contour2.length - 1].end.y - contour2[contour2.length - 1].control2.y) / (contour2[contour2.length - 1].end.x - contour2[contour2.length - 1].control2.x))\n  const end_bottom_control_left_1 = new FP.Joint(\n    'end_bottom_control_left_1',\n    {\n      x: contour2[contour2.length - 1].end.x + (end_turn_1_x - contour2[contour2.length - 1].end.x) / 2,\n      y: contour2[contour2.length - 1].end.y + (end_turn_1_x - contour2[contour2.length - 1].end.x) / 2 * Math.tan(Math.abs(end_control_bottom_a)),\n    },\n  )\n  //glyph.addJoint(end_turn_1)\n\n\n  // glyph.addJoint(start_turn_2_top_control_1)\n  // glyph.addJoint(start_turn_2_top_control_2)\n  // glyph.addJoint(start_turn_2_bottom_control_1)\n  // glyph.addJoint(start_turn_2_bottom_control_2)\n  // glyph.addJoint(start_turn_1_top_control)\n  // glyph.addJoint(start_turn_1_bottom_control)\n  // glyph.addJoint(end_bottom_control_right)\n  // glyph.addJoint(end_bottom_control_left_1)\n  // glyph.addJoint(end_bottom_control_left_2)\n  // glyph.addJoint(end_top_bend)\n\n  // 顺时针\n  const pen = new FP.PenComponent()\n  pen.beginPath()\n  pen.moveTo(start_turn_1.x, start_turn_1.y)\n  pen.quadraticBezierTo(start_turn_1_top_control.x, start_turn_1_top_control.y, start_turn_2_top.x, start_turn_2_top.y)\n  if (start_turns[2].length) {\n    pen.bezierTo(start_turn_2_top_control_1.x, start_turn_2_top_control_1.y, start_turn_2_top_control_2.x, start_turn_2_top_control_2.y, start_turn_3_top.x, start_turn_3_top.y)\n    pen.quadraticBezierTo(start_turn_3_top_bend.x, start_turn_3_top_bend.y, contour1[0].start.x, contour1[0].start.y)\n  } else {\n    pen.bezierTo(start_turn_2_top_control_1.x, start_turn_2_top_control_1.y, start_turn_2_top_control_2.x, start_turn_2_top_control_2.y, contour1[0].start.x, contour1[0].start.y)\n  }\n  //pen.moveTo(contour1[0].start.x, contour1[0].start.y)\n  for (let i = 0; i < contour1.length; i++) {\n    pen.bezierTo(contour1[i].control1.x, contour1[i].control1.y, contour1[i].control2.x, contour1[i].control2.y, contour1[i].end.x, contour1[i].end.y)\n  }\n  const end_top = new FP.Joint(\n    'end_top',\n    {\n      x: contour1[contour1.length - 1].end.x,\n      y: contour1[contour1.length - 1].end.y,\n    },\n  )\n  //pen.lineTo(contour2[contour2.length - 1].end.x, contour2[contour2.length - 1].end.y)\n  pen.quadraticBezierTo(end_top_bend.x, end_top_bend.y, end_turn_2.x, end_turn_2.y)\n  pen.quadraticBezierTo(end_bottom_control_right.x, end_bottom_control_right.y, end_turn_1.x, end_turn_1.y)\n  pen.bezierTo(end_bottom_control_left_2.x, end_bottom_control_left_2.y, end_bottom_control_left_1.x, end_bottom_control_left_1.y, contour2[contour2.length - 1].end.x, contour2[contour2.length - 1].end.y)\n  for (let i = contour2.length - 1; i >= 0; i--) {\n    pen.bezierTo(contour2[i].control2.x, contour2[i].control2.y, contour2[i].control1.x, contour2[i].control1.y, contour2[i].start.x, contour2[i].start.y)\n  }\n  const end_bottom = new FP.Joint(\n    'end_bottom',\n    {\n      x: contour2[contour2.length - 1].end.x,\n      y: contour2[contour2.length - 1].end.y,\n    },\n  )\n  //pen.lineTo(contour1[0].start.x, contour1[0].start.y)\n  if (start_turns[2].length) {\n    pen.quadraticBezierTo(start_turn_3_bottom_bend.x, start_turn_3_bottom_bend.y, start_turn_3_bottom.x, start_turn_3_bottom.y)\n    pen.bezierTo(start_turn_2_bottom_control_2.x, start_turn_2_bottom_control_2.y, start_turn_2_bottom_control_1.x, start_turn_2_bottom_control_1.y, start_turn_2_bottom.x, start_turn_2_bottom.y)\n  } else {\n    pen.bezierTo(start_turn_2_bottom_control_2.x, start_turn_2_bottom_control_2.y, start_turn_2_bottom_control_1.x, start_turn_2_bottom_control_1.y, start_turn_2_bottom.x, start_turn_2_bottom.y)\n  }\n  pen.quadraticBezierTo(start_turn_1_bottom_control.x, start_turn_1_bottom_control.y, start_turn_1.x, start_turn_1.y)\n  pen.closePath()\n  glyph.addComponent(pen)\n\n  glyph.addJoint(start_turn_1)\n  glyph.addJoint(start_turn_2)\n  glyph.addJoint(start_turn_3)\n  glyph.addJoint(start_turn_2_top)\n  glyph.addJoint(start_turn_2_bottom)\n  glyph.addJoint(start)\n  glyph.addJoint(middle)\n  glyph.addJoint(end)\n  glyph.addJoint(end_top)\n  glyph.addJoint(end_bottom)\n  glyph.addJoint(bend_left)\n  glyph.addJoint(bend_right)\n\n  glyph.addJoint(start_turn_3_top)\n  glyph.addJoint(start_turn_3_bottom)\n  glyph.addJoint(end_turn_2)\n  glyph.addJoint(start_turn_3_top_bend)\n  glyph.addJoint(start_turn_3_bottom_bend)\n  glyph.addJoint(end_turn_1)\n\n  glyph.addJoint(start_turn_2_top_control_1)\n  glyph.addJoint(start_turn_2_top_control_2)\n  glyph.addJoint(start_turn_2_bottom_control_1)\n  glyph.addJoint(start_turn_2_bottom_control_2)\n  glyph.addJoint(start_turn_1_top_control)\n  glyph.addJoint(start_turn_1_bottom_control)\n  glyph.addJoint(end_bottom_control_right)\n  glyph.addJoint(end_bottom_control_left_1)\n  glyph.addJoint(end_bottom_control_left_2)\n  glyph.addJoint(end_top_bend)\n\n  const refline = (p1, p2) => {\n    return {\n      name: `${p1.name}-${p2.name}`,\n      start: p1.name,\n      end: p2.name,\n    }\n  }\n\n  glyph.addRefLine(refline(start_turn_1, start_turn_1_top_control))\n  glyph.addRefLine(refline(start_turn_1, start_turn_1_bottom_control))\n  glyph.addRefLine(refline(start_turn_2_top, start_turn_1_top_control))\n  glyph.addRefLine(refline(start_turn_2_bottom, start_turn_1_bottom_control))\n  glyph.addRefLine(refline(start_turn_2_top, start_turn_2_top_control_1))\n  glyph.addRefLine(refline(start_turn_2_bottom, start_turn_2_bottom_control_1))\n  glyph.addRefLine(refline(start_turn_3_top, start_turn_2_top_control_2))\n  glyph.addRefLine(refline(start_turn_3_bottom, start_turn_2_bottom_control_2))\n  glyph.addRefLine(refline(end_top, end_top_bend))\n  glyph.addRefLine(refline(end_bottom, end_bottom_control_left_1))\n  glyph.addRefLine(refline(end_turn_1, end_bottom_control_left_2))\n  glyph.addRefLine(refline(end_turn_2, end_bottom_control_right))\n\n  glyph.addRefLine(refline(start_turn_2_top, start_turn_2_bottom))\n  glyph.addRefLine(refline(start_turn_3_top, start_turn_3_bottom))\n  glyph.addRefLine(refline(end_top, end_bottom))\n}","objData":{"_joints":[{"_x":202,"_y":524.2799067008887,"uuid":"WF8U03UAan3w5L1OIqR9u","name":"start_turn_1"},{"_x":229.17304332271868,"_y":515.4508497187473,"uuid":"UfhLTvoKanD3iCSma8XR2","name":"start_turn_2"},{"_x":276.72586913747637,"_y":500,"uuid":"yS7c0qSB56uunGO56pdvP","name":"start_turn_3"},{"_x":219.90253349147025,"_y":486.91915422989274,"uuid":"X_c5lb5d5IDWO-FK6cIuH","name":"start_turn_2_top"},{"_x":238.44355315396712,"_y":543.9825452076019,"uuid":"T30mLVkL_rcjiG_AfMGv6","name":"start_turn_2_bottom"},{"_x":276.72586913747637,"_y":500,"uuid":"aEVEmK4D477rZu6F2N82t","name":"start"},{"_x":447.39360448313573,"_y":465.86645293086815,"uuid":"WWj66fEixYnmVT1WjEEIu","name":"middle"},{"_x":618.0613398287951,"_y":500,"uuid":"5aa81VtmusZPqYRTnjcQq","name":"end"},{"_x":623.2203082117336,"_y":480.6761227069539,"uuid":"Tz4zJGMPeCujXtgyv3WRY","name":"end_top"},{"_x":611.5641727781755,"_y":518.9150939333462,"uuid":"4ixZ3MWNUSogeo-Akx6Lq","name":"end_bottom"},{"_x":388.22878956330715,"_y":465.86645293086815,"uuid":"hK6Zp9MUDb2yDw_0mUxl-","name":"bend_left"},{"_x":506.5584194029643,"_y":465.86645293086815,"uuid":"F2TbAHAw5wTW4YidMfOI_","name":"bend_right"},{"_x":270.87509626685926,"_y":480.8874752893175,"uuid":"KKkLYRznxkrGROvZpsIed","name":"start_turn_3_top"},{"_x":282.5766420080935,"_y":519.1125247106826,"uuid":"MQwWv1BsoKOx8wT1xmRyr","name":"start_turn_3_bottom"},{"_x":798,"_y":480.6761227069539,"uuid":"dfrFFwKXLD8dzXC60eW7W","name":"end_turn_2"},{"_x":null,"_y":null,"uuid":"mPrkuLOpx4Mc9qsWaLBFb","name":"start_turn_3_top_bend"},{"_x":null,"_y":null,"uuid":"W42fRgN3zgmfjq0oefupX","name":"start_turn_3_bottom_bend"},{"_x":708.0306699143975,"_y":553.0849902493975,"uuid":"CwusFa67A3bermQMOfu31","name":"end_turn_1"},{"_x":239.16614187668907,"_y":485.9155775494207,"uuid":"0NlpT40UeCXOokLjiTUdU","name":"start_turn_2_top_control_1"},{"_x":252.0925651244408,"_y":485.9565435518258,"uuid":"i3PX0JBj4YOAWFFmRuNyE","name":"start_turn_2_top_control_2"},{"_x":254.9627779916916,"_y":534.6018381546829,"uuid":"1HC2fv1rvnCQaVfML_VIg","name":"start_turn_2_bottom_control_1"},{"_x":264.32090839583856,"_y":525.4117105380031,"uuid":"KAoVGiuRSUQwQjMdhGsu_","name":"start_turn_2_bottom_control_2"},{"_x":210.103936533471,"_y":487.4296319769351,"uuid":"GLSXbym7uHjqiZYU2ul93","name":"start_turn_1_top_control"},{"_x":191.84814354255195,"_y":570.4424966804615,"uuid":"A5NUGLZcuE2L6WwuQROjA","name":"start_turn_1_bottom_control"},{"_x":744.6460976003048,"_y":553.0849902493975,"uuid":"EDUm1Z-PzfxDIwP4-5pkr","name":"end_bottom_control_right"},{"_x":659.7974213462865,"_y":535.4904006271098,"uuid":"217p8QOzc-5XLO-RYSqia","name":"end_bottom_control_left_1"},{"_x":659.7974213462865,"_y":553.0849902493975,"uuid":"3CelSbr8rTLfBV3z837AA","name":"end_bottom_control_left_2"},{"_x":693.2801048745604,"_y":499.9658250343027,"uuid":"xMvnUymplIAcyTIn0T2so","name":"end_top_bend"}],"_reflines":[{"name":"start_turn_1-start_turn_1_top_control","start":"start_turn_1","end":"start_turn_1_top_control"},{"name":"start_turn_1-start_turn_1_bottom_control","start":"start_turn_1","end":"start_turn_1_bottom_control"},{"name":"start_turn_2_top-start_turn_1_top_control","start":"start_turn_2_top","end":"start_turn_1_top_control"},{"name":"start_turn_2_bottom-start_turn_1_bottom_control","start":"start_turn_2_bottom","end":"start_turn_1_bottom_control"},{"name":"start_turn_2_top-start_turn_2_top_control_1","start":"start_turn_2_top","end":"start_turn_2_top_control_1"},{"name":"start_turn_2_bottom-start_turn_2_bottom_control_1","start":"start_turn_2_bottom","end":"start_turn_2_bottom_control_1"},{"name":"start_turn_3_top-start_turn_2_top_control_2","start":"start_turn_3_top","end":"start_turn_2_top_control_2"},{"name":"start_turn_3_bottom-start_turn_2_bottom_control_2","start":"start_turn_3_bottom","end":"start_turn_2_bottom_control_2"},{"name":"end_top-end_top_bend","start":"end_top","end":"end_top_bend"},{"name":"end_bottom-end_bottom_control_left_1","start":"end_bottom","end":"end_bottom_control_left_1"},{"name":"end_turn_1-end_bottom_control_left_2","start":"end_turn_1","end":"end_bottom_control_left_2"},{"name":"end_turn_2-end_bottom_control_right","start":"end_turn_2","end":"end_bottom_control_right"},{"name":"start_turn_2_top-start_turn_2_bottom","start":"start_turn_2_top","end":"start_turn_2_bottom"},{"name":"start_turn_3_top-start_turn_3_bottom","start":"start_turn_3_top","end":"start_turn_3_bottom"},{"name":"end_top-end_bottom","start":"end_top","end":"end_bottom"}],"_components":[{"points":[{"uuid":"ZNq3jySlpF5RQm0eRuq25","type":"anchor","x":202,"y":524.2799067008887,"origin":null},{"uuid":"oiXCKP7igEPQwIri5Zgkl","type":"control","x":207.40262435564733,"y":499.71305688491964,"origin":"ZNq3jySlpF5RQm0eRuq25"},{"uuid":"YE2uETkAn7wkWbmq1rUP6","type":"control","x":213.37013551947075,"y":487.259472727921,"origin":"xWu8Nxj_j-Hkw_C3Dqdrf"},{"uuid":"xWu8Nxj_j-Hkw_C3Dqdrf","type":"anchor","x":219.90253349147025,"y":486.91915422989274,"origin":null},{"uuid":"ih-2WL4NQ4UkNnYM55GgG","type":"control","x":239.16614187668907,"y":485.9155775494207,"origin":"xWu8Nxj_j-Hkw_C3Dqdrf"},{"uuid":"GvKmoHWVIH9ooSBIP5ezS","type":"control","x":252.0925651244408,"y":485.9565435518258,"origin":"DuPMKmvkWsr3Y2z-oBIZx"},{"uuid":"DuPMKmvkWsr3Y2z-oBIZx","type":"anchor","x":270.87509626685926,"y":480.8874752893175,"origin":null},{"uuid":"5gwD7DxaRhnMHY3k-Q7V0","type":"control","x":381.41744301681206,"y":451.0540786440758,"origin":"DuPMKmvkWsr3Y2z-oBIZx"},{"uuid":"yLdvQY1cYN2GitCAMgKpk","type":"control","x":512.6437496969652,"y":450.96698562688385,"origin":"epdhprB2X5LBPEFXuwfls"},{"uuid":"epdhprB2X5LBPEFXuwfls","type":"anchor","x":623.2203082117336,"y":480.6761227069539,"origin":null},{"uuid":"_gm58pe_bhnQ33eCSwd-B","type":"control","x":669.9268393202848,"y":493.5359242585198,"origin":"epdhprB2X5LBPEFXuwfls"},{"uuid":"vTz7IgOGE8J33r2oVKQRs","type":"control","x":728.1867365830402,"y":493.5359242585198,"origin":"8CXBsWXYEc47I7mR2bfdo"},{"uuid":"8CXBsWXYEc47I7mR2bfdo","type":"anchor","x":798,"y":480.6761227069539,"origin":null},{"uuid":"tQfjs9P0WfXchzCxLqz9e","type":"control","x":762.4307317335365,"y":528.948701068583,"origin":"8CXBsWXYEc47I7mR2bfdo"},{"uuid":"ySiPxG9sjha43Zvl2ElwU","type":"control","x":732.4409550383357,"y":553.0849902493975,"origin":"58Tef-GJ3CK2Py9u6pTvZ"},{"uuid":"58Tef-GJ3CK2Py9u6pTvZ","type":"anchor","x":708.0306699143975,"y":553.0849902493975,"origin":null},{"uuid":"W-UWtltnyjjFK_a-u_jPw","type":"control","x":659.7974213462865,"y":553.0849902493975,"origin":"58Tef-GJ3CK2Py9u6pTvZ"},{"uuid":"QPQnB3ocJ-YAJTzp10f_n","type":"control","x":659.7974213462865,"y":535.4904006271098,"origin":"LnVLzwfAMUH3Em-OPZ2B9"},{"uuid":"LnVLzwfAMUH3Em-OPZ2B9","type":"anchor","x":611.5641727781755,"y":518.9150939333462,"origin":null},{"uuid":"icQl6miOJzRZlC9ursiNk","type":"control","x":500.4546186374343,"y":480.7324089356841,"origin":"LnVLzwfAMUH3Em-OPZ2B9"},{"uuid":"uXNBbStOWp0SPkKbMoOFw","type":"control","x":393.6388130402937,"y":480.79024916828234,"origin":"ibxi85EARpW9Wpfhhi75O"},{"uuid":"ibxi85EARpW9Wpfhhi75O","type":"anchor","x":282.5766420080935,"y":519.1125247106826,"origin":null},{"uuid":"zoStJAYCxLhPbH8SZX79Z","type":"control","x":264.32090839583856,"y":525.4117105380031,"origin":"ibxi85EARpW9Wpfhhi75O"},{"uuid":"V6ncML49WYLTOc_7znHd9","type":"control","x":254.9627779916916,"y":534.6018381546829,"origin":"b_eu-yPfQKmk8EordaQlg"},{"uuid":"b_eu-yPfQKmk8EordaQlg","type":"anchor","x":238.44355315396712,"y":543.9825452076019,"origin":null},{"uuid":"zM2SUz3EvlbaOku7Aakw3","type":"control","x":207.379946746357,"y":561.622512856175,"origin":"b_eu-yPfQKmk8EordaQlg"},{"uuid":"fkN4HEU906g32ztT0Rmsa","type":"control","x":195.23209569503464,"y":555.0549666872706,"origin":"ydA4BLtsl2n_hbpENe10g"},{"uuid":"ydA4BLtsl2n_hbpENe10g","type":"anchor","x":202,"y":524.2799067008887,"origin":null}],"type":"glyph-pen","hasPathBegan":false,"usedInCharacter":true,"contour":[{"type":2,"start":{"x":202,"y":275.72009329911134},"end":{"x":219.90253349147025,"y":313.0808457701073},"control1":{"x":207.40262435564733,"y":300.28694311508036},"control2":{"x":213.37013551947075,"y":312.740527272079},"fill":false},{"type":2,"start":{"x":219.90253349147025,"y":313.0808457701073},"end":{"x":270.87509626685926,"y":319.11252471068246},"control1":{"x":239.16614187668907,"y":314.08442245057927},"control2":{"x":252.0925651244408,"y":314.0434564481742},"fill":false},{"type":2,"start":{"x":270.87509626685926,"y":319.11252471068246},"end":{"x":623.2203082117336,"y":319.32387729304605},"control1":{"x":381.41744301681206,"y":348.94592135592416},"control2":{"x":512.6437496969652,"y":349.0330143731162},"fill":false},{"type":2,"start":{"x":623.2203082117336,"y":319.32387729304605},"end":{"x":798,"y":319.32387729304605},"control1":{"x":669.9268393202848,"y":306.4640757414802},"control2":{"x":728.1867365830402,"y":306.4640757414802},"fill":false},{"type":2,"start":{"x":798,"y":319.32387729304605},"end":{"x":708.0306699143975,"y":246.9150097506025},"control1":{"x":762.4307317335365,"y":271.051298931417},"control2":{"x":732.4409550383357,"y":246.9150097506025},"fill":false},{"type":2,"start":{"x":708.0306699143975,"y":246.9150097506025},"end":{"x":611.5641727781755,"y":281.08490606665384},"control1":{"x":659.7974213462865,"y":246.9150097506025},"control2":{"x":659.7974213462865,"y":264.5095993728902},"fill":false},{"type":2,"start":{"x":611.5641727781755,"y":281.08490606665384},"end":{"x":282.5766420080935,"y":280.8874752893174},"control1":{"x":500.4546186374343,"y":319.26759106431587},"control2":{"x":393.6388130402937,"y":319.20975083171766},"fill":false},{"type":2,"start":{"x":282.5766420080935,"y":280.8874752893174},"end":{"x":238.44355315396712,"y":256.0174547923981},"control1":{"x":264.32090839583856,"y":274.58828946199685},"control2":{"x":254.9627779916916,"y":265.3981618453171},"fill":false},{"type":2,"start":{"x":238.44355315396712,"y":256.0174547923981},"end":{"x":202,"y":275.72009329911134},"control1":{"x":207.379946746357,"y":238.37748714382496},"control2":{"x":195.23209569503464,"y":244.94503331272938},"fill":false}],"preview":[{"type":2,"start":{"x":20.200000000000003,"y":52.42799067008887},"end":{"x":21.990253349147025,"y":48.691915422989275},"control1":{"x":20.740262435564734,"y":49.97130568849197},"control2":{"x":21.337013551947077,"y":48.7259472727921},"fill":false},{"type":2,"start":{"x":21.990253349147025,"y":48.691915422989275},"end":{"x":27.08750962668593,"y":48.08874752893175},"control1":{"x":23.91661418766891,"y":48.59155775494207},"control2":{"x":25.20925651244408,"y":48.59565435518258},"fill":false},{"type":2,"start":{"x":27.08750962668593,"y":48.08874752893175},"end":{"x":62.322030821173364,"y":48.06761227069539},"control1":{"x":38.14174430168121,"y":45.10540786440758},"control2":{"x":51.26437496969652,"y":45.09669856268839},"fill":false},{"type":2,"start":{"x":62.322030821173364,"y":48.06761227069539},"end":{"x":79.80000000000001,"y":48.06761227069539},"control1":{"x":66.99268393202848,"y":49.353592425851986},"control2":{"x":72.81867365830402,"y":49.353592425851986},"fill":false},{"type":2,"start":{"x":79.80000000000001,"y":48.06761227069539},"end":{"x":70.80306699143976,"y":55.30849902493975},"control1":{"x":76.24307317335365,"y":52.8948701068583},"control2":{"x":73.24409550383358,"y":55.30849902493975},"fill":false},{"type":2,"start":{"x":70.80306699143976,"y":55.30849902493975},"end":{"x":61.15641727781755,"y":51.891509393334616},"control1":{"x":65.97974213462865,"y":55.30849902493975},"control2":{"x":65.97974213462865,"y":53.549040062710986},"fill":false},{"type":2,"start":{"x":61.15641727781755,"y":51.891509393334616},"end":{"x":28.257664200809348,"y":51.91125247106826},"control1":{"x":50.045461863743434,"y":48.07324089356841},"control2":{"x":39.36388130402938,"y":48.07902491682824},"fill":false},{"type":2,"start":{"x":28.257664200809348,"y":51.91125247106826},"end":{"x":23.84435531539671,"y":54.39825452076019},"control1":{"x":26.432090839583857,"y":52.54117105380032},"control2":{"x":25.496277799169164,"y":53.4601838154683},"fill":false},{"type":2,"start":{"x":23.84435531539671,"y":54.39825452076019},"end":{"x":20.200000000000003,"y":52.42799067008887},"control1":{"x":20.7379946746357,"y":56.16225128561751},"control2":{"x":19.523209569503464,"y":55.50549666872706},"fill":false}]}]}},{"uuid":"YGjyWzrvyYUpYp05Ynrek","type":"system","name":"直横","components":[],"groups":[],"orderedList":[],"selectedComponentsUUIDs":[],"view":{"zoom":"100","translateX":0,"translateY":0},"parameters":[{"uuid":"7T5drwGS1KYzC3v_g4M02","name":"length","type":0,"value":500,"min":100,"max":1000},{"uuid":"cLa1eZQoMXdNnn_OOM4TY","name":"weight","type":0,"value":40,"min":20,"max":100},{"uuid":"Tg5yLShrVELt-qAFO3i_-","name":"weightVariation","type":0,"value":1,"min":0,"max":1},{"uuid":"0vzqycv-XH8C1gV65JxLY","name":"camber","type":0,"value":0,"min":0,"max":1},{"uuid":"GI1NMvDUE1tk9AHN_XYy8","name":"起笔端点","type":2,"value":{"radius":{"name":"笔端长度","min":0,"max":50,"value":30.200472365778484},"degree":{"name":"笔端角度","min":-30,"max":30,"value":0},"params":[{"name":"左切角","min":-30,"max":30,"value":10},{"name":"上切角","min":-30,"max":30,"value":-0.9091514822259086},{"name":"下切角","min":-30,"max":30,"value":7.81479930420511}]},"min":0,"max":1000},{"uuid":"yUWXlFeP9aBE25i8i1FAT","name":"起笔顿笔","type":2,"value":{"radius":{"name":"长度","min":0,"max":100,"value":60.33834224999433},"degree":{"name":"角度","min":-30,"max":30,"value":-1.5074357587749676},"params":[{"name":"粗细","min":1,"max":2,"value":1.11}]},"min":0,"max":1000},{"uuid":"_ff79AosPeranOTuy7xLY","name":"收笔顿笔","type":2,"value":{"radius":{"name":"长度","min":0,"max":100,"value":28},"degree":{"name":"角度","min":-30,"max":30,"value":0},"params":[{"name":"顿笔粗细","min":0.5,"max":2,"value":1},{"name":"收笔粗细","min":0.5,"max":2,"value":1}]},"min":0,"max":1000},{"uuid":"chk3EOnBHUTwyKznx6oI9","name":"收笔端点","type":2,"value":{"radius":{"name":"端点长度","min":0,"max":50,"value":35.86388421490477},"degree":{"name":"角度","min":-30,"max":30,"value":0},"params":[{"name":"右切角","min":-30,"max":30,"value":0},{"name":"上切角","min":-30,"max":30,"value":0},{"name":"下切角","min":-30,"max":30,"value":0}]},"min":0,"max":1000}],"joints":[],"reflines":[],"script":"function script_YGjyWzrvyYUpYp05Ynrek (glyph, constants, FP) {\n  //Todo something\n  const length = glyph.getParam('length')\n  const camber = glyph.getParam('camber')\n  const weightVariation = glyph.getParam('weightVariation') || 0.7\n  const weight = glyph.getParam('weight') || 40\n  // const weight = constants.get('weight')\n  const ox = 500\n  const oy = 500\n\n  const starter = glyph.getParam('起笔端点')\n  const starter_1 = glyph.getParam('起笔顿笔')\n  //const starter_2 = glyph.getParam('起笔提笔')\n  const ending_1 = glyph.getParam('收笔顿笔')\n  const ending = glyph.getParam('收笔端点')\n\n  const getCoordY = (canvasY) => {\n    return -(canvasY - 500)\n  }\n\n  const getCanvasY = (coordY) => {\n    return -coordY + 500\n  }\n\n  const toDegree = (radian) => radian / Math.PI * 180\n  const toRadian = (degree) => Math.PI / 180 * degree\n\n  const getK = (p1, p2) => {\n    return -(p2.y - p1.y) / (p2.x - p1.x)\n  }\n\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  const intersection = (k1, x1, y1, k2, x2, y2) => {\n    if (k1 === Infinity || k1 === -Infinity) {\n      const x = x1\n      const y = k2 * (x - x2) + y2\n      return {\n        x, y,\n      }\n    } else if (k2 === Infinity || k2 === -Infinity) {\n      const x = x2\n      const y = k1 * (x - x1) + y1\n      return {\n        x, y,\n      }\n    }\n    const x = ((y2 - y1) + (k1 * x1 - k2 * x2)) / (k1 - k2)\n    const y = (-k1 * y2 + k2 * y1 + (x2 - x1) * k1 * k2) / (k2 - k1)\n    return {\n      x, y,\n    }\n  }\n\n  const start_turns = [\n    {\n      angle: starter.degree.value,\n      step_left: starter.params[0].value,\n      step_top: starter.params[1].value,\n      step_bottom: starter.params[2].value,\n      length: starter.radius.value,\n    },\n    {\n      angle: starter_1.degree.value,\n      weight: starter_1.params[0].value * weight,\n      length: starter_1.radius.value,\n    },\n    // {\n    //   angle: starter_2.degree.value,\n    //   weight: starter_2.params[0].value,\n    //   length: starter_2.radius.value,\n    // },\n    // {\n    //   angle: 0,\n    //   step_left: -10,\n    //   step_top: 10,\n    //   step_bottom: -10,\n    //   length: length * 0.05,\n    // },\n    // {\n    //   angle: -18,\n    //   weight: weight * 1.5,\n    //   length: length * 0.1,\n    // },\n    {\n      angle: 0,\n      weight: weight,\n      length: length * 0,\n    },\n  ]\n\n  const end_turns = [\n    {\n      angle: ending.degree.value,\n      step_left: ending.params[0].value,\n      step_top: ending.params[1].value,\n      step_bottom: ending.params[2].value,\n      length: ending.radius.value,\n    },\n    {\n      angle: ending_1.degree.value,\n      weight: ending_1.params[0].value * weight,\n      length: ending_1.radius.value,\n    },\n  ]\n\n  const start_turn_1_x = ox - length / 2\n  const start_turn_1_a = -toRadian(start_turns[2].angle + start_turns[1].angle + start_turns[0].angle)\n  const start_turn_2_x = start_turn_1_x + start_turns[0].length * Math.cos(start_turn_1_a)\n  const start_turn_2_a = -toRadian(start_turns[2].angle + start_turns[1].angle)\n  const start_turn_3_x = start_turn_2_x + start_turns[1].length * Math.cos(start_turn_2_a)\n  const start_turn_3_a = -toRadian(start_turns[2].angle)\n  const start_x = start_turn_3_x + start_turns[2].length * Math.cos(start_turn_3_a)\n  const middle_x = start_x + (length - (start_x - start_turn_1_x) - (end_turns[0].length + end_turns[1].length)) / 2\n  const end_x = start_x + (length - (start_x - start_turn_1_x) - (end_turns[0].length + end_turns[1].length))\n  const end_turn_1_x = ox + length / 2\n  const end_turn_1_a = -toRadian(end_turns[1].angle + end_turns[0].angle)\n  const end_turn_2_x = end_turn_1_x - end_turns[0].length * Math.cos(end_turn_1_a)\n  const end_turn_2_a = -toRadian(end_turns[1].angle)\n\n  const start_y = oy\n  const start_turn_3_y = start_y + start_turns[2].length * Math.sin(start_turn_3_a)\n  const start_turn_2_y = start_turn_3_y + start_turns[1].length * Math.sin(start_turn_2_a)\n  const start_turn_1_y = start_turn_2_y + start_turns[0].length * Math.sin(start_turn_1_a)\n  const middle_y = oy - (length - (start_x - start_turn_1_x) - (end_turns[0].length + end_turns[1].length)) * camber\n  const end_y = oy\n  const end_turn_2_y = end_y + end_turns[1].length * Math.sin(end_turn_2_a)\n  const end_turn_1_y = end_turn_2_y + end_turns[0].length * Math.sin(end_turn_1_a)\n\n  const middle_a = Math.atan(-(middle_y - start_y) / (middle_x - start_x))\n\n  const start_turn_1 = new FP.Joint(\n    'start_turn_1',\n    {\n      x: start_turn_1_x,\n      y: start_turn_1_y,\n    },\n  )\n  const start_turn_2 = new FP.Joint(\n    'start_turn_2',\n    {\n      x: start_turn_2_x,\n      y: start_turn_2_y,\n    },\n  )\n  const start_turn_3 = new FP.Joint(\n    'start_turn_3',\n    {\n      x: start_turn_3_x,\n      y: start_turn_3_y,\n    },\n  )\n  const start_turn_2_top = new FP.Joint(\n    'start_turn_2_top',\n    {\n      x: start_turn_2_x - start_turns[1].weight / 2 * Math.sin(start_turn_2_a),\n      y: start_turn_2_y - start_turns[1].weight / 2 * Math.cos(start_turn_2_a),\n    },\n  )\n  const start_turn_2_bottom = new FP.Joint(\n    'start_turn_2_bottom',\n    {\n      x: start_turn_2_x + start_turns[1].weight / 2 * Math.sin(start_turn_2_a),\n      y: start_turn_2_y + start_turns[1].weight / 2 * Math.cos(start_turn_2_a),\n    },\n  )\n  const start = new FP.Joint(\n    'start',\n    {\n      x: start_x,\n      y: start_y,\n    },\n  )\n  const middle = new FP.Joint(\n    'middle',\n    {\n      x: middle_x,\n      y: middle_y,\n    },\n  )\n  const end = new FP.Joint(\n    'end',\n    {\n      x: end_x,\n      y: end_y,\n    },\n  )\n  const bend_left = new FP.Joint(\n    'bend_left',\n    {\n      x: middle_x - distance(middle, start) / 3 / Math.cos(Math.abs(middle_a)),\n      y: middle_y,\n    },\n  )\n  const bend_right = new FP.Joint(\n    'bend_right',\n    {\n      x: middle_x + distance(middle, start) / 3 / Math.cos(Math.abs(middle_a)),\n      y: middle_y,\n    },\n  )\n  const end_turn_1 = new FP.Joint(\n    'end_turn_1',\n    {\n      x: end_turn_1_x,\n      y: end_turn_1_y,\n    },\n  )\n  const end_turn_2 = new FP.Joint(\n    'end_turn_2',\n    {\n      x: end_turn_2_x,\n      y: end_turn_2_y,\n    },\n  )\n  const end_turn_2_top = new FP.Joint(\n    'end_turn_2_top',\n    {\n      x: end_turn_2_x + end_turns[1].weight / 2 * Math.sin(end_turn_2_a),\n      y: end_turn_2_y - end_turns[1].weight / 2 * Math.cos(end_turn_2_a),\n    },\n  )\n  const end_turn_2_bottom = new FP.Joint(\n    'end_turn_2_bottom',\n    {\n      x: end_turn_2_x - end_turns[1].weight / 2 * Math.sin(end_turn_2_a),\n      y: end_turn_2_y + end_turns[1].weight / 2 * Math.cos(end_turn_2_a),\n    },\n  )\n\n  // glyph.addJoint(start_turn_1)\n  // glyph.addJoint(start_turn_2)\n  // glyph.addJoint(start_turn_3)\n  // glyph.addJoint(start_turn_2_top)\n  // glyph.addJoint(start_turn_2_bottom)\n  // glyph.addJoint(start)\n  // glyph.addJoint(middle)\n  // glyph.addJoint(end)\n  // glyph.addJoint(bend_left)\n  // glyph.addJoint(bend_right)\n\n  const { contour1, contour2 } = FP.Skeleton.getContours([start, {\n    x: bend_left.x,\n    y: bend_left.y,\n  }, {\n    x: bend_right.x,\n    y: bend_right.y,\n  }, end], [{\n    pos: 0,\n    weight,\n  }, {\n    pos: 0.5,\n    weight: weight * weightVariation,\n  }, {\n    pos: 1,\n    weight: ending_1.params[1].value * weight,\n  }])\n\n  const start_turn_3_top = new FP.Joint(\n    'start_turn_3_top',\n    {\n      x: contour1[0].start.x,\n      y: contour1[0].start.y,\n    },\n  )\n  const start_turn_3_bottom = new FP.Joint(\n    'start_turn_3_bottom',\n    {\n      x: contour2[0].start.x,\n      y: contour2[0].start.y,\n    },\n  )\n  // glyph.addJoint(start_turn_3_top)\n  // glyph.addJoint(start_turn_3_bottom)\n  // const end_turn_2 = new FP.Joint(\n  //   'end_turn_2',\n  //   {\n  //     x: end_turn_2_x,\n  //     y: contour1[contour1.length - 1].end.y,\n  //   },\n  // )\n  //glyph.addJoint(end_turn_2)\n\n  const start_turn_3_top_a = Math.atan(getK(contour1[0].start, start_turn_3_top))\n  const start_turn_3_bottom_a = Math.atan(getK(contour2[0].start, start_turn_3_bottom))\n\n  const start_turn_2_top_a = Math.atan(getK(start_turn_3_top, start_turn_2_top))\n  const start_turn_2_bottom_a = Math.atan(getK(start_turn_3_bottom, start_turn_2_bottom))\n\n\n  const end_top = new FP.Joint(\n    'end_top',\n    {\n      x: contour1[contour1.length - 1].end.x,\n      y: contour1[contour1.length - 1].end.y,\n    },\n  )\n  const end_bottom = new FP.Joint(\n    'end_bottom',\n    {\n      x: contour2[contour2.length - 1].end.x,\n      y: contour2[contour2.length - 1].end.y,\n    },\n  )\n\n  const end_turn_2_top_a = Math.atan(getK(end_top, end_turn_2_top))\n  const end_turn_2_bottom_a = Math.atan(getK(end_bottom, end_turn_2_bottom))\n\n  const p1 = intersection(\n    Math.tan(start_turn_3_top_a - Math.PI / 2), (contour1[0].start.x + start_turn_3_top.x) / 2, getCoordY((contour1[0].start.y + start_turn_3_top.y) / 2),\n    getK(contour1[0].start, contour1[0].control1), contour1[0].start.x, getCoordY(contour1[0].start.y)\n  )\n  const p2 = intersection(\n    Math.tan(start_turn_3_bottom_a - Math.PI / 2), (contour2[0].start.x + start_turn_3_bottom.x) / 2, getCoordY((contour2[0].start.y + start_turn_3_bottom.y) / 2),\n    getK(contour2[0].start, contour2[0].control1), contour2[0].start.x, getCoordY(contour2[0].start.y)\n  )\n  const start_turn_3_top_bend = new FP.Joint(\n    'start_turn_3_top_bend',\n    {\n      x: p1.x,\n      y: getCanvasY(p1.y),\n    },\n  )\n  const start_turn_3_bottom_bend = new FP.Joint(\n    'start_turn_3_bottom_bend',\n    {\n      x: p2.x,\n      y: getCanvasY(p2.y),\n    },\n  )\n\n  // glyph.addJoint(start_turn_3_top_bend)\n  // glyph.addJoint(start_turn_3_bottom_bend)\n\n  const start_turn_3_top_control = {\n    x: start_turn_3_top.x + (2 / 3) * (start_turn_3_top_bend.x - start_turn_3_top.x),\n    y: start_turn_3_top.y + (2 / 3) * (start_turn_3_top_bend.y - start_turn_3_top.y),\n  }\n\n  const start_turn_3_bottom_control = {\n    x: start_turn_3_bottom.x + (2 / 3) * (start_turn_3_bottom_bend.x - start_turn_3_bottom.x),\n    y: start_turn_3_bottom.y + (2 / 3) * (start_turn_3_bottom_bend.y - start_turn_3_bottom.y),\n  }\n\n  const start_turn_3_top_control_a = Math.atan(getK(start_turn_3_top, start_turn_3_top_control))\n  const start_turn_3_bottom_control_a = Math.atan(getK(start_turn_3_bottom, start_turn_3_bottom_control))\n\n  const getPointAtPercentage = (start, end, percentage) => {\n    var x = start.x + (end.x - start.x) * percentage;\n    var y = start.y + (end.y - start.y) * percentage;\n    return { x: x, y: y };\n  }\n  let _start_turn_2_top_control_1 = intersection(\n    Math.tan(start_turn_2_top_a - Math.PI / 2), (start_turn_2_top.x + start_turn_3_top.x) * 0.5, getCoordY((start_turn_2_top.y + start_turn_3_top.y) * 0.5),\n    Math.tan(toRadian(start_turns[0].step_top)), start_turn_2_top.x, getCoordY(start_turn_2_top.y),\n  )\n  _start_turn_2_top_control_1 = getPointAtPercentage(start_turn_2_top, {\n    x: _start_turn_2_top_control_1.x,\n    y: getCanvasY(_start_turn_2_top_control_1.y)\n  }, 0.75)\n  let _start_turn_2_top_control_2 = start_turns[2].length ? intersection(\n    Math.tan(start_turn_2_top_a - Math.PI / 2), (start_turn_2_top.x + start_turn_3_top.x) * 0.5, getCoordY((start_turn_2_top.y + start_turn_3_top.y) * 0.5),\n    getK(start_turn_3_top, start_turn_3_top_control), start_turn_3_top.x, getCoordY(start_turn_3_top.y)\n  ) : intersection(\n    Math.tan(start_turn_2_top_a - Math.PI / 2), (start_turn_2_top.x + start_turn_3_top.x) * 0.5, getCoordY((start_turn_2_top.y + start_turn_3_top.y) * 0.5),\n    getK(contour1[0].start, contour1[0].control1), contour1[0].start.x, getCoordY(contour1[0].start.y)\n  )\n  _start_turn_2_top_control_2 = getPointAtPercentage(start_turn_3_top, {\n    x: _start_turn_2_top_control_2.x,\n    y: getCanvasY(_start_turn_2_top_control_2.y)\n  }, 0.75)\n  let _start_turn_2_bottom_control_1 = intersection(\n    Math.tan(start_turn_2_bottom_a - Math.PI / 2), (start_turn_2_bottom.x + start_turn_3_bottom.x) / 2, getCoordY((start_turn_2_bottom.y + start_turn_3_bottom.y) / 2),\n    Math.tan(toRadian(start_turns[0].step_bottom)), start_turn_2_bottom.x, getCoordY(start_turn_2_bottom.y),\n  )\n  _start_turn_2_bottom_control_1 = getPointAtPercentage(start_turn_2_bottom, {\n    x: _start_turn_2_bottom_control_1.x,\n    y: getCanvasY(_start_turn_2_bottom_control_1.y)\n  }, 0.75)\n  let _start_turn_2_bottom_control_2 = intersection(\n    Math.tan(start_turn_2_bottom_a - Math.PI / 2), (start_turn_2_bottom.x + start_turn_3_bottom.x) / 2, getCoordY((start_turn_2_bottom.y + start_turn_3_bottom.y) / 2),\n    getK(start_turn_3_bottom, contour2[0].control1), start_turn_3_bottom.x, getCoordY(start_turn_3_bottom.y)\n  )\n  _start_turn_2_bottom_control_2 = getPointAtPercentage(start_turn_3_bottom, {\n    x: _start_turn_2_bottom_control_2.x,\n    y: getCanvasY(_start_turn_2_bottom_control_2.y)\n  }, 0.75)\n\n  const _start_turn_1_top_control = intersection(\n    Math.tan(-toRadian(start_turns[0].step_left) - Math.PI / 2), start_turn_1.x, getCoordY(start_turn_1.y),\n    Math.tan(toRadian(start_turns[0].step_top)), start_turn_2_top.x, getCoordY(start_turn_2_top.y),\n  )\n  const _start_turn_1_bottom_control = intersection(\n    Math.tan(-toRadian(start_turns[0].step_left) - Math.PI / 2), start_turn_1.x, getCoordY(start_turn_1.y),\n    Math.tan(toRadian(start_turns[0].step_bottom)), start_turn_2_bottom.x, getCoordY(start_turn_2_bottom.y),\n  )\n\n  \n  let _end_turn_2_top_control_1 = intersection(\n    Math.tan(end_turn_2_top_a - Math.PI / 2), (end_turn_2_top.x + end_top.x) * 0.5, getCoordY((end_turn_2_top.y + end_top.y) * 0.5),\n    Math.tan(toRadian(end_turns[0].step_top)), end_turn_2_top.x, getCoordY(end_turn_2_top.y),\n  )\n  _end_turn_2_top_control_1 = getPointAtPercentage(end_turn_2_top, {\n    x: _end_turn_2_top_control_1.x,\n    y: getCanvasY(_end_turn_2_top_control_1.y)\n  }, 0.75)\n  let _end_turn_2_top_control_2 = intersection(\n    Math.tan(end_turn_2_top_a - Math.PI / 2), (end_turn_2_top.x + end_top.x) * 0.5, getCoordY((end_turn_2_top.y + end_top.y) * 0.5),\n    getK(contour1[0].end, contour1[0].control2), contour1[0].end.x, getCoordY(contour1[0].end.y)\n  )\n  _end_turn_2_top_control_2 = getPointAtPercentage(end_top, {\n    x: _end_turn_2_top_control_2.x,\n    y: getCanvasY(_end_turn_2_top_control_2.y)\n  }, 0.75)\n  let _end_turn_2_bottom_control_1 = intersection(\n    Math.tan(end_turn_2_bottom_a - Math.PI / 2), (end_turn_2_bottom.x + end_bottom.x) / 2, getCoordY((end_turn_2_bottom.y + end_bottom.y) / 2),\n    Math.tan(toRadian(end_turns[0].step_bottom)), end_turn_2_bottom.x, getCoordY(end_turn_2_bottom.y),\n  )\n  _end_turn_2_bottom_control_1 = getPointAtPercentage(end_turn_2_bottom, {\n    x: _end_turn_2_bottom_control_1.x,\n    y: getCanvasY(_end_turn_2_bottom_control_1.y)\n  }, 0.75)\n  let _end_turn_2_bottom_control_2 = intersection(\n    Math.tan(end_turn_2_bottom_a - Math.PI / 2), (end_turn_2_bottom.x + end_bottom.x) / 2, getCoordY((end_turn_2_bottom.y + end_bottom.y) / 2),\n    getK(end_bottom, contour2[0].control1), end_bottom.x, getCoordY(end_bottom.y)\n  )\n  _end_turn_2_bottom_control_2 = getPointAtPercentage(end_bottom, {\n    x: _end_turn_2_bottom_control_2.x,\n    y: getCanvasY(_end_turn_2_bottom_control_2.y)\n  }, 0.75)\n\n  const _end_turn_1_top_control = intersection(\n    Math.tan(-toRadian(end_turns[0].step_left) - Math.PI / 2), end_turn_1.x, getCoordY(end_turn_1.y),\n    Math.tan(toRadian(end_turns[0].step_top)), end_turn_2_top.x, getCoordY(end_turn_2_top.y),\n  )\n  const _end_turn_1_bottom_control = intersection(\n    Math.tan(-toRadian(end_turns[0].step_left) - Math.PI / 2), end_turn_1.x, getCoordY(end_turn_1.y),\n    Math.tan(toRadian(end_turns[0].step_bottom)), end_turn_2_bottom.x, getCoordY(end_turn_2_bottom.y),\n  )\n\n  const start_turn_2_top_control_1 = new FP.Joint(\n    'start_turn_2_top_control_1',\n    {\n      x: _start_turn_2_top_control_1.x,\n      y: _start_turn_2_top_control_1.y,\n    },\n  )\n  const start_turn_2_top_control_2 = new FP.Joint(\n    'start_turn_2_top_control_2',\n    {\n      x: _start_turn_2_top_control_2.x,\n      y: _start_turn_2_top_control_2.y,\n    },\n  )\n  const start_turn_2_bottom_control_1 = new FP.Joint(\n    'start_turn_2_bottom_control_1',\n    {\n      x: _start_turn_2_bottom_control_1.x,\n      y: _start_turn_2_bottom_control_1.y,\n    },\n  )\n  const start_turn_2_bottom_control_2 = new FP.Joint(\n    'start_turn_2_bottom_control_2',\n    {\n      x: _start_turn_2_bottom_control_2.x,\n      y: _start_turn_2_bottom_control_2.y,\n    },\n  )\n  const start_turn_1_top_control = new FP.Joint(\n    'start_turn_1_top_control',\n    {\n      x: _start_turn_1_top_control.x,\n      y: getCanvasY(_start_turn_1_top_control.y),\n    },\n  )\n  const start_turn_1_bottom_control = new FP.Joint(\n    'start_turn_1_bottom_control',\n    {\n      x: _start_turn_1_bottom_control.x,\n      y: getCanvasY(_start_turn_1_bottom_control.y),\n    },\n  )\n\n  const end_turn_2_top_control_1 = new FP.Joint(\n    'end_turn_2_top_control_1',\n    {\n      x: _end_turn_2_top_control_1.x,\n      y: _end_turn_2_top_control_1.y,\n    },\n  )\n  const end_turn_2_top_control_2 = new FP.Joint(\n    'end_turn_2_top_control_2',\n    {\n      x: _end_turn_2_top_control_2.x,\n      y: _end_turn_2_top_control_2.y,\n    },\n  )\n  const end_turn_2_bottom_control_1 = new FP.Joint(\n    'end_turn_2_bottom_control_1',\n    {\n      x: _end_turn_2_bottom_control_1.x,\n      y: _end_turn_2_bottom_control_1.y,\n    },\n  )\n  const end_turn_2_bottom_control_2 = new FP.Joint(\n    'end_turn_2_bottom_control_2',\n    {\n      x: _end_turn_2_bottom_control_2.x,\n      y: _end_turn_2_bottom_control_2.y,\n    },\n  )\n  const end_turn_1_top_control = new FP.Joint(\n    'end_turn_1_top_control',\n    {\n      x: _end_turn_1_top_control.x,\n      y: getCanvasY(_end_turn_1_top_control.y),\n    },\n  )\n  const end_turn_1_bottom_control = new FP.Joint(\n    'end_turn_1_bottom_control',\n    {\n      x: _end_turn_1_bottom_control.x,\n      y: getCanvasY(_end_turn_1_bottom_control.y),\n    },\n  )\n\n  // const _end_top_bend = intersection(\n  //   Math.tan(-(contour1[contour1.length - 1].control2.y - contour1[contour1.length - 1].end.y) / (contour1[contour1.length - 1].control2.x - contour1[contour1.length - 1].end.x)),\n  //   contour1[contour1.length - 1].end.x, getCoordY(contour1[contour1.length - 1].end.y),\n  //   Math.tan(toRadian(endOption.step_top)), end_turn_2.x, getCoordY(end_turn_2.y),\n  // )\n\n  // const end_top_bend = new FP.Joint(\n  //   'end_top_bend',\n  //   {\n  //     x: _end_top_bend.x,\n  //     y: getCanvasY(_end_top_bend.y),\n  //   },\n  // )\n\n  // const end_turn_1 = new FP.Joint(\n  //   'end_turn_1',\n  //   {\n  //     x: end_turn_1_x,\n  //     y: end_top_bend.y + endOption.weight,\n  //   },\n  // )\n\n  // const end_bottom_control_left_2 = new FP.Joint(\n  //   'end_bottom_control_left_2',\n  //   {\n  //     x: contour2[contour2.length - 1].end.x + (end_turn_1_x - contour2[contour2.length - 1].end.x) / 2,\n  //     y: end_turn_1.y,\n  //   },\n  // )\n  // const end_bottom_control_right = new FP.Joint(\n  //   'end_bottom_control_right',\n  //   {\n  //     x: end_turn_2.x - (end_turn_1.y - end_turn_2.y) * Math.tan(toRadian(endOption.step_right)),\n  //     y: end_turn_1.y,\n  //   },\n  // )\n  // const end_control_bottom_a = Math.atan(-(contour2[contour2.length - 1].end.y - contour2[contour2.length - 1].control2.y) / (contour2[contour2.length - 1].end.x - contour2[contour2.length - 1].control2.x))\n  // const end_bottom_control_left_1 = new FP.Joint(\n  //   'end_bottom_control_left_1',\n  //   {\n  //     x: contour2[contour2.length - 1].end.x + (end_turn_1_x - contour2[contour2.length - 1].end.x) / 2,\n  //     y: contour2[contour2.length - 1].end.y + (end_turn_1_x - contour2[contour2.length - 1].end.x) / 2 * Math.tan(Math.abs(end_control_bottom_a)),\n  //   },\n  // )\n  //glyph.addJoint(end_turn_1)\n\n\n  // glyph.addJoint(start_turn_2_top_control_1)\n  // glyph.addJoint(start_turn_2_top_control_2)\n  // glyph.addJoint(start_turn_2_bottom_control_1)\n  // glyph.addJoint(start_turn_2_bottom_control_2)\n  // glyph.addJoint(start_turn_1_top_control)\n  // glyph.addJoint(start_turn_1_bottom_control)\n  // glyph.addJoint(end_bottom_control_right)\n  // glyph.addJoint(end_bottom_control_left_1)\n  // glyph.addJoint(end_bottom_control_left_2)\n  // glyph.addJoint(end_top_bend)\n\n  // 顺时针\n  const pen = new FP.PenComponent()\n  pen.beginPath()\n  pen.moveTo(start_turn_1.x, start_turn_1.y)\n  pen.quadraticBezierTo(start_turn_1_top_control.x, start_turn_1_top_control.y, start_turn_2_top.x, start_turn_2_top.y)\n  if (start_turns[2].length) {\n    pen.bezierTo(start_turn_2_top_control_1.x, start_turn_2_top_control_1.y, start_turn_2_top_control_2.x, start_turn_2_top_control_2.y, start_turn_3_top.x, start_turn_3_top.y)\n    pen.quadraticBezierTo(start_turn_3_top_bend.x, start_turn_3_top_bend.y, contour1[0].start.x, contour1[0].start.y)\n  } else {\n    pen.bezierTo(start_turn_2_top_control_1.x, start_turn_2_top_control_1.y, start_turn_2_top_control_2.x, start_turn_2_top_control_2.y, contour1[0].start.x, contour1[0].start.y)\n  }\n  //pen.moveTo(contour1[0].start.x, contour1[0].start.y)\n  for (let i = 0; i < contour1.length; i++) {\n    pen.bezierTo(contour1[i].control1.x, contour1[i].control1.y, contour1[i].control2.x, contour1[i].control2.y, contour1[i].end.x, contour1[i].end.y)\n  }\n  pen.bezierTo(end_turn_2_top_control_1.x, end_turn_2_top_control_1.y, end_turn_2_top_control_2.x, end_turn_2_top_control_2.y, end_turn_2_top.x, end_turn_2_top.y)\n  pen.quadraticBezierTo(end_turn_1_top_control.x, end_turn_1_top_control.y, end_turn_1.x, end_turn_1.y)\n  pen.quadraticBezierTo(end_turn_1_bottom_control.x, end_turn_1_bottom_control.y, end_turn_2_bottom.x, end_turn_2_bottom.y)\n  pen.bezierTo(end_turn_2_bottom_control_1.x, end_turn_2_bottom_control_1.y, end_turn_2_bottom_control_2.x, end_turn_2_bottom_control_2.y, end_bottom.x, end_bottom.y)\n  //pen.lineTo(contour2[contour2.length - 1].end.x, contour2[contour2.length - 1].end.y)\n  \n  // pen.quadraticBezierTo(end_top_bend.x, end_top_bend.y, end_turn_2.x, end_turn_2.y)\n  // pen.quadraticBezierTo(end_bottom_control_right.x, end_bottom_control_right.y, end_turn_1.x, end_turn_1.y)\n  // pen.bezierTo(end_bottom_control_left_2.x, end_bottom_control_left_2.y, end_bottom_control_left_1.x, end_bottom_control_left_1.y, contour2[contour2.length - 1].end.x, contour2[contour2.length - 1].end.y)\n  \n  for (let i = contour2.length - 1; i >= 0; i--) {\n    pen.bezierTo(contour2[i].control2.x, contour2[i].control2.y, contour2[i].control1.x, contour2[i].control1.y, contour2[i].start.x, contour2[i].start.y)\n  }\n  //pen.lineTo(contour1[0].start.x, contour1[0].start.y)\n  if (start_turns[2].length) {\n    pen.quadraticBezierTo(start_turn_3_bottom_bend.x, start_turn_3_bottom_bend.y, start_turn_3_bottom.x, start_turn_3_bottom.y)\n    pen.bezierTo(start_turn_2_bottom_control_2.x, start_turn_2_bottom_control_2.y, start_turn_2_bottom_control_1.x, start_turn_2_bottom_control_1.y, start_turn_2_bottom.x, start_turn_2_bottom.y)\n  } else {\n    pen.bezierTo(start_turn_2_bottom_control_2.x, start_turn_2_bottom_control_2.y, start_turn_2_bottom_control_1.x, start_turn_2_bottom_control_1.y, start_turn_2_bottom.x, start_turn_2_bottom.y)\n  }\n  pen.quadraticBezierTo(start_turn_1_bottom_control.x, start_turn_1_bottom_control.y, start_turn_1.x, start_turn_1.y)\n  pen.closePath()\n  glyph.addComponent(pen)\n  // const start = new FP.Joint(\n  //   'start',\n  //   {\n  //     x: ox + length / 2 * Math.cos(angle),\n  //     y: oy - length / 2 * Math.sin(angle),\n  //   },\n  // )\n  // const end = new FP.Joint(\n  //   'end',\n  //   {\n  //     x: ox - length * (0.5 - endOption.ratio) * Math.cos(angle),\n  //     y: oy + length * (0.5 - endOption.ratio) * Math.sin(angle),\n  //   }\n  // )\n  // const bend = new FP.Joint(\n  //   'bend',\n  //   {\n  //     x: (start.x + end.x) / 2 + bending * Math.sin(angle),\n  //     y: (start.y + end.y) / 2 + bending * Math.cos(angle),\n  //   },\n  // )\n  // // const skeleton = new FP.Skeleton(constants.get('weight'))\n  // const { contour1, contour2 } = FP.Skeleton.getContours([start, {\n  //   x: start.x + 2 / 3 * (bend.x - start.x),\n  //   y: start.y + 2 / 3 * (bend.y - start.y),\n  // }, {\n  //   x: end.x + 2 / 3 * (bend.x - end.x),\n  //   y: end.y + 2 / 3 * (bend.y - end.y),\n  // }, end], weight * 2 / 3, weight * endRatio)\n\n  // const start0 = new FP.Joint(\n  //   'start0',\n  //   {\n  //     x: contour1[0].start.x,\n  //     y: contour1[0].start.y,\n  //   },\n  // )\n\n  // const start2 = new FP.Joint(\n  //   'start2',\n  //   {\n  //     x: contour2[0].start.x,\n  //     y: contour2[0].start.y,\n  //   },\n  // )\n\n  // const angle1 = Math.atan((start0.y - start2.y) / (start0.x - start2.x))\n\n  // const start1 = new FP.Joint(\n  //   'start1',\n  //   {\n  //     x: start.x + startD * Math.sin(angle1),\n  //     y: start.y - startD * Math.cos(angle1),\n  //   },\n  // )\n\n  // const end0 = new FP.Joint(\n  //   'end0',\n  //   {\n  //     x: contour1[0].end.x,\n  //     y: contour1[0].end.y,\n  //   },\n  // )\n\n  // const end2 = new FP.Joint(\n  //   'end2',\n  //   {\n  //     x: contour2[0].end.x,\n  //     y: contour2[0].end.y,\n  //   },\n  // )\n\n  // const end1 = new FP.Joint(\n  //   'end1',\n  //   {\n  //     x: ox - length / 2 * Math.cos(angle),\n  //     y: oy + length / 2 * Math.sin(angle),\n  //   },\n  // )\n\n  // const k1 = Math.tan(toRadian(glyph.getParam('angle') - 90))\n  // const k2 = Math.tan(toRadian(toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2))) - endOption.step))\n  // const k3 = getK(contour1[0].end, contour1[0].control2)\n  // const k4 = Math.tan(toRadian(toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2))) - endOption.step - endOption.hook))\n  // const k5 = getK(contour2[0].end, contour2[0].control2)\n  // const p = intersection(k1, end1.x, getCoordY(end1.y), k2, end2.x, getCoordY(end2.y))\n\n\n  // const control = new FP.Joint(\n  //   'control',\n  //   {\n  //     x: contour2[0].control2.x,\n  //     y: contour2[0].control2.y,\n  //   },\n  // )\n  // const control2 = new FP.Joint(\n  //   'control2',\n  //   {\n  //     x: contour1[0].control2.x,\n  //     y: contour1[0].control2.y,\n  //   },\n  // )\n  // const end3 = new FP.Joint(\n  //   'end3',\n  //   {\n  //     x: p.x,\n  //     y: getCanvasY(p.y),\n  //   },\n  // )\n\n  // const radius_p_1 = new FP.Joint(\n  //   'radius_p_1',\n  //   {\n  //     x: end3.x + endOption.radius * Math.cos(Math.atan(k1)),\n  //     y: end3.y - endOption.radius * Math.sin(Math.atan(k1)),\n  //   },\n  // )\n\n  // const radius_p_2 = new FP.Joint(\n  //   'radius_p_2',\n  //   {\n  //     x: end3.x + endOption.radius * Math.cos(Math.atan(k2)),\n  //     y: end3.y - endOption.radius * Math.sin(Math.atan(k2)),\n  //   },\n  // )\n\n  // const end_c1_p = intersection(k1, radius_p_1.x, getCoordY(radius_p_1.y), k3, end0.x, getCoordY(end0.y))\n  // const end_c2_p = intersection(k4, radius_p_2.x, getCoordY(radius_p_2.y), k5, end2.x, getCoordY(end2.y))\n\n  // const end_c1 = new FP.Joint(\n  //   'end_c1',\n  //   {\n  //     x: end_c1_p.x,\n  //     y: getCanvasY(end_c1_p.y),\n  //   },\n  // )\n  // const end_c2 = new FP.Joint(\n  //   'end_c2',\n  //   {\n  //     x: end_c2_p.x,\n  //     y: getCanvasY(end_c2_p.y),\n  //   },\n  // )\n  // const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  // const k = getK(contour1[0].end, contour1[0].control2)\n  // const angle_1 = Math.atan(-getK(end2, end0))\n  // console.log(angle_1)\n  // const angle_2 = toRadian(toDegree(angle_1) + 1)\n\n  // const r = weight * endRatio\n  // const l = (k * (end0.x - end2.x) - (end2.y - end0.y)) / (Math.sin(angle_2) + k * Math.cos(angle_2))\n  // const delta = l - r\n  // console.log(l, r, delta)\n\n  // const _angle_1 = toDegree(angle_1)\n  // const _angle_3 = 200 - toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2)))\n  // console.log('a3',_angle_3)\n\n  // const tan_1 = Math.atan(k)\n  // const tan_3 = toRadian(-70)\n\n  // //const tan_d = (tan_3 - tan_1) / (_angle_3 - _angle_1)\n\n  // const l1 = distance(end2, end0)\n  // const l2 = distance(end2, end1)\n  // const d = 0\n  // let lastX = end0.x\n  // let lastY = end0.y\n  // let lastTan = tan_1\n  // const endPoints = []\n  // let sum = 0\n  // const pow = 0.05\n  // for (let i = 0; i <= _angle_3 - _angle_1; i++) {\n  //   sum += Math.pow(i, pow)\n  // }\n  // const a1 = (tan_3 - tan_1) / sum\n  // const path = new FP.PolygonComponent()\n  // let _l = 0\n  // path.beginPath()\n  // for (let i = _angle_1; i < _angle_3; i++) {\n  //   const tan_d = a1 * Math.pow((i - _angle_1), pow)\n  //   const tan = lastTan + tan_d\n  //   lastTan = tan\n  //   console.log('tan', tan)\n  //   const angle = toRadian(i + 1)\n  //   const _k = Math.tan(tan)\n  //   _l = (_k * (lastX - end2.x) - (end2.y - lastY)) / (Math.sin(angle) + _k * Math.cos(angle))\n  //   console.log('_l', _l)\n  //   const _r = r + d * (-0.5 + Math.random())\n  //   //console.log(r, delta)\n  //   const x = end2.x + _l * Math.cos(angle)\n  //   const y = end2.y + _l * Math.sin(angle)\n  //   if (i === _angle_1) {\n  //     console.log('start', angle, _r, x, y)\n  //     path.moveTo(end0.x, end0.y)\n  //   } else {\n  //     path.lineTo(x, y)\n  //     console.log('a', _l * Math.cos(angle), _l * Math.sin(angle))\n  //   }\n  //   endPoints.push({x, y})\n  //   //console.log('111', i, angle, x, y)\n  //   lastX = x\n  //   lastY = y\n  // }\n\n  // const pen = new FP.PenComponent()\n  // pen.beginPath()\n\n  // // const endCurve = FP.fitCurve(endPoints, 2)\n  // // pen.moveTo(end0.x, end0.y)\n  // // for (let i = 0; i < endCurve.length; i++) {\n  // //   const bezier = endCurve[i]\n  // //   pen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // // }\n\n  // pen.moveTo(end0.x, end0.y)\n  // pen.quadraticBezierTo(end_c1.x, end_c1.y, radius_p_1.x, radius_p_1.y)\n  // pen.quadraticBezierTo(end3.x, end3.y, radius_p_2.x, radius_p_2.y)\n  // pen.quadraticBezierTo(end_c2.x, end_c2.y, end2.x, end2.y)\n\n  // const controlLength = _l * 0.5\n  // //path.closePath()\n  // //glyph.addComponent(path)\n\n  // const c = new FP.Joint(\n  //   'c',\n  //   {\n  //     x: end2.x - controlLength * Math.cos(Math.atan(getK(contour2[0].end, contour2[0].control2))),\n  //     y: end2.y + controlLength * Math.sin(Math.atan(getK(contour2[0].end, contour2[0].control2))),\n  //   },\n  // )\n\n  // //pen.moveTo(lastX, lastY)\n  // //pen.quadraticBezierTo(c.x, c.y, end2.x, end2.y)\n  // pen.bezierTo(contour2[0].control2.x, contour2[0].control2.y, contour2[0].control1.x, contour2[0].control1.y, start2.x, start2.y)\n  \n  \n  // const getAngle = (p1, p2) => {\n  //   if (p2.x === p1.x) return 90\n  //   if (p2.y === p1.y && p2.x > p1.x) return 180\n  //   if (p2.x > p1.x) {\n  //     return 180 - toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n  //   }\n  //   return -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n  // }\n  // const startPoints = []\n  // let startCurve\n  // {\n  //   const path = new FP.PolygonComponent()\n  //   path.beginPath()\n  //   let delta = 1\n  //   const angle1 = Math.round(getAngle(start, start2))\n  //   const angle2 = Math.round(getAngle(start, start1))\n  //   const angle3 = Math.round(getAngle(start, start0))\n  //   const l1 = distance(start, start2)\n  //   const l2 = distance(start, start1)\n  //   const l3 = distance(start, start0)\n  //   const pow = 0.5\n  //   let r = l1\n  //   let sum = 0\n  //   for (let i = 0; i <= angle2 - angle1; i++) {\n  //     sum += Math.pow(i, pow)\n  //   }\n  //   const a1 = (l2 - l1) / sum\n  //   const n1 = angle2 - angle1\n  //   sum = 0\n  //   for (let i = 0; i <= angle3 - angle2; i++) {\n  //     sum += Math.pow(i, pow)\n  //   }\n  //   const a2 = (l3 - l2) / sum\n  //   const n2 = angle3 - angle2\n  //   const d = 0\n  //   for (let i = angle1; i <= angle3; i++) {\n  //     let _i = i\n  //     if (i >= angle1 && i < angle2) {\n  //       _i = i - angle1\n  //       delta = a1 * Math.pow((n1 - _i), pow)\n  //     }\n  //     if (i >= angle2 && i < angle3) {\n  //       _i = i - angle2\n  //       delta = a2 * Math.pow((i - angle2), pow)\n  //     }\n  //     const _r = r + d * (-0.5 + Math.random())\n  //     r += delta\n  //     //console.log(r, delta)\n  //     const angle = Math.PI / 180 * i\n  //     const x = start.x - _r * Math.cos(angle)\n  //     const y = start.y - _r * Math.sin(angle)\n  //     if (i === angle1) {\n  //       console.log('start', angle, _r, x, y)\n  //       path.moveTo(x, y)\n  //     } else {\n  //       path.lineTo(x, y)\n  //     }\n  //     startPoints.push({x, y})\n  //   }\n  //   path.closePath()\n  //   //glyph.addComponent(path)\n  //   //startCurve = FP.fitCurve(startPoints, 2)\n  // }\n  // const curve = FP.fitCurve(startPoints, 2)\n  // for (let i = 0; i < curve.length; i++) {\n  //   const bezier = curve[i]\n  //   pen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // }\n\n  // pen.bezierTo(contour1[0].control1.x, contour1[0].control1.y, contour1[0].control2.x, contour1[0].control2.y, contour1[0].end.x, contour1[0].end.y)\n  // pen.closePath()\n  // glyph.addComponent(pen)\n\n  // // const _x = end.x + l * Math.cos(angle_2)\n  // // const _y = end.y + l * Math.sin(angle_2)\n  // // -(end0.y - _y) / (end0.x - _x) = k\n\n  // // -(end0.y - (end.y + l * Math.sin(angle_2))) / (end0.x - (end.x + l * Math.cos(angle_2))) = k\n\n  // glyph.addJoint(start)\n  // glyph.addJoint(bend)\n  // glyph.addJoint(end)\n  // glyph.addJoint(start0)\n  // glyph.addJoint(start1)\n  // glyph.addJoint(start2)\n  // glyph.addJoint(end0)\n  // glyph.addJoint(end1)\n  // glyph.addJoint(end2)\n  // glyph.addJoint(end3)\n  // glyph.addJoint(control)\n  // glyph.addJoint(control2)\n  // glyph.addJoint(end_c1)\n  // glyph.addJoint(end_c2)\n  // glyph.addJoint(radius_p_1)\n  // glyph.addJoint(radius_p_2)\n  // console.log('p', end_c2.x, end_c2.y)\n\n    glyph.addJoint(start_turn_1)\n    glyph.addJoint(start_turn_2)\n    glyph.addJoint(end_turn_1)\n    glyph.addJoint(end_turn_2)\n    glyph.addJoint(end_turn_2_top)\n    glyph.addJoint(end_turn_2_bottom)\n    glyph.addJoint(start_turn_3)\n    glyph.addJoint(start_turn_2_top)\n    glyph.addJoint(start_turn_2_bottom)\n    glyph.addJoint(start)\n    glyph.addJoint(middle)\n    glyph.addJoint(end)\n    glyph.addJoint(end_top)\n    glyph.addJoint(end_bottom)\n    glyph.addJoint(bend_left)\n    glyph.addJoint(bend_right)\n\n    glyph.addJoint(start_turn_3_top)\n    glyph.addJoint(start_turn_3_bottom)\n    glyph.addJoint(end_turn_2)\n    glyph.addJoint(start_turn_3_top_bend)\n    glyph.addJoint(start_turn_3_bottom_bend)\n    glyph.addJoint(end_turn_1)\n\n    glyph.addJoint(start_turn_2_top_control_1)\n    glyph.addJoint(start_turn_2_top_control_2)\n    glyph.addJoint(start_turn_2_bottom_control_1)\n    glyph.addJoint(start_turn_2_bottom_control_2)\n    glyph.addJoint(start_turn_1_top_control)\n    glyph.addJoint(start_turn_1_bottom_control)\n    glyph.addJoint(end_turn_2_top_control_1)\n    glyph.addJoint(end_turn_2_top_control_2)\n    glyph.addJoint(end_turn_2_bottom_control_1)\n    glyph.addJoint(end_turn_2_bottom_control_2)\n    glyph.addJoint(end_turn_1_top_control)\n    glyph.addJoint(end_turn_1_bottom_control)\n    // glyph.addJoint(end_bottom_control_right)\n    // glyph.addJoint(end_bottom_control_left_1)\n    // glyph.addJoint(end_bottom_control_left_2)\n    // glyph.addJoint(end_top_bend)\n\n    const refline = (p1, p2) => {\n      return {\n        name: `${p1.name}-${p2.name}`,\n        start: p1.name,\n        end: p2.name,\n      }\n    }\n\n    glyph.addRefLine(refline(start_turn_1, start_turn_1_top_control))\n    glyph.addRefLine(refline(start_turn_1, start_turn_1_bottom_control))\n    glyph.addRefLine(refline(start_turn_2_top, start_turn_1_top_control))\n    glyph.addRefLine(refline(start_turn_2_bottom, start_turn_1_bottom_control))\n    glyph.addRefLine(refline(start_turn_2_top, start_turn_2_top_control_1))\n    glyph.addRefLine(refline(start_turn_2_bottom, start_turn_2_bottom_control_1))\n    glyph.addRefLine(refline(start_turn_3_top, start_turn_2_top_control_2))\n    glyph.addRefLine(refline(start_turn_3_bottom, start_turn_2_bottom_control_2))\n\n    glyph.addRefLine(refline(end_turn_1, end_turn_1_top_control))\n    glyph.addRefLine(refline(end_turn_1, end_turn_1_bottom_control))\n    glyph.addRefLine(refline(end_turn_2_top, end_turn_1_top_control))\n    glyph.addRefLine(refline(end_turn_2_bottom, end_turn_1_bottom_control))\n    glyph.addRefLine(refline(end_turn_2_top, end_turn_2_top_control_1))\n    glyph.addRefLine(refline(end_turn_2_bottom, end_turn_2_bottom_control_1))\n    // glyph.addRefLine(refline(end_top, end_top_bend))\n    // glyph.addRefLine(refline(end_bottom, end_bottom_control_left_1))\n    // glyph.addRefLine(refline(end_turn_1, end_bottom_control_left_2))\n    // glyph.addRefLine(refline(end_turn_2, end_bottom_control_right))\n\n    glyph.addRefLine(refline(start_turn_2_top, start_turn_2_bottom))\n    glyph.addRefLine(refline(start_turn_3_top, start_turn_3_bottom))\n    glyph.addRefLine(refline(end_top, end_bottom))\n}","objData":{"_joints":[{"_x":250,"_y":502.38177581274255,"uuid":"GFn_ZBbyBCKEpvKUg-uGb","name":"start_turn_1"},{"_x":280.1900205667578,"_y":501.58730158730157,"uuid":"n7q2MdYgxI2aplteweP8S","name":"start_turn_2"},{"_x":750,"_y":500,"uuid":"3N3sMxhKpHJXF3eS3gJrx","name":"end_turn_1"},{"_x":714.1361157850952,"_y":500,"uuid":"YkyM7z9i6YUULPwUppeaM","name":"end_turn_2"},{"_x":714.1361157850952,"_y":480,"uuid":"F2PVeF_25XUZUiRq7Wi4e","name":"end_turn_2_top"},{"_x":714.1361157850952,"_y":520,"uuid":"F3qzj78J7uU6ppdYPyNAi","name":"end_turn_2_bottom"},{"_x":340.5074808842181,"_y":500,"uuid":"tQo7b5HIpSvdYl7Z7B_v2","name":"start_turn_3"},{"_x":279.6060122243991,"_y":479.39498457766837,"uuid":"r5kdqSzsG1A_8_gwNQSvt","name":"start_turn_2_top"},{"_x":280.77402890911657,"_y":523.7796185969348,"uuid":"oJkS3IC9esPCe46BRxbaZ","name":"start_turn_2_bottom"},{"_x":340.5074808842181,"_y":500,"uuid":"QI2dXe6jMqLBJDQFaEZac","name":"start"},{"_x":513.3217983346567,"_y":500,"uuid":"gIoNRPMTy5entSBTv2auy","name":"middle"},{"_x":686.1361157850952,"_y":500,"uuid":"xOp2r1dNA8zqAnlt0O1K2","name":"end"},{"_x":685.4448585152934,"_y":480,"uuid":"vBPB5AeXTokvACzZzAWhS","name":"end_top"},{"_x":685.4448585152934,"_y":520,"uuid":"4G5btGQa5BYRw11q4VmvG","name":"end_bottom"},{"_x":455.7170258511772,"_y":500,"uuid":"cQw8nZYLxpvJ-LJ4Akj04","name":"bend_left"},{"_x":570.9265708181363,"_y":500,"uuid":"m08d1o-P5LEQrQxH0eJOV","name":"bend_right"},{"_x":340.5074808842181,"_y":480,"uuid":"JYD9KVETWkkXIE1roFzE6","name":"start_turn_3_top"},{"_x":340.5074808842181,"_y":520,"uuid":"TiGKEhWa0a5g_-hiRzrzH","name":"start_turn_3_bottom"},{"_x":714.1361157850952,"_y":500,"uuid":"YkyM7z9i6YUULPwUppeaM","name":"end_turn_2"},{"_x":null,"_y":null,"uuid":"01Ue7HoC8xh4BPML8eK6k","name":"start_turn_3_top_bend"},{"_x":null,"_y":null,"uuid":"_3hbxdGwbRtuGZmQfd0I3","name":"start_turn_3_bottom_bend"},{"_x":750,"_y":500,"uuid":"3N3sMxhKpHJXF3eS3gJrx","name":"end_turn_1"},{"_x":302.44271671776175,"_y":479.7573806669234,"uuid":"XsgSNUDoKMNX5k00AgbzR","name":"start_turn_2_top_control_1"},{"_x":317.66717622770966,"_y":479.99999999999625,"uuid":"gTOS8SIv57SSl4g1SjJK4","name":"start_turn_2_top_control_2"},{"_x":303.0701322042492,"_y":520.719565077859,"uuid":"JdXKxg3-3bmNwFbZ-bBvm","name":"start_turn_2_bottom_control_1"},{"_x":318.0177535006411,"_y":520,"uuid":"a_1j2O8NbPRp93n_Qreaq","name":"start_turn_2_bottom_control_2"},{"_x":254.1244922566668,"_y":478.99061786235427,"uuid":"5PonNFeGiUn_1FB_c5jZw","name":"start_turn_1_top_control"},{"_x":245.37020359058522,"_y":528.6386560179881,"uuid":"DaaXeGtYwU10EqjT9zHlu","name":"start_turn_1_bottom_control"},{"_x":703.3768943089195,"_y":480,"uuid":"aeDZAHEMr_c-6zMVv3Lzg","name":"end_turn_2_top_control_1"},{"_x":696.204079991469,"_y":480,"uuid":"ZCO__g4g_-REZorqUeBBu","name":"end_turn_2_top_control_2"},{"_x":703.3768943089195,"_y":520,"uuid":"RQmEMUjBZmRPu-hL7x05V","name":"end_turn_2_bottom_control_1"},{"_x":696.204079991469,"_y":520,"uuid":"_1WOglE79CLYoXSc4i9xc","name":"end_turn_2_bottom_control_2"},{"_x":750,"_y":480,"uuid":"TXd0LByH7EOpcRMK8UD6W","name":"end_turn_1_top_control"},{"_x":750,"_y":520,"uuid":"4eXVFPuTASqypzFU4tTNZ","name":"end_turn_1_bottom_control"}],"_reflines":[{"name":"start_turn_1-start_turn_1_top_control","start":"start_turn_1","end":"start_turn_1_top_control"},{"name":"start_turn_1-start_turn_1_bottom_control","start":"start_turn_1","end":"start_turn_1_bottom_control"},{"name":"start_turn_2_top-start_turn_1_top_control","start":"start_turn_2_top","end":"start_turn_1_top_control"},{"name":"start_turn_2_bottom-start_turn_1_bottom_control","start":"start_turn_2_bottom","end":"start_turn_1_bottom_control"},{"name":"start_turn_2_top-start_turn_2_top_control_1","start":"start_turn_2_top","end":"start_turn_2_top_control_1"},{"name":"start_turn_2_bottom-start_turn_2_bottom_control_1","start":"start_turn_2_bottom","end":"start_turn_2_bottom_control_1"},{"name":"start_turn_3_top-start_turn_2_top_control_2","start":"start_turn_3_top","end":"start_turn_2_top_control_2"},{"name":"start_turn_3_bottom-start_turn_2_bottom_control_2","start":"start_turn_3_bottom","end":"start_turn_2_bottom_control_2"},{"name":"end_turn_1-end_turn_1_top_control","start":"end_turn_1","end":"end_turn_1_top_control"},{"name":"end_turn_1-end_turn_1_bottom_control","start":"end_turn_1","end":"end_turn_1_bottom_control"},{"name":"end_turn_2_top-end_turn_1_top_control","start":"end_turn_2_top","end":"end_turn_1_top_control"},{"name":"end_turn_2_bottom-end_turn_1_bottom_control","start":"end_turn_2_bottom","end":"end_turn_1_bottom_control"},{"name":"end_turn_2_top-end_turn_2_top_control_1","start":"end_turn_2_top","end":"end_turn_2_top_control_1"},{"name":"end_turn_2_bottom-end_turn_2_bottom_control_1","start":"end_turn_2_bottom","end":"end_turn_2_bottom_control_1"},{"name":"start_turn_2_top-start_turn_2_bottom","start":"start_turn_2_top","end":"start_turn_2_bottom"},{"name":"start_turn_3_top-start_turn_3_bottom","start":"start_turn_3_top","end":"start_turn_3_bottom"},{"name":"end_top-end_bottom","start":"end_top","end":"end_bottom"}],"_components":[{"points":[{"uuid":"AN3hUkiUXOvYlIvKpvJWM","type":"anchor","x":250,"y":502.38177581274255,"origin":null},{"uuid":"i04DtBQuPzH_kWZENaPEa","type":"control","x":252.74966150444453,"y":486.7876705124837,"origin":"AN3hUkiUXOvYlIvKpvJWM"},{"uuid":"7qQWdpVcYhJytOQRF_9W9","type":"control","x":262.6183322459109,"y":479.12540676745897,"origin":"py-Y5pqX7IrWHYA81VqSP"},{"uuid":"py-Y5pqX7IrWHYA81VqSP","type":"anchor","x":279.6060122243991,"y":479.39498457766837,"origin":null},{"uuid":"XzwBpqbUTW9_qiayEjGVr","type":"control","x":302.44271671776175,"y":479.7573806669234,"origin":"py-Y5pqX7IrWHYA81VqSP"},{"uuid":"4YDzyEc9j7yzlweDqbBIW","type":"control","x":317.66717622770966,"y":479.99999999999625,"origin":"wzUpKm0dy1f8ew_PnmlEE"},{"uuid":"wzUpKm0dy1f8ew_PnmlEE","type":"anchor","x":340.5074808842181,"y":480,"origin":null},{"uuid":"qn8orkPdvBBSJruKsIDZi","type":"control","x":455.486606761243,"y":480.00000000001893,"origin":"wzUpKm0dy1f8ew_PnmlEE"},{"uuid":"wgsveE4nQkkT8TscGA5Nr","type":"control","x":570.4657326382685,"y":480,"origin":"z34TAqqXrqYnpUyYqzm_r"},{"uuid":"z34TAqqXrqYnpUyYqzm_r","type":"anchor","x":685.4448585152934,"y":480,"origin":null},{"uuid":"auCHaA8YvcylGBL-PR69Z","type":"control","x":703.3768943089195,"y":480,"origin":"z34TAqqXrqYnpUyYqzm_r"},{"uuid":"Ndx2BdHEy8OQFMqcESTkR","type":"control","x":696.204079991469,"y":480,"origin":"j0_Ir90_0OfeiLmadBj2r"},{"uuid":"j0_Ir90_0OfeiLmadBj2r","type":"anchor","x":714.1361157850952,"y":480,"origin":null},{"uuid":"82rk8kH1ENsW2Y7c_5SBV","type":"control","x":738.0453719283651,"y":480,"origin":"j0_Ir90_0OfeiLmadBj2r"},{"uuid":"tz7USQGwo1EZZdqhnQa59","type":"control","x":750,"y":486.6666666666667,"origin":"ysGF_sCyfRw5hQrmpx6gM"},{"uuid":"ysGF_sCyfRw5hQrmpx6gM","type":"anchor","x":750,"y":500,"origin":null},{"uuid":"V37zyg9w2nEqJUJ7gVjWz","type":"control","x":750,"y":513.3333333333334,"origin":"ysGF_sCyfRw5hQrmpx6gM"},{"uuid":"eDavVMlPxZUpxmR62-YRW","type":"control","x":738.0453719283651,"y":520,"origin":"ec3fuykIFRcii_gVsLE7a"},{"uuid":"ec3fuykIFRcii_gVsLE7a","type":"anchor","x":714.1361157850952,"y":520,"origin":null},{"uuid":"acsmBooOZffWaBZ57yqmu","type":"control","x":703.3768943089195,"y":520,"origin":"ec3fuykIFRcii_gVsLE7a"},{"uuid":"eTjyGGVhB3NjspGbYjzdR","type":"control","x":696.204079991469,"y":520,"origin":"QO5HM2T5vJsFgXdhFmUKg"},{"uuid":"QO5HM2T5vJsFgXdhFmUKg","type":"anchor","x":685.4448585152934,"y":520,"origin":null},{"uuid":"OSmxBXkkX-sKinkaDUUev","type":"control","x":570.4657326382685,"y":520,"origin":"QO5HM2T5vJsFgXdhFmUKg"},{"uuid":"Mu994iP8Y01UsB5NervkC","type":"control","x":455.486606761243,"y":520,"origin":"2VT_ZOjhjw_fIvi9TtMFI"},{"uuid":"2VT_ZOjhjw_fIvi9TtMFI","type":"anchor","x":340.5074808842181,"y":520,"origin":null},{"uuid":"39B35lr3dUIYq4koItF6g","type":"control","x":318.0177535006411,"y":520,"origin":"2VT_ZOjhjw_fIvi9TtMFI"},{"uuid":"25F-FBIfmMOCASJgZgaPV","type":"control","x":303.0701322042492,"y":520.719565077859,"origin":"HKrSWUGi58f314ajhoe35"},{"uuid":"HKrSWUGi58f314ajhoe35","type":"anchor","x":280.77402890911657,"y":523.7796185969348,"origin":null},{"uuid":"MNRoPkXJHnYkWC5_48Hhj","type":"control","x":257.17147869676234,"y":527.018976877637,"origin":"HKrSWUGi58f314ajhoe35"},{"uuid":"aPgcFKwHz9wO_oXonG3FG","type":"control","x":246.91346906039016,"y":519.8863626162396,"origin":"7X1Ezfi7k3LaxQ0csCKMm"},{"uuid":"7X1Ezfi7k3LaxQ0csCKMm","type":"anchor","x":250,"y":502.38177581274255,"origin":null}],"type":"glyph-pen","hasPathBegan":false,"usedInCharacter":true,"contour":[{"type":2,"start":{"x":250,"y":297.6182241872575},"end":{"x":279.6060122243991,"y":320.6050154223317},"control1":{"x":252.74966150444453,"y":313.2123294875163},"control2":{"x":262.6183322459109,"y":320.874593232541},"fill":false},{"type":2,"start":{"x":279.6060122243991,"y":320.6050154223317},"end":{"x":340.5074808842181,"y":320},"control1":{"x":302.44271671776175,"y":320.2426193330766},"control2":{"x":317.66717622770966,"y":320.00000000000375},"fill":false},{"type":2,"start":{"x":340.5074808842181,"y":320},"end":{"x":685.4448585152934,"y":320},"control1":{"x":455.486606761243,"y":319.9999999999811},"control2":{"x":570.4657326382685,"y":320},"fill":false},{"type":2,"start":{"x":685.4448585152934,"y":320},"end":{"x":714.1361157850952,"y":320},"control1":{"x":703.3768943089195,"y":320},"control2":{"x":696.204079991469,"y":320},"fill":false},{"type":2,"start":{"x":714.1361157850952,"y":320},"end":{"x":750,"y":300},"control1":{"x":738.0453719283651,"y":320},"control2":{"x":750,"y":313.33333333333326},"fill":false},{"type":2,"start":{"x":750,"y":300},"end":{"x":714.1361157850952,"y":280},"control1":{"x":750,"y":286.66666666666663},"control2":{"x":738.0453719283651,"y":280},"fill":false},{"type":2,"start":{"x":714.1361157850952,"y":280},"end":{"x":685.4448585152934,"y":280},"control1":{"x":703.3768943089195,"y":280},"control2":{"x":696.204079991469,"y":280},"fill":false},{"type":2,"start":{"x":685.4448585152934,"y":280},"end":{"x":340.5074808842181,"y":280},"control1":{"x":570.4657326382685,"y":280},"control2":{"x":455.486606761243,"y":280},"fill":false},{"type":2,"start":{"x":340.5074808842181,"y":280},"end":{"x":280.77402890911657,"y":276.2203814030652},"control1":{"x":318.0177535006411,"y":280},"control2":{"x":303.0701322042492,"y":279.280434922141},"fill":false},{"type":2,"start":{"x":280.77402890911657,"y":276.2203814030652},"end":{"x":250,"y":297.6182241872575},"control1":{"x":257.17147869676234,"y":272.981023122363},"control2":{"x":246.91346906039016,"y":280.1136373837604},"fill":false}],"preview":[{"type":2,"start":{"x":25,"y":50.23817758127426},"end":{"x":27.96060122243991,"y":47.93949845776684},"control1":{"x":25.274966150444456,"y":48.67876705124837},"control2":{"x":26.26183322459109,"y":47.9125406767459},"fill":false},{"type":2,"start":{"x":27.96060122243991,"y":47.93949845776684},"end":{"x":34.05074808842181,"y":48},"control1":{"x":30.244271671776175,"y":47.975738066692344},"control2":{"x":31.76671762277097,"y":47.99999999999963},"fill":false},{"type":2,"start":{"x":34.05074808842181,"y":48},"end":{"x":68.54448585152934,"y":48},"control1":{"x":45.54866067612431,"y":48.0000000000019},"control2":{"x":57.04657326382685,"y":48},"fill":false},{"type":2,"start":{"x":68.54448585152934,"y":48},"end":{"x":71.41361157850952,"y":48},"control1":{"x":70.33768943089196,"y":48},"control2":{"x":69.6204079991469,"y":48},"fill":false},{"type":2,"start":{"x":71.41361157850952,"y":48},"end":{"x":75,"y":50},"control1":{"x":73.8045371928365,"y":48},"control2":{"x":75,"y":48.66666666666667},"fill":false},{"type":2,"start":{"x":75,"y":50},"end":{"x":71.41361157850952,"y":52},"control1":{"x":75,"y":51.33333333333334},"control2":{"x":73.8045371928365,"y":52},"fill":false},{"type":2,"start":{"x":71.41361157850952,"y":52},"end":{"x":68.54448585152934,"y":52},"control1":{"x":70.33768943089196,"y":52},"control2":{"x":69.6204079991469,"y":52},"fill":false},{"type":2,"start":{"x":68.54448585152934,"y":52},"end":{"x":34.05074808842181,"y":52},"control1":{"x":57.04657326382685,"y":52},"control2":{"x":45.54866067612431,"y":52},"fill":false},{"type":2,"start":{"x":34.05074808842181,"y":52},"end":{"x":28.077402890911657,"y":52.377961859693485},"control1":{"x":31.801775350064112,"y":52},"control2":{"x":30.30701322042492,"y":52.0719565077859},"fill":false},{"type":2,"start":{"x":28.077402890911657,"y":52.377961859693485},"end":{"x":25,"y":50.23817758127426},"control1":{"x":25.717147869676236,"y":52.701897687763704},"control2":{"x":24.691346906039016,"y":51.98863626162396},"fill":false}]}]}},{"uuid":"zDXsTOfs5cTM80eF8EP1G","type":"system","name":"竖","components":[],"groups":[],"orderedList":[],"selectedComponentsUUIDs":[],"view":{"zoom":100,"translateX":0,"translateY":0},"parameters":[{"uuid":"qBvt2tFkFWjrYgy5Z-enu","name":"length","type":0,"value":500,"min":100,"max":1000},{"uuid":"e8-vnHV7CC7InvD8cQh6n","name":"weight","type":0,"value":40,"min":20,"max":100},{"uuid":"MSZoRqfQG88zlyR8g8x4h","name":"weightVariation","type":0,"value":1,"min":0,"max":1},{"uuid":"QtoWfNR1Hz1J2IpvJ1avj","name":"起笔端点","type":2,"value":{"radius":{"name":"端点长度","min":0,"max":50,"value":18},"degree":{"name":"角度","min":-30,"max":30,"value":0},"params":[{"name":"上切角","min":-30,"max":30,"value":0},{"name":"左切角","min":-30,"max":30,"value":-10},{"name":"右切角","min":-30,"max":30,"value":10}]},"min":0,"max":1000},{"uuid":"jKV_MUJSnz1py5x9zoONR","name":"起笔顿笔","type":2,"value":{"radius":{"name":"长度","min":0,"max":100,"value":46.14108524999566},"degree":{"name":"角度","min":-30,"max":30,"value":0},"params":[{"name":"粗细","min":0.5,"max":2,"value":1}]},"min":0,"max":1000},{"uuid":"-Etd1aRhuUwSWnb9tLbDz","name":"收笔顿笔","type":2,"value":{"radius":{"name":"长度","min":0,"max":100,"value":31.746031746031743},"degree":{"name":"角度","min":-30,"max":30,"value":0},"params":[{"name":"粗细","min":0.5,"max":2,"value":1.06}]},"min":0,"max":1000},{"uuid":"MvHHMiG9oVsX3-CQ3HDbk","name":"收笔端点","type":2,"value":{"radius":{"name":"端点长度","min":0,"max":50,"value":30},"degree":{"name":"角度","min":-30,"max":30,"value":0},"params":[{"name":"下切角","min":-30,"max":30,"value":0},{"name":"左切角","min":-30,"max":30,"value":0},{"name":"右切角","min":-30,"max":30,"value":0}]},"min":0,"max":1000}],"joints":[],"reflines":[],"script":"function script_zDXsTOfs5cTM80eF8EP1G (glyph, constants, FP) {\n  //Todo something\n  const length = glyph.getParam('length')\n  const weightVariation = glyph.getParam('weightVariation') || 0.7\n  const weight = glyph.getParam('weight') || 40\n  // const weight = constants.get('weight')\n  const ox = 500\n  const oy = 500\n\n  const starter = glyph.getParam('起笔端点')\n  const starter_1 = glyph.getParam('起笔顿笔')\n  //const starter_2 = glyph.getParam('起笔提笔')\n  const ending_1 = glyph.getParam('收笔顿笔')\n  const ending = glyph.getParam('收笔端点')\n\n  const getCoordY = (canvasY) => {\n    return -(canvasY - 500)\n  }\n\n  const getCanvasY = (coordY) => {\n    return -coordY + 500\n  }\n\n  const toDegree = (radian) => radian / Math.PI * 180\n  const toRadian = (degree) => Math.PI / 180 * degree\n\n  const getK = (p1, p2) => {\n    return -(p2.y - p1.y) / (p2.x - p1.x)\n  }\n\n  const getK2 = (p1, p2) => {\n    return -(p2.x - p1.x) / (p2.y - p1.y)\n  }\n\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  const intersection = (k1, x1, y1, k2, x2, y2) => {\n    if (k1 === Infinity || k1 === -Infinity) {\n      const x = x1\n      const y = k2 * (x - x2) + y2\n      return {\n        x, y,\n      }\n    } else if (k2 === Infinity || k2 === -Infinity) {\n      const x = x2\n      const y = k1 * (x - x1) + y1\n      return {\n        x, y,\n      }\n    }\n    const x = ((y2 - y1) + (k1 * x1 - k2 * x2)) / (k1 - k2)\n    const y = (-k1 * y2 + k2 * y1 + (x2 - x1) * k1 * k2) / (k2 - k1)\n    return {\n      x, y,\n    }\n  }\n\n  const start_turns = [\n    {\n      angle: starter.degree.value,\n      step_top: starter.params[0].value,\n      step_left: starter.params[1].value,\n      step_right: starter.params[2].value,\n      length: starter.radius.value,\n    },\n    {\n      angle: starter_1.degree.value,\n      weight: starter_1.params[0].value * weight,\n      length: starter_1.radius.value,\n    },\n    // {\n    //   angle: starter_2.degree.value,\n    //   weight: starter_2.params[0].value,\n    //   length: starter_2.radius.value,\n    // },\n    // {\n    //   angle: 0,\n    //   step_left: -10,\n    //   step_top: 10,\n    //   step_bottom: -10,\n    //   length: length * 0.05,\n    // },\n    // {\n    //   angle: -18,\n    //   weight: weight * 1.5,\n    //   length: length * 0.1,\n    // },\n    {\n      angle: 0,\n      weight: weight,\n      length: length * 0,\n    },\n  ]\n\n  const end_turns = [\n    {\n      angle: ending.degree.value,\n      step_bottom: ending.params[0].value,\n      step_left: ending.params[1].value,\n      step_right: ending.params[2].value,\n      length: ending.radius.value,\n    },\n    {\n      angle: ending_1.degree.value,\n      weight: ending_1.params[0].value * weight,\n      length: ending_1.radius.value,\n    },\n  ]\n\n  const start_turn_1_y = oy - length / 2\n  const start_turn_1_a = -toRadian(start_turns[2].angle + start_turns[1].angle + start_turns[0].angle)\n  const start_turn_2_y = start_turn_1_y + start_turns[0].length * Math.cos(start_turn_1_a)\n  const start_turn_2_a = -toRadian(start_turns[2].angle + start_turns[1].angle)\n  const start_turn_3_y = start_turn_2_y + start_turns[1].length * Math.cos(start_turn_2_a)\n  const start_turn_3_a = -toRadian(start_turns[2].angle)\n  const start_y = start_turn_3_y + start_turns[2].length * Math.cos(start_turn_3_a)\n  const end_y = start_y + (length - (start_y - start_turn_1_y) - (end_turns[0].length + end_turns[1].length))\n  const end_turn_1_y = oy + length / 2\n  const end_turn_1_a = -toRadian(end_turns[1].angle + end_turns[0].angle)\n  const end_turn_2_y = end_turn_1_y - end_turns[0].length * Math.cos(end_turn_1_a)\n  const end_turn_2_a = -toRadian(end_turns[1].angle)\n\n  const start_x = ox\n  const start_turn_3_x = start_x + start_turns[2].length * Math.sin(start_turn_3_a)\n  const start_turn_2_x = start_turn_3_x + start_turns[1].length * Math.sin(start_turn_2_a)\n  const start_turn_1_x = start_turn_2_x + start_turns[0].length * Math.sin(start_turn_1_a)\n  const end_x = ox\n  const end_turn_2_x = end_x + end_turns[1].length * Math.sin(end_turn_2_a)\n  const end_turn_1_x = end_turn_2_x + end_turns[0].length * Math.sin(end_turn_1_a)\n\n  const start_turn_1 = new FP.Joint(\n    'start_turn_1',\n    {\n      x: start_turn_1_x,\n      y: start_turn_1_y,\n    },\n  )\n  const start_turn_2 = new FP.Joint(\n    'start_turn_2',\n    {\n      x: start_turn_2_x,\n      y: start_turn_2_y,\n    },\n  )\n  const start_turn_3 = new FP.Joint(\n    'start_turn_3',\n    {\n      x: start_turn_3_x,\n      y: start_turn_3_y,\n    },\n  )\n  const start_turn_2_left = new FP.Joint(\n    'start_turn_2_left',\n    {\n      x: start_turn_2_x - start_turns[1].weight / 2 * Math.cos(start_turn_2_a),\n      y: start_turn_2_y - start_turns[1].weight / 2 * Math.sin(start_turn_2_a),\n    },\n  )\n  const start_turn_2_right = new FP.Joint(\n    'start_turn_2_right',\n    {\n      x: start_turn_2_x + start_turns[1].weight / 2 * Math.cos(start_turn_2_a),\n      y: start_turn_2_y + start_turns[1].weight / 2 * Math.sin(start_turn_2_a),\n    },\n  )\n  const start = new FP.Joint(\n    'start',\n    {\n      x: start_x,\n      y: start_y,\n    },\n  )\n  const end = new FP.Joint(\n    'end',\n    {\n      x: end_x,\n      y: end_y,\n    },\n  )\n  const end_turn_1 = new FP.Joint(\n    'end_turn_1',\n    {\n      x: end_turn_1_x,\n      y: end_turn_1_y,\n    },\n  )\n  const end_turn_2 = new FP.Joint(\n    'end_turn_2',\n    {\n      x: end_turn_2_x,\n      y: end_turn_2_y,\n    },\n  )\n  const end_turn_2_left = new FP.Joint(\n    'end_turn_2_left',\n    {\n      y: end_turn_2_y + end_turns[1].weight / 2 * Math.sin(end_turn_2_a),\n      x: end_turn_2_x - end_turns[1].weight / 2 * Math.cos(end_turn_2_a),\n    },\n  )\n  const end_turn_2_right = new FP.Joint(\n    'end_turn_2_bottom',\n    {\n      y: end_turn_2_y - end_turns[1].weight / 2 * Math.sin(end_turn_2_a),\n      x: end_turn_2_x + end_turns[1].weight / 2 * Math.cos(end_turn_2_a),\n    },\n  )\n\n  // glyph.addJoint(start_turn_1)\n  // glyph.addJoint(start_turn_2)\n  // glyph.addJoint(start_turn_3)\n  // glyph.addJoint(start_turn_2_top)\n  // glyph.addJoint(start_turn_2_bottom)\n  // glyph.addJoint(start)\n  // glyph.addJoint(middle)\n  // glyph.addJoint(end)\n  // glyph.addJoint(bend_left)\n  // glyph.addJoint(bend_right)\n\n  // const start_turn_3_top = new FP.Joint(\n  //   'start_turn_3_top',\n  //   {\n  //     x: start.x,\n  //     y: start.y,\n  //   },\n  // )\n  // const start_turn_3_bottom = new FP.Joint(\n  //   'start_turn_3_bottom',\n  //   {\n  //     x: contour2[0].start.x,\n  //     y: contour2[0].start.y,\n  //   },\n  // )\n  // glyph.addJoint(start_turn_3_top)\n  // glyph.addJoint(start_turn_3_bottom)\n  // const end_turn_2 = new FP.Joint(\n  //   'end_turn_2',\n  //   {\n  //     x: end_turn_2_x,\n  //     y: contour1[contour1.length - 1].end.y,\n  //   },\n  // )\n  //glyph.addJoint(end_turn_2)\n  const start_left = new FP.Joint(\n    'start_left',\n    {\n      x: start.x - weight / 2,\n      y: start.y,\n    },\n  )\n  const start_right = new FP.Joint(\n    'start_right',\n    {\n      x: start.x + weight / 2,\n      y: start.y,\n    },\n  )\n  const end_left = new FP.Joint(\n    'end_left',\n    {\n      x: end.x - weight * weightVariation / 2,\n      y: end.y,\n    },\n  )\n  const end_right= new FP.Joint(\n    'end_right',\n     {\n      x: end.x + weight * weightVariation / 2,\n      y: end.y,\n    },\n  )\n\n  // const start_turn_3_left_a = Math.atan(getK(start_left, start_turn_3_top))\n  // const start_turn_3_bottom_a = Math.atan(getK(contour2[0].start, start_turn_3_bottom))\n\n  const start_turn_2_left_a = Math.atan(getK(start_left, start_turn_2_left))\n  const start_turn_2_right_a = Math.atan(getK(start_right, start_turn_2_right))\n\n  const end_turn_2_left_a = Math.atan(getK(end_left, end_turn_2_left))\n  const end_turn_2_right_a = Math.atan(getK(end_right, end_turn_2_right))\n\n  // glyph.addJoint(start_turn_3_top_bend)\n  // glyph.addJoint(start_turn_3_bottom_bend)\n\n  // const start_turn_3_top_control = {\n  //   x: start_turn_3_top.x + (2 / 3) * (start_turn_3_top_bend.x - start_turn_3_top.x),\n  //   y: start_turn_3_top.y + (2 / 3) * (start_turn_3_top_bend.y - start_turn_3_top.y),\n  // }\n\n  // const start_turn_3_bottom_control = {\n  //   x: start_turn_3_bottom.x + (2 / 3) * (start_turn_3_bottom_bend.x - start_turn_3_bottom.x),\n  //   y: start_turn_3_bottom.y + (2 / 3) * (start_turn_3_bottom_bend.y - start_turn_3_bottom.y),\n  // }\n\n  // const start_turn_3_top_control_a = Math.atan(getK(start_turn_3_top, start_turn_3_top_control))\n  // const start_turn_3_bottom_control_a = Math.atan(getK(start_turn_3_bottom, start_turn_3_bottom_control))\n\n  const getPointAtPercentage = (start, end, percentage) => {\n    var x = start.x + (end.x - start.x) * percentage;\n    var y = start.y + (end.y - start.y) * percentage;\n    return { x: x, y: y };\n  }\n  let _start_turn_2_left_control_1 = intersection(\n    Math.tan(start_turn_2_left_a + Math.PI / 2), (start_turn_2_left.x + start_left.x) * 0.5, getCoordY((start_turn_2_left.y + start_left.y) * 0.5),\n    Math.tan(toRadian(start_turns[0].step_left) + Math.PI / 2), start_turn_2_left.x, getCoordY(start_turn_2_left.y),\n  )\n  _start_turn_2_left_control_1 = getPointAtPercentage(start_turn_2_left, {\n    x: _start_turn_2_left_control_1.x,\n    y: getCanvasY(_start_turn_2_left_control_1.y)\n  }, 0.75)\n  let _start_turn_2_left_control_2 = intersection(\n    Math.tan(start_turn_2_left_a + Math.PI / 2), (start_turn_2_left.x + start_left.x) * 0.5, getCoordY((start_turn_2_left.y + start_left.y) * 0.5),\n    getK(start_left, end_left), start_left.x, getCoordY(start_left.y)\n  )\n  _start_turn_2_left_control_2 = getPointAtPercentage(start_left, {\n    x: _start_turn_2_left_control_2.x,\n    y: getCanvasY(_start_turn_2_left_control_2.y)\n  }, 0.75)\n  let _start_turn_2_right_control_1 = intersection(\n    Math.tan(start_turn_2_right_a + Math.PI / 2), (start_turn_2_right.x + start_right.x) / 2, getCoordY((start_turn_2_right.y + start_right.y) / 2),\n    Math.tan(toRadian(start_turns[0].step_right) + Math.PI / 2), start_turn_2_right.x, getCoordY(start_turn_2_right.y),\n  )\n\n  _start_turn_2_right_control_1 = getPointAtPercentage(start_turn_2_right, {\n    x: _start_turn_2_right_control_1.x,\n    y: getCanvasY(_start_turn_2_right_control_1.y)\n  }, 0.75)\n  let _start_turn_2_right_control_2 = intersection(\n    Math.tan(start_turn_2_right_a + Math.PI / 2), (start_turn_2_right.x + start_right.x) / 2, getCoordY((start_turn_2_right.y + start_right.y) / 2),\n    getK(start_right, end_right), start_right.x, getCoordY(start_right.y)\n  )\n  _start_turn_2_right_control_2 = getPointAtPercentage(start_right, {\n    x: _start_turn_2_right_control_2.x,\n    y: getCanvasY(_start_turn_2_right_control_2.y)\n  }, 0.75)\n\n  const _start_turn_1_left_control = intersection(\n    Math.tan(-toRadian(start_turns[0].step_top)), start_turn_1.x, getCoordY(start_turn_1.y),\n    Math.tan(toRadian(start_turns[0].step_left) + Math.PI / 2), start_turn_2_left.x, getCoordY(start_turn_2_left.y),\n  )\n  const _start_turn_1_right_control = intersection(\n    Math.tan(-toRadian(start_turns[0].step_top)), start_turn_1.x, getCoordY(start_turn_1.y),\n    Math.tan(toRadian(start_turns[0].step_right) + Math.PI / 2), start_turn_2_right.x, getCoordY(start_turn_2_right.y),\n  )\n\n  \n  let _end_turn_2_left_control_1 = intersection(\n    Math.tan(end_turn_2_left_a + Math.PI / 2), (end_turn_2_left.x + end_left.x) * 0.5, getCoordY((end_turn_2_left.y + end_left.y) * 0.5),\n    Math.tan(toRadian(end_turns[0].step_left) + Math.PI / 2), end_turn_2_left.x, getCoordY(end_turn_2_left.y),\n  )\n  _end_turn_2_left_control_1 = getPointAtPercentage(end_turn_2_left, {\n    x: _end_turn_2_left_control_1.x,\n    y: getCanvasY(_end_turn_2_left_control_1.y)\n  }, 0.75)\n  let _end_turn_2_left_control_2 = intersection(\n    Math.tan(end_turn_2_left_a + Math.PI / 2), (end_turn_2_left.x + end_left.x) * 0.5, getCoordY((end_turn_2_left.y + end_left.y) * 0.5),\n    getK(start_left, end_left), end_left.x, getCoordY(end_left.y)\n  )\n  _end_turn_2_left_control_2 = getPointAtPercentage(end_left, {\n    x: _end_turn_2_left_control_2.x,\n    y: getCanvasY(_end_turn_2_left_control_2.y)\n  }, 0.75)\n  let _end_turn_2_right_control_1 = intersection(\n    Math.tan(end_turn_2_right_a + Math.PI / 2), (end_turn_2_right.x + end_right.x) / 2, getCoordY((end_turn_2_right.y + end_right.y) / 2),\n    Math.tan(toRadian(end_turns[0].step_right) + Math.PI / 2), end_turn_2_right.x, getCoordY(end_turn_2_right.y),\n  )\n  _end_turn_2_right_control_1 = getPointAtPercentage(end_turn_2_right, {\n    x: _end_turn_2_right_control_1.x,\n    y: getCanvasY(_end_turn_2_right_control_1.y)\n  }, 0.75)\n  let _end_turn_2_right_control_2 = intersection(\n    Math.tan(end_turn_2_right_a + Math.PI / 2), (end_turn_2_right.x + end_right.x) / 2, getCoordY((end_turn_2_right.y + end_right.y) / 2),\n    getK(end_right, start_right), end_right.x, getCoordY(end_right.y)\n  )\n  _end_turn_2_right_control_2 = getPointAtPercentage(end_right, {\n    x: _end_turn_2_right_control_2.x,\n    y: getCanvasY(_end_turn_2_right_control_2.y)\n  }, 0.75)\n\n  const _end_turn_1_left_control = intersection(\n    Math.tan(-(toRadian(end_turns[0].step_bottom))), end_turn_1.x, getCoordY(end_turn_1.y),\n    Math.tan(toRadian(end_turns[0].step_left) + Math.PI / 2), end_turn_2_left.x, getCoordY(end_turn_2_left.y),\n  )\n  const _end_turn_1_right_control = intersection(\n    Math.tan(-toRadian(end_turns[0].step_bottom)), end_turn_1.x, getCoordY(end_turn_1.y),\n    Math.tan(toRadian(end_turns[0].step_right) + Math.PI / 2), end_turn_2_right.x, getCoordY(end_turn_2_right.y),\n  )\n\n  const start_turn_2_left_control_1 = new FP.Joint(\n    'start_turn_2_left_control_1',\n    {\n      x: _start_turn_2_left_control_1.x,\n      y: _start_turn_2_left_control_1.y,\n    },\n  )\n  const start_turn_2_left_control_2 = new FP.Joint(\n    'start_turn_2_left_control_2',\n    {\n      x: _start_turn_2_left_control_2.x,\n      y: _start_turn_2_left_control_2.y,\n    },\n  )\n  const start_turn_2_right_control_1 = new FP.Joint(\n    'start_turn_2_right_control_1',\n    {\n      x: _start_turn_2_right_control_1.x,\n      y: _start_turn_2_right_control_1.y,\n    },\n  )\n  const start_turn_2_right_control_2 = new FP.Joint(\n    'start_turn_2_right_control_2',\n    {\n      x: _start_turn_2_right_control_2.x,\n      y: _start_turn_2_right_control_2.y,\n    },\n  )\n  const start_turn_1_left_control = new FP.Joint(\n    'start_turn_1_left_control',\n    {\n      x: _start_turn_1_left_control.x,\n      y: getCanvasY(_start_turn_1_left_control.y),\n    },\n  )\n  const start_turn_1_right_control = new FP.Joint(\n    'start_turn_1_right_control',\n    {\n      x: _start_turn_1_right_control.x,\n      y: getCanvasY(_start_turn_1_right_control.y),\n    },\n  )\n\n  const end_turn_2_left_control_1 = new FP.Joint(\n    'end_turn_2_left_control_1',\n    {\n      x: _end_turn_2_left_control_1.x,\n      y: _end_turn_2_left_control_1.y,\n    },\n  )\n  const end_turn_2_left_control_2 = new FP.Joint(\n    'end_turn_2_left_control_2',\n    {\n      x: _end_turn_2_left_control_2.x,\n      y: _end_turn_2_left_control_2.y,\n    },\n  )\n  const end_turn_2_right_control_1 = new FP.Joint(\n    'end_turn_2_right_control_1',\n    {\n      x: _end_turn_2_right_control_1.x,\n      y: _end_turn_2_right_control_1.y,\n    },\n  )\n  const end_turn_2_right_control_2 = new FP.Joint(\n    'end_turn_2_right_control_2',\n    {\n      x: _end_turn_2_right_control_2.x,\n      y: _end_turn_2_right_control_2.y,\n    },\n  )\n  const end_turn_1_left_control = new FP.Joint(\n    'end_turn_1_left_control',\n    {\n      x: _end_turn_1_left_control.x,\n      y: getCanvasY(_end_turn_1_left_control.y),\n    },\n  )\n  const end_turn_1_right_control = new FP.Joint(\n    'end_turn_1_right_control',\n    {\n      x: _end_turn_1_right_control.x,\n      y: getCanvasY(_end_turn_1_right_control.y),\n    },\n  )\n\n  // const _end_left_bend = intersection(\n  //   Math.tan(-(contour1[contour1.length - 1].control2.y - contour1[contour1.length - 1].end.y) / (contour1[contour1.length - 1].control2.x - contour1[contour1.length - 1].end.x)),\n  //   contour1[contour1.length - 1].end.x, getCoordY(contour1[contour1.length - 1].end.y),\n  //   Math.tan(toRadian(endOption.step_left)), end_turn_2.x, getCoordY(end_turn_2.y),\n  // )\n\n  // const end_top_bend = new FP.Joint(\n  //   'end_top_bend',\n  //   {\n  //     x: _end_top_bend.x,\n  //     y: getCanvasY(_end_top_bend.y),\n  //   },\n  // )\n\n  // const end_turn_1 = new FP.Joint(\n  //   'end_turn_1',\n  //   {\n  //     x: end_turn_1_x,\n  //     y: end_top_bend.y + endOption.weight,\n  //   },\n  // )\n\n  // const end_bottom_control_left_2 = new FP.Joint(\n  //   'end_bottom_control_left_2',\n  //   {\n  //     x: contour2[contour2.length - 1].end.x + (end_turn_1_x - contour2[contour2.length - 1].end.x) / 2,\n  //     y: end_turn_1.y,\n  //   },\n  // )\n  // const end_bottom_control_right = new FP.Joint(\n  //   'end_bottom_control_right',\n  //   {\n  //     x: end_turn_2.x - (end_turn_1.y - end_turn_2.y) * Math.tan(toRadian(endOption.step_right)),\n  //     y: end_turn_1.y,\n  //   },\n  // )\n  // const end_control_bottom_a = Math.atan(-(contour2[contour2.length - 1].end.y - contour2[contour2.length - 1].control2.y) / (contour2[contour2.length - 1].end.x - contour2[contour2.length - 1].control2.x))\n  // const end_bottom_control_left_1 = new FP.Joint(\n  //   'end_bottom_control_left_1',\n  //   {\n  //     x: contour2[contour2.length - 1].end.x + (end_turn_1_x - contour2[contour2.length - 1].end.x) / 2,\n  //     y: contour2[contour2.length - 1].end.y + (end_turn_1_x - contour2[contour2.length - 1].end.x) / 2 * Math.tan(Math.abs(end_control_bottom_a)),\n  //   },\n  // )\n  //glyph.addJoint(end_turn_1)\n\n\n  // glyph.addJoint(start_turn_2_top_control_1)\n  // glyph.addJoint(start_turn_2_top_control_2)\n  // glyph.addJoint(start_turn_2_bottom_control_1)\n  // glyph.addJoint(start_turn_2_bottom_control_2)\n  // glyph.addJoint(start_turn_1_top_control)\n  // glyph.addJoint(start_turn_1_bottom_control)\n  // glyph.addJoint(end_bottom_control_right)\n  // glyph.addJoint(end_bottom_control_left_1)\n  // glyph.addJoint(end_bottom_control_left_2)\n  // glyph.addJoint(end_top_bend)\n\n  const pen = new FP.PenComponent()\n  pen.beginPath()\n  // pen.moveTo(start_turn_1.x, start_turn_1.y)\n  // pen.quadraticBezierTo(start_turn_1_left_control.x, start_turn_1_left_control.y, start_turn_2_left.x, start_turn_2_left.y)\n  // pen.bezierTo(start_turn_2_left_control_1.x, start_turn_2_left_control_1.y, start_turn_2_left_control_2.x, start_turn_2_left_control_2.y, start_left.x, start_left.y)\n  // pen.lineTo(end_left.x, end_left.y)\n  // pen.bezierTo(end_turn_2_left_control_1.x, end_turn_2_left_control_1.y, end_turn_2_left_control_2.x, end_turn_2_left_control_2.y, end_turn_2_left.x, end_turn_2_left.y)\n  // pen.quadraticBezierTo(end_turn_1_left_control.x, end_turn_1_left_control.y, end_turn_1.x, end_turn_1.y)\n  // pen.quadraticBezierTo(end_turn_1_right_control.x, end_turn_1_right_control.y, end_turn_2_right.x, end_turn_2_right.y)\n  // pen.bezierTo(end_turn_2_right_control_1.x, end_turn_2_right_control_1.y, end_turn_2_right_control_2.x, end_turn_2_right_control_2.y, end_right.x, end_right.y)\n  // pen.lineTo(start_right.x, start_right.y)\n  // pen.bezierTo(start_turn_2_right_control_2.x, start_turn_2_right_control_2.y, start_turn_2_right_control_1.x, start_turn_2_right_control_1.y, start_turn_2_right.x, start_turn_2_right.y)\n  // pen.quadraticBezierTo(start_turn_1_right_control.x, start_turn_1_right_control.y, start_turn_1.x, start_turn_1.y)\n  \n\n  // 顺时针\n  pen.moveTo(start_turn_1.x, start_turn_1.y)\n  pen.quadraticBezierTo(start_turn_1_right_control.x, start_turn_1_right_control.y, start_turn_2_right.x, start_turn_2_right.y)\n  pen.bezierTo(start_turn_2_right_control_1.x, start_turn_2_right_control_1.y, start_turn_2_right_control_2.x, start_turn_2_right_control_2.y, start_right.x, start_right.y)\n  pen.lineTo(end_right.x, end_right.y)\n  pen.bezierTo(end_turn_2_right_control_2.x, end_turn_2_right_control_2.y, end_turn_2_right_control_1.x, end_turn_2_right_control_1.y, end_turn_2_right.x, end_turn_2_right.y)\n  pen.quadraticBezierTo(end_turn_1_right_control.x, end_turn_1_right_control.y, end_turn_1.x, end_turn_1.y)\n  pen.quadraticBezierTo(end_turn_1_left_control.x, end_turn_1_left_control.y, end_turn_2_left.x, end_turn_2_left.y)\n  pen.bezierTo(end_turn_2_left_control_2.x, end_turn_2_left_control_2.y, end_turn_2_left_control_1.x, end_turn_2_left_control_1.y, end_left.x, end_left.y)\n  pen.lineTo(start_left.x, start_left.y)\n  pen.bezierTo(start_turn_2_left_control_2.x, start_turn_2_left_control_2.y, start_turn_2_left_control_1.x, start_turn_2_left_control_1.y, start_turn_2_left.x, start_turn_2_left.y)\n  pen.quadraticBezierTo(start_turn_1_left_control.x, start_turn_1_left_control.y, start_turn_1.x, start_turn_1.y)\n  pen.closePath()\n  glyph.addComponent(pen)\n  // const start = new FP.Joint(\n  //   'start',\n  //   {\n  //     x: ox + length / 2 * Math.cos(angle),\n  //     y: oy - length / 2 * Math.sin(angle),\n  //   },\n  // )\n  // const end = new FP.Joint(\n  //   'end',\n  //   {\n  //     x: ox - length * (0.5 - endOption.ratio) * Math.cos(angle),\n  //     y: oy + length * (0.5 - endOption.ratio) * Math.sin(angle),\n  //   }\n  // )\n  // const bend = new FP.Joint(\n  //   'bend',\n  //   {\n  //     x: (start.x + end.x) / 2 + bending * Math.sin(angle),\n  //     y: (start.y + end.y) / 2 + bending * Math.cos(angle),\n  //   },\n  // )\n  // // const skeleton = new FP.Skeleton(constants.get('weight'))\n  // const { contour1, contour2 } = FP.Skeleton.getContours([start, {\n  //   x: start.x + 2 / 3 * (bend.x - start.x),\n  //   y: start.y + 2 / 3 * (bend.y - start.y),\n  // }, {\n  //   x: end.x + 2 / 3 * (bend.x - end.x),\n  //   y: end.y + 2 / 3 * (bend.y - end.y),\n  // }, end], weight * 2 / 3, weight * endRatio)\n\n  // const start0 = new FP.Joint(\n  //   'start0',\n  //   {\n  //     x: contour1[0].start.x,\n  //     y: contour1[0].start.y,\n  //   },\n  // )\n\n  // const start2 = new FP.Joint(\n  //   'start2',\n  //   {\n  //     x: contour2[0].start.x,\n  //     y: contour2[0].start.y,\n  //   },\n  // )\n\n  // const angle1 = Math.atan((start0.y - start2.y) / (start0.x - start2.x))\n\n  // const start1 = new FP.Joint(\n  //   'start1',\n  //   {\n  //     x: start.x + startD * Math.sin(angle1),\n  //     y: start.y - startD * Math.cos(angle1),\n  //   },\n  // )\n\n  // const end0 = new FP.Joint(\n  //   'end0',\n  //   {\n  //     x: contour1[0].end.x,\n  //     y: contour1[0].end.y,\n  //   },\n  // )\n\n  // const end2 = new FP.Joint(\n  //   'end2',\n  //   {\n  //     x: contour2[0].end.x,\n  //     y: contour2[0].end.y,\n  //   },\n  // )\n\n  // const end1 = new FP.Joint(\n  //   'end1',\n  //   {\n  //     x: ox - length / 2 * Math.cos(angle),\n  //     y: oy + length / 2 * Math.sin(angle),\n  //   },\n  // )\n\n  // const k1 = Math.tan(toRadian(glyph.getParam('angle') - 90))\n  // const k2 = Math.tan(toRadian(toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2))) - endOption.step))\n  // const k3 = getK(contour1[0].end, contour1[0].control2)\n  // const k4 = Math.tan(toRadian(toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2))) - endOption.step - endOption.hook))\n  // const k5 = getK(contour2[0].end, contour2[0].control2)\n  // const p = intersection(k1, end1.x, getCoordY(end1.y), k2, end2.x, getCoordY(end2.y))\n\n\n  // const control = new FP.Joint(\n  //   'control',\n  //   {\n  //     x: contour2[0].control2.x,\n  //     y: contour2[0].control2.y,\n  //   },\n  // )\n  // const control2 = new FP.Joint(\n  //   'control2',\n  //   {\n  //     x: contour1[0].control2.x,\n  //     y: contour1[0].control2.y,\n  //   },\n  // )\n  // const end3 = new FP.Joint(\n  //   'end3',\n  //   {\n  //     x: p.x,\n  //     y: getCanvasY(p.y),\n  //   },\n  // )\n\n  // const radius_p_1 = new FP.Joint(\n  //   'radius_p_1',\n  //   {\n  //     x: end3.x + endOption.radius * Math.cos(Math.atan(k1)),\n  //     y: end3.y - endOption.radius * Math.sin(Math.atan(k1)),\n  //   },\n  // )\n\n  // const radius_p_2 = new FP.Joint(\n  //   'radius_p_2',\n  //   {\n  //     x: end3.x + endOption.radius * Math.cos(Math.atan(k2)),\n  //     y: end3.y - endOption.radius * Math.sin(Math.atan(k2)),\n  //   },\n  // )\n\n  // const end_c1_p = intersection(k1, radius_p_1.x, getCoordY(radius_p_1.y), k3, end0.x, getCoordY(end0.y))\n  // const end_c2_p = intersection(k4, radius_p_2.x, getCoordY(radius_p_2.y), k5, end2.x, getCoordY(end2.y))\n\n  // const end_c1 = new FP.Joint(\n  //   'end_c1',\n  //   {\n  //     x: end_c1_p.x,\n  //     y: getCanvasY(end_c1_p.y),\n  //   },\n  // )\n  // const end_c2 = new FP.Joint(\n  //   'end_c2',\n  //   {\n  //     x: end_c2_p.x,\n  //     y: getCanvasY(end_c2_p.y),\n  //   },\n  // )\n  // const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  // const k = getK(contour1[0].end, contour1[0].control2)\n  // const angle_1 = Math.atan(-getK(end2, end0))\n  // console.log(angle_1)\n  // const angle_2 = toRadian(toDegree(angle_1) + 1)\n\n  // const r = weight * endRatio\n  // const l = (k * (end0.x - end2.x) - (end2.y - end0.y)) / (Math.sin(angle_2) + k * Math.cos(angle_2))\n  // const delta = l - r\n  // console.log(l, r, delta)\n\n  // const _angle_1 = toDegree(angle_1)\n  // const _angle_3 = 200 - toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2)))\n  // console.log('a3',_angle_3)\n\n  // const tan_1 = Math.atan(k)\n  // const tan_3 = toRadian(-70)\n\n  // //const tan_d = (tan_3 - tan_1) / (_angle_3 - _angle_1)\n\n  // const l1 = distance(end2, end0)\n  // const l2 = distance(end2, end1)\n  // const d = 0\n  // let lastX = end0.x\n  // let lastY = end0.y\n  // let lastTan = tan_1\n  // const endPoints = []\n  // let sum = 0\n  // const pow = 0.05\n  // for (let i = 0; i <= _angle_3 - _angle_1; i++) {\n  //   sum += Math.pow(i, pow)\n  // }\n  // const a1 = (tan_3 - tan_1) / sum\n  // const path = new FP.PolygonComponent()\n  // let _l = 0\n  // path.beginPath()\n  // for (let i = _angle_1; i < _angle_3; i++) {\n  //   const tan_d = a1 * Math.pow((i - _angle_1), pow)\n  //   const tan = lastTan + tan_d\n  //   lastTan = tan\n  //   console.log('tan', tan)\n  //   const angle = toRadian(i + 1)\n  //   const _k = Math.tan(tan)\n  //   _l = (_k * (lastX - end2.x) - (end2.y - lastY)) / (Math.sin(angle) + _k * Math.cos(angle))\n  //   console.log('_l', _l)\n  //   const _r = r + d * (-0.5 + Math.random())\n  //   //console.log(r, delta)\n  //   const x = end2.x + _l * Math.cos(angle)\n  //   const y = end2.y + _l * Math.sin(angle)\n  //   if (i === _angle_1) {\n  //     console.log('start', angle, _r, x, y)\n  //     path.moveTo(end0.x, end0.y)\n  //   } else {\n  //     path.lineTo(x, y)\n  //     console.log('a', _l * Math.cos(angle), _l * Math.sin(angle))\n  //   }\n  //   endPoints.push({x, y})\n  //   //console.log('111', i, angle, x, y)\n  //   lastX = x\n  //   lastY = y\n  // }\n\n  // const pen = new FP.PenComponent()\n  // pen.beginPath()\n\n  // // const endCurve = FP.fitCurve(endPoints, 2)\n  // // pen.moveTo(end0.x, end0.y)\n  // // for (let i = 0; i < endCurve.length; i++) {\n  // //   const bezier = endCurve[i]\n  // //   pen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // // }\n\n  // pen.moveTo(end0.x, end0.y)\n  // pen.quadraticBezierTo(end_c1.x, end_c1.y, radius_p_1.x, radius_p_1.y)\n  // pen.quadraticBezierTo(end3.x, end3.y, radius_p_2.x, radius_p_2.y)\n  // pen.quadraticBezierTo(end_c2.x, end_c2.y, end2.x, end2.y)\n\n  // const controlLength = _l * 0.5\n  // //path.closePath()\n  // //glyph.addComponent(path)\n\n  // const c = new FP.Joint(\n  //   'c',\n  //   {\n  //     x: end2.x - controlLength * Math.cos(Math.atan(getK(contour2[0].end, contour2[0].control2))),\n  //     y: end2.y + controlLength * Math.sin(Math.atan(getK(contour2[0].end, contour2[0].control2))),\n  //   },\n  // )\n\n  // //pen.moveTo(lastX, lastY)\n  // //pen.quadraticBezierTo(c.x, c.y, end2.x, end2.y)\n  // pen.bezierTo(contour2[0].control2.x, contour2[0].control2.y, contour2[0].control1.x, contour2[0].control1.y, start2.x, start2.y)\n  \n  \n  // const getAngle = (p1, p2) => {\n  //   if (p2.x === p1.x) return 90\n  //   if (p2.y === p1.y && p2.x > p1.x) return 180\n  //   if (p2.x > p1.x) {\n  //     return 180 - toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n  //   }\n  //   return -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n  // }\n  // const startPoints = []\n  // let startCurve\n  // {\n  //   const path = new FP.PolygonComponent()\n  //   path.beginPath()\n  //   let delta = 1\n  //   const angle1 = Math.round(getAngle(start, start2))\n  //   const angle2 = Math.round(getAngle(start, start1))\n  //   const angle3 = Math.round(getAngle(start, start0))\n  //   const l1 = distance(start, start2)\n  //   const l2 = distance(start, start1)\n  //   const l3 = distance(start, start0)\n  //   const pow = 0.5\n  //   let r = l1\n  //   let sum = 0\n  //   for (let i = 0; i <= angle2 - angle1; i++) {\n  //     sum += Math.pow(i, pow)\n  //   }\n  //   const a1 = (l2 - l1) / sum\n  //   const n1 = angle2 - angle1\n  //   sum = 0\n  //   for (let i = 0; i <= angle3 - angle2; i++) {\n  //     sum += Math.pow(i, pow)\n  //   }\n  //   const a2 = (l3 - l2) / sum\n  //   const n2 = angle3 - angle2\n  //   const d = 0\n  //   for (let i = angle1; i <= angle3; i++) {\n  //     let _i = i\n  //     if (i >= angle1 && i < angle2) {\n  //       _i = i - angle1\n  //       delta = a1 * Math.pow((n1 - _i), pow)\n  //     }\n  //     if (i >= angle2 && i < angle3) {\n  //       _i = i - angle2\n  //       delta = a2 * Math.pow((i - angle2), pow)\n  //     }\n  //     const _r = r + d * (-0.5 + Math.random())\n  //     r += delta\n  //     //console.log(r, delta)\n  //     const angle = Math.PI / 180 * i\n  //     const x = start.x - _r * Math.cos(angle)\n  //     const y = start.y - _r * Math.sin(angle)\n  //     if (i === angle1) {\n  //       console.log('start', angle, _r, x, y)\n  //       path.moveTo(x, y)\n  //     } else {\n  //       path.lineTo(x, y)\n  //     }\n  //     startPoints.push({x, y})\n  //   }\n  //   path.closePath()\n  //   //glyph.addComponent(path)\n  //   //startCurve = FP.fitCurve(startPoints, 2)\n  // }\n  // const curve = FP.fitCurve(startPoints, 2)\n  // for (let i = 0; i < curve.length; i++) {\n  //   const bezier = curve[i]\n  //   pen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // }\n\n  // pen.bezierTo(contour1[0].control1.x, contour1[0].control1.y, contour1[0].control2.x, contour1[0].control2.y, contour1[0].end.x, contour1[0].end.y)\n  // pen.closePath()\n  // glyph.addComponent(pen)\n\n  // // const _x = end.x + l * Math.cos(angle_2)\n  // // const _y = end.y + l * Math.sin(angle_2)\n  // // -(end0.y - _y) / (end0.x - _x) = k\n\n  // // -(end0.y - (end.y + l * Math.sin(angle_2))) / (end0.x - (end.x + l * Math.cos(angle_2))) = k\n\n  // glyph.addJoint(start)\n  // glyph.addJoint(bend)\n  // glyph.addJoint(end)\n  // glyph.addJoint(start0)\n  // glyph.addJoint(start1)\n  // glyph.addJoint(start2)\n  // glyph.addJoint(end0)\n  // glyph.addJoint(end1)\n  // glyph.addJoint(end2)\n  // glyph.addJoint(end3)\n  // glyph.addJoint(control)\n  // glyph.addJoint(control2)\n  // glyph.addJoint(end_c1)\n  // glyph.addJoint(end_c2)\n  // glyph.addJoint(radius_p_1)\n  // glyph.addJoint(radius_p_2)\n  // console.log('p', end_c2.x, end_c2.y)\n\n    glyph.addJoint(start_turn_1)\n    glyph.addJoint(start_turn_2)\n    glyph.addJoint(start_left)\n    glyph.addJoint(start_right)\n    glyph.addJoint(end_turn_1)\n    glyph.addJoint(end_turn_2)\n    glyph.addJoint(end_turn_2_left)\n    glyph.addJoint(end_turn_2_right)\n    glyph.addJoint(start_turn_3)\n    glyph.addJoint(start_turn_2_left)\n    glyph.addJoint(start_turn_2_right)\n    glyph.addJoint(start)\n    glyph.addJoint(end)\n    glyph.addJoint(end_left)\n    glyph.addJoint(end_right)\n    glyph.addJoint(end_turn_2)\n    glyph.addJoint(end_turn_1)\n\n    glyph.addJoint(start_turn_2_left_control_1)\n    glyph.addJoint(start_turn_2_left_control_2)\n    glyph.addJoint(start_turn_2_right_control_1)\n    glyph.addJoint(start_turn_2_right_control_2)\n    glyph.addJoint(start_turn_1_left_control)\n    glyph.addJoint(start_turn_1_right_control)\n    glyph.addJoint(end_turn_2_left_control_1)\n    glyph.addJoint(end_turn_2_left_control_2)\n    glyph.addJoint(end_turn_2_right_control_1)\n    glyph.addJoint(end_turn_2_right_control_2)\n    glyph.addJoint(end_turn_1_left_control)\n    glyph.addJoint(end_turn_1_right_control)\n\n    const refline = (p1, p2) => {\n      return {\n        name: `${p1.name}-${p2.name}`,\n        start: p1.name,\n        end: p2.name,\n      }\n    }\n\n\n    glyph.addRefLine(refline(start_turn_1, start_turn_1_left_control))\n    glyph.addRefLine(refline(start_turn_1, start_turn_1_right_control))\n    glyph.addRefLine(refline(start_turn_2_left, start_turn_1_left_control))\n    glyph.addRefLine(refline(start_turn_2_right, start_turn_1_right_control))\n    glyph.addRefLine(refline(start_turn_2_left, start_turn_2_left_control_1))\n    glyph.addRefLine(refline(start_turn_2_right, start_turn_2_right_control_1))\n    glyph.addRefLine(refline(start_left, start_turn_2_left_control_2))\n    glyph.addRefLine(refline(start_right, start_turn_2_right_control_2))\n\n    glyph.addRefLine(refline(end_turn_1, end_turn_1_left_control))\n    glyph.addRefLine(refline(end_turn_1, end_turn_1_right_control))\n    glyph.addRefLine(refline(end_turn_2_left, end_turn_1_left_control))\n    glyph.addRefLine(refline(end_turn_2_right, end_turn_1_right_control))\n    glyph.addRefLine(refline(end_turn_2_left, end_turn_2_left_control_1))\n    glyph.addRefLine(refline(end_turn_2_right, end_turn_2_right_control_1))\n\n    glyph.addRefLine(refline(start_turn_2_left, start_turn_2_right))\n    glyph.addRefLine(refline(end_turn_2_left, end_turn_2_right))\n    glyph.addRefLine(refline(start_left, start_right))\n    glyph.addRefLine(refline(end_left, end_right))\n}","objData":{"_joints":[{"_x":500,"_y":250,"uuid":"765VAHz5njnx3q9cU25DW","name":"start_turn_1"},{"_x":500,"_y":268,"uuid":"bMW1tcoXTy7Dztt1RJrbc","name":"start_turn_2"},{"_x":480,"_y":314.1410852499957,"uuid":"fWz40dK8ww_A3qkKfZ0X7","name":"start_left"},{"_x":520,"_y":314.1410852499957,"uuid":"x2S3qVC9g_cmoobSXI19G","name":"start_right"},{"_x":500,"_y":750,"uuid":"hTvrn6sv8_u6APYm_TCjl","name":"end_turn_1"},{"_x":500,"_y":720,"uuid":"ITgQzV2C_b-JEtPikc18o","name":"end_turn_2"},{"_x":478.8,"_y":720,"uuid":"ojU-LPxQoy4hicGP184z-","name":"end_turn_2_left"},{"_x":521.2,"_y":720,"uuid":"Q5aTO7WuGSBKXuLsGanT6","name":"end_turn_2_bottom"},{"_x":500,"_y":314.1410852499957,"uuid":"I6OO0b2oLqvzjxjzsobZ2","name":"start_turn_3"},{"_x":480,"_y":268,"uuid":"A5cJK6QVHc6rO47vXDcB_","name":"start_turn_2_left"},{"_x":520,"_y":268,"uuid":"rhaHkxzwgXSgr-Xc26JkY","name":"start_turn_2_right"},{"_x":500,"_y":314.1410852499957,"uuid":"R3I2LJSRB_xY8pOkQbjCM","name":"start"},{"_x":500,"_y":688.2539682539682,"uuid":"fOhP89e3ZKml_SZo56QEY","name":"end"},{"_x":480,"_y":688.2539682539682,"uuid":"_NCFU_R_CqTFwdwvuIszD","name":"end_left"},{"_x":520,"_y":688.2539682539682,"uuid":"u_nXX6XSpiEAEQMwyPNXS","name":"end_right"},{"_x":500,"_y":720,"uuid":"ITgQzV2C_b-JEtPikc18o","name":"end_turn_2"},{"_x":500,"_y":750,"uuid":"hTvrn6sv8_u6APYm_TCjl","name":"end_turn_1"},{"_x":476.94903065672116,"_y":285.3029069687484,"uuid":"nTS_ApkkXqemEC9HwwqOL","name":"start_turn_2_left_control_1"},{"_x":480,"_y":296.83817828124734,"uuid":"QqBA4NwhlskkCM93DSJVC","name":"start_turn_2_left_control_2"},{"_x":523.0509693432789,"_y":285.3029069687484,"uuid":"-s-KEASxgb1Zyg7vkksvN","name":"start_turn_2_right_control_1"},{"_x":520,"_y":296.83817828124734,"uuid":"_oLmtXOd3YcBuAgJL-_9c","name":"start_turn_2_right_control_2"},{"_x":483.1738856527524,"_y":250,"uuid":"uqhqpkrBnpQhgRXQieNBH","name":"start_turn_1_left_control"},{"_x":516.8261143472477,"_y":250,"uuid":"VIafFIusiwc1S6YemF1ch","name":"start_turn_1_right_control"},{"_x":478.8,"_y":708.078228095238,"uuid":"9LznAw2CEJ4QoqhCNytOq","name":"end_turn_2_left_control_1"},{"_x":480,"_y":700.1757401587302,"uuid":"un1GoSjWEKaEjirPQTiys","name":"end_turn_2_left_control_2"},{"_x":521.2,"_y":708.078228095238,"uuid":"ttQVcdvMxMLFD3-X-I3Kx","name":"end_turn_2_right_control_1"},{"_x":520,"_y":700.1757401587302,"uuid":"NvcmygjBa71SGlYxGm2Ed","name":"end_turn_2_right_control_2"},{"_x":478.8,"_y":750,"uuid":"Mdh4_zNZOHntQsQ25AHdm","name":"end_turn_1_left_control"},{"_x":521.2,"_y":750,"uuid":"s71Jpzloq1UsqRmlrhiY2","name":"end_turn_1_right_control"}],"_reflines":[{"name":"start_turn_1-start_turn_1_left_control","start":"start_turn_1","end":"start_turn_1_left_control"},{"name":"start_turn_1-start_turn_1_right_control","start":"start_turn_1","end":"start_turn_1_right_control"},{"name":"start_turn_2_left-start_turn_1_left_control","start":"start_turn_2_left","end":"start_turn_1_left_control"},{"name":"start_turn_2_right-start_turn_1_right_control","start":"start_turn_2_right","end":"start_turn_1_right_control"},{"name":"start_turn_2_left-start_turn_2_left_control_1","start":"start_turn_2_left","end":"start_turn_2_left_control_1"},{"name":"start_turn_2_right-start_turn_2_right_control_1","start":"start_turn_2_right","end":"start_turn_2_right_control_1"},{"name":"start_left-start_turn_2_left_control_2","start":"start_left","end":"start_turn_2_left_control_2"},{"name":"start_right-start_turn_2_right_control_2","start":"start_right","end":"start_turn_2_right_control_2"},{"name":"end_turn_1-end_turn_1_left_control","start":"end_turn_1","end":"end_turn_1_left_control"},{"name":"end_turn_1-end_turn_1_right_control","start":"end_turn_1","end":"end_turn_1_right_control"},{"name":"end_turn_2_left-end_turn_1_left_control","start":"end_turn_2_left","end":"end_turn_1_left_control"},{"name":"end_turn_2_bottom-end_turn_1_right_control","start":"end_turn_2_bottom","end":"end_turn_1_right_control"},{"name":"end_turn_2_left-end_turn_2_left_control_1","start":"end_turn_2_left","end":"end_turn_2_left_control_1"},{"name":"end_turn_2_bottom-end_turn_2_right_control_1","start":"end_turn_2_bottom","end":"end_turn_2_right_control_1"},{"name":"start_turn_2_left-start_turn_2_right","start":"start_turn_2_left","end":"start_turn_2_right"},{"name":"end_turn_2_left-end_turn_2_bottom","start":"end_turn_2_left","end":"end_turn_2_bottom"},{"name":"start_left-start_right","start":"start_left","end":"start_right"},{"name":"end_left-end_right","start":"end_left","end":"end_right"}],"_components":[{"points":[{"uuid":"nppg1_8iQISJB8usNA7kx","type":"anchor","x":500,"y":250,"origin":null},{"uuid":"CFi8rNxgIYSXmuksYgumD","type":"control","x":511.21740956483177,"y":250,"origin":"nppg1_8iQISJB8usNA7kx"},{"uuid":"3nnhOR3HS5ESRgP8zj-OD","type":"control","x":517.8840762314984,"y":256,"origin":"Ip875gLldsoJa7xYq5z64"},{"uuid":"Ip875gLldsoJa7xYq5z64","type":"anchor","x":520,"y":268,"origin":null},{"uuid":"T2imf_jEZQOugJzBdkBqA","type":"control","x":523.0509693432789,"y":285.3029069687484,"origin":"Ip875gLldsoJa7xYq5z64"},{"uuid":"Vh_PEDT3T9ZKm3JvfL1oh","type":"control","x":520,"y":296.83817828124734,"origin":"kXkf4hCMp5ABnSvgA1Om9"},{"uuid":"kXkf4hCMp5ABnSvgA1Om9","type":"anchor","x":520,"y":314.1410852499957,"origin":null},{"uuid":"ka0xIRu7ipNmWAQxj2WPJ","type":"control","x":520,"y":314.1410852499957,"origin":"kXkf4hCMp5ABnSvgA1Om9"},{"uuid":"PpQ5BS-cY8g5RXCwSdL2k","type":"control","x":520,"y":688.2539682539682,"origin":"v-2TUknaYeDSHEfSGgnho"},{"uuid":"v-2TUknaYeDSHEfSGgnho","type":"anchor","x":520,"y":688.2539682539682,"origin":null},{"uuid":"Kl-lxWSRRDxNwW7slOsWE","type":"control","x":520,"y":700.1757401587302,"origin":"v-2TUknaYeDSHEfSGgnho"},{"uuid":"oUwRXXzK2X6rac87R1_VZ","type":"control","x":521.2,"y":708.078228095238,"origin":"3IBd6d3TElV52teFirzcd"},{"uuid":"3IBd6d3TElV52teFirzcd","type":"anchor","x":521.2,"y":720,"origin":null},{"uuid":"GycAauBl888gRxXyWWIxQ","type":"control","x":521.2,"y":740,"origin":"3IBd6d3TElV52teFirzcd"},{"uuid":"8o4YMk_7NKWz8EIzgFSrK","type":"control","x":514.1333333333333,"y":750,"origin":"wOosMCkNvlTxwtUvHGClH"},{"uuid":"wOosMCkNvlTxwtUvHGClH","type":"anchor","x":500,"y":750,"origin":null},{"uuid":"BWkO5lNPYCp6PbE2lBATG","type":"control","x":485.8666666666667,"y":750,"origin":"wOosMCkNvlTxwtUvHGClH"},{"uuid":"xzcRqEGXe7Jm2znJE-ute","type":"control","x":478.8,"y":740,"origin":"SxMjHnRjjo1AGcVHWcI9k"},{"uuid":"SxMjHnRjjo1AGcVHWcI9k","type":"anchor","x":478.8,"y":720,"origin":null},{"uuid":"skDvCiV1cdaXXD4bm8OKx","type":"control","x":480,"y":700.1757401587302,"origin":"SxMjHnRjjo1AGcVHWcI9k"},{"uuid":"Yiz6ECre0_xsXP_MLNKF2","type":"control","x":478.8,"y":708.078228095238,"origin":"PdCqIxTYsEYz4zYRICFlp"},{"uuid":"PdCqIxTYsEYz4zYRICFlp","type":"anchor","x":480,"y":688.2539682539682,"origin":null},{"uuid":"Z8DOyqW1vexU5lKjJdh10","type":"control","x":480,"y":688.2539682539682,"origin":"PdCqIxTYsEYz4zYRICFlp"},{"uuid":"LPh7locEs9J-CSRo_rjqh","type":"control","x":480,"y":314.1410852499957,"origin":"OUzGoA51_9CIm1ClvguHr"},{"uuid":"OUzGoA51_9CIm1ClvguHr","type":"anchor","x":480,"y":314.1410852499957,"origin":null},{"uuid":"_SrmotByPoY4AizjFYAkO","type":"control","x":480,"y":296.83817828124734,"origin":"OUzGoA51_9CIm1ClvguHr"},{"uuid":"4wE0CZvrMVNtBCEZO_LJ7","type":"control","x":476.94903065672116,"y":285.3029069687484,"origin":"-WMcFpRf0JP1I-naNmbba"},{"uuid":"-WMcFpRf0JP1I-naNmbba","type":"anchor","x":480,"y":268,"origin":null},{"uuid":"z7vNrO1ZUPalIrvMEn5_M","type":"control","x":482.1159237685016,"y":256,"origin":"-WMcFpRf0JP1I-naNmbba"},{"uuid":"lqVIhuD15-bKiRZvTqB3Z","type":"control","x":488.7825904351683,"y":250,"origin":"cG3F4EbYuneAC2s7VEiZz"},{"uuid":"cG3F4EbYuneAC2s7VEiZz","type":"anchor","x":500,"y":250,"origin":null}],"type":"glyph-pen","hasPathBegan":false,"usedInCharacter":true,"contour":[{"type":2,"start":{"x":500,"y":550},"end":{"x":520,"y":532},"control1":{"x":511.21740956483177,"y":550},"control2":{"x":517.8840762314984,"y":544},"fill":false},{"type":2,"start":{"x":520,"y":532},"end":{"x":520,"y":485.85891475000426},"control1":{"x":523.0509693432789,"y":514.6970930312516},"control2":{"x":520,"y":503.16182171875266},"fill":false},{"type":2,"start":{"x":520,"y":485.85891475000426},"end":{"x":520,"y":111.7460317460318},"control1":{"x":520,"y":485.85891475000426},"control2":{"x":520,"y":111.7460317460318},"fill":false},{"type":2,"start":{"x":520,"y":111.7460317460318},"end":{"x":521.2,"y":80},"control1":{"x":520,"y":99.82425984126985},"control2":{"x":521.2,"y":91.92177190476195},"fill":false},{"type":2,"start":{"x":521.2,"y":80},"end":{"x":500,"y":50},"control1":{"x":521.2,"y":60},"control2":{"x":514.1333333333333,"y":50},"fill":false},{"type":2,"start":{"x":500,"y":50},"end":{"x":478.8,"y":80},"control1":{"x":485.8666666666667,"y":50},"control2":{"x":478.8,"y":60},"fill":false},{"type":2,"start":{"x":478.8,"y":80},"end":{"x":480,"y":111.7460317460318},"control1":{"x":480,"y":99.82425984126985},"control2":{"x":478.8,"y":91.92177190476195},"fill":false},{"type":2,"start":{"x":480,"y":111.7460317460318},"end":{"x":480,"y":485.85891475000426},"control1":{"x":480,"y":111.7460317460318},"control2":{"x":480,"y":485.85891475000426},"fill":false},{"type":2,"start":{"x":480,"y":485.85891475000426},"end":{"x":480,"y":532},"control1":{"x":480,"y":503.16182171875266},"control2":{"x":476.94903065672116,"y":514.6970930312516},"fill":false},{"type":2,"start":{"x":480,"y":532},"end":{"x":500,"y":550},"control1":{"x":482.1159237685016,"y":544},"control2":{"x":488.7825904351683,"y":550},"fill":false}],"preview":[{"type":2,"start":{"x":50,"y":25},"end":{"x":52,"y":26.8},"control1":{"x":51.12174095648318,"y":25},"control2":{"x":51.788407623149844,"y":25.6},"fill":false},{"type":2,"start":{"x":52,"y":26.8},"end":{"x":52,"y":31.41410852499957},"control1":{"x":52.30509693432789,"y":28.530290696874843},"control2":{"x":52,"y":29.683817828124734},"fill":false},{"type":2,"start":{"x":52,"y":31.41410852499957},"end":{"x":52,"y":68.82539682539682},"control1":{"x":52,"y":31.41410852499957},"control2":{"x":52,"y":68.82539682539682},"fill":false},{"type":2,"start":{"x":52,"y":68.82539682539682},"end":{"x":52.120000000000005,"y":72},"control1":{"x":52,"y":70.01757401587302},"control2":{"x":52.120000000000005,"y":70.80782280952381},"fill":false},{"type":2,"start":{"x":52.120000000000005,"y":72},"end":{"x":50,"y":75},"control1":{"x":52.120000000000005,"y":74},"control2":{"x":51.413333333333334,"y":75},"fill":false},{"type":2,"start":{"x":50,"y":75},"end":{"x":47.88,"y":72},"control1":{"x":48.58666666666667,"y":75},"control2":{"x":47.88,"y":74},"fill":false},{"type":2,"start":{"x":47.88,"y":72},"end":{"x":48,"y":68.82539682539682},"control1":{"x":48,"y":70.01757401587302},"control2":{"x":47.88,"y":70.80782280952381},"fill":false},{"type":2,"start":{"x":48,"y":68.82539682539682},"end":{"x":48,"y":31.41410852499957},"control1":{"x":48,"y":68.82539682539682},"control2":{"x":48,"y":31.41410852499957},"fill":false},{"type":2,"start":{"x":48,"y":31.41410852499957},"end":{"x":48,"y":26.8},"control1":{"x":48,"y":29.683817828124734},"control2":{"x":47.69490306567212,"y":28.530290696874843},"fill":false},{"type":2,"start":{"x":48,"y":26.8},"end":{"x":50,"y":25},"control1":{"x":48.21159237685016,"y":25.6},"control2":{"x":48.878259043516834,"y":25},"fill":false}]}]}},{"uuid":"_T_ZiqFbLElrQar02Kg2r","type":"system","name":"撇","components":[],"groups":[],"orderedList":[],"selectedComponentsUUIDs":[],"view":{"zoom":100,"translateX":0,"translateY":0},"parameters":[{"uuid":"VCaZyxCzHPA8FHzJDDf62","name":"leftSpan","type":0,"value":400,"min":100,"max":1000},{"uuid":"vYSmhVNy8erDILJk1X3vs","name":"downSpan","type":0,"value":400,"min":100,"max":800},{"uuid":"EOwe-KiCMDLFIGskD86tF","name":"weight","type":0,"value":40,"min":20,"max":100},{"uuid":"LsQKkU1z_HMXZ0DXiBgdF","name":"bending","type":0,"value":60,"min":10,"max":80},{"uuid":"xFp1gGWOZdav9MNz3iTo8","name":"startVariation","type":0,"value":0.8,"min":0,"max":1},{"uuid":"rcMUYPO4SszfVfWKpsBp7","name":"endVariation","type":0,"value":2.1,"min":1,"max":3},{"uuid":"UPHNVkFOitrgD8q_WyW1J","name":"收笔","type":2,"value":{"radius":{"name":"ratio","min":0.1,"max":0.45,"value":0.17243558228002942},"degree":{"name":"step","min":0,"max":30,"value":4.398705354995532},"params":[{"name":"radius","min":0,"max":100,"value":17.681914764818394},{"name":"hook","min":-30,"max":30,"value":11.598675426089436}]},"min":0,"max":1000}],"joints":[],"reflines":[],"script":"function script__T_ZiqFbLElrQar02Kg2r (glyph, constants, FP) {\n\t//Todo something\n\t// const length = glyph.getParam('length')\n  const bending = glyph.getParam('bending')\n  const startRatio = glyph.getParam('startVariation')\n  const endRatio = glyph.getParam('endVariation')\n  const ending = glyph.getParam('收笔')\n  const weight = glyph.getParam('weight') || 40\n  const leftSpan = glyph.getParam('leftSpan')\n  const downSpan = glyph.getParam('downSpan')\n  const length = Math.sqrt(leftSpan * leftSpan + downSpan * downSpan)\n  const angle = Math.atan2(downSpan, leftSpan)\n\n  // const weight = constants.get('weight')\n  // const startRatio = 2 / 3\n  // const endRatio = 1.5\n  const startD = weight * startRatio * 0.4\n  const endD = weight * endRatio * 1.5\n  // const angle = glyph.getParam('angle') / 180 * Math.PI\n  const ox = 500\n  const oy = 500\n\n  const getCoordY = (canvasY) => {\n    return -(canvasY - 500)\n  }\n\n  const getCanvasY = (coordY) => {\n    return -coordY + 500\n  }\n\n  const intersection = (k1, x1, y1, k2, x2, y2) => {\n    if (k1 === Infinity || k1 === -Infinity) {\n      const x = x1\n      const y = k2 * (x - x2) + y2\n      return {\n        x, y,\n      }\n    }\telse if (k2 === Infinity || k2 === -Infinity) {\n      const x = x2\n      const y = k1 * (x - x1) + y1\n      return {\n        x, y,\n      }\n    }\n    const x = ((y2 - y1) + (k1 * x1 - k2 * x2)) / (k1 - k2)\n    const y = (-k1 * y2 + k2 * y1 + (x2 - x1) * k1 * k2) / (k2 - k1)\n    return {\n      x, y,\n    }\n  }\n\n  const endOption = {\n    // ratio: 0.3,\n    // step: 10,\n    // radius: 30,\n    // hook: 10,\n    ratio: ending.radius.value,\n    step: ending.degree.value,\n    radius: ending.params[0].value,\n    hook: ending.params[1].value,\n  }\n\n  const start = new FP.Joint(\n    'start',\n    {\n      x: ox + length / 2 * Math.cos(angle),\n      y: oy - length / 2 * Math.sin(angle),\n    },\n  )\n  const end = new FP.Joint(\n    'end',\n    {\n      x: ox - length * (0.5 - endOption.ratio) * Math.cos(angle),\n      y: oy + length * (0.5 - endOption.ratio) * Math.sin(angle),\n    }\n  )\n  const bend = new FP.Joint(\n    'bend',\n    {\n      x: (start.x + end.x) / 2 + bending * Math.sin(angle),\n      y: (start.y + end.y) / 2 + bending * Math.cos(angle),\n    },\n  )\n  // const skeleton = new FP.Skeleton(constants.get('weight'))\n  const { contour1, contour2 } = FP.Skeleton.getContours([start, {\n    x: start.x + 2 / 3 * (bend.x - start.x),\n    y: start.y + 2 / 3 * (bend.y - start.y),\n  }, {\n    x: end.x + 2 / 3 * (bend.x - end.x),\n    y: end.y + 2 / 3 * (bend.y - end.y),\n  }, end], [\n  {\n    pos: 0,\n    weight: weight * 2 / 3,\n  },\n  {\n    pos: 1,\n    weight: weight * endRatio\n  }])\n\n\n  const start0 = new FP.Joint(\n    'start0',\n    {\n      x: contour1[0].start.x,\n      y: contour1[0].start.y,\n    },\n  )\n\n  const start2 = new FP.Joint(\n    'start2',\n    {\n      x: contour2[0].start.x,\n      y: contour2[0].start.y,\n    },\n  )\n\n  const angle1 = Math.atan((start0.y - start2.y) / (start0.x - start2.x))\n\n  const start1 = new FP.Joint(\n    'start1',\n    {\n      x: start.x + startD * Math.sin(angle1),\n      y: start.y - startD * Math.cos(angle1),\n    },\n  )\n\n  const end0 = new FP.Joint(\n    'end0',\n    {\n      x: contour1[0].end.x,\n      y: contour1[0].end.y,\n    },\n  )\n\n  const end2 = new FP.Joint(\n    'end2',\n    {\n      x: contour2[0].end.x,\n      y: contour2[0].end.y,\n    },\n  )\n\n  const end1 = new FP.Joint(\n    'end1',\n    {\n      x: ox - length / 2 * Math.cos(angle),\n      y: oy + length / 2 * Math.sin(angle),\n    },\n  )\n\n  const toDegree = (radian) => radian / Math.PI * 180\n  const toRadian = (degree) => Math.PI / 180 * degree\n\n  const getK = (p1, p2) => {\n    return -(p2.y - p1.y) / (p2.x - p1.x)\n  }\n\n  const k1 = Math.tan(toRadian(toDegree(angle) - 90))\n  const k2 = Math.tan(toRadian(toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2))) - endOption.step))\n  const k3 = getK(contour1[0].end, contour1[0].control2)\n  const k4 = Math.tan(toRadian(toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2))) - endOption.step - endOption.hook))\n  const k5 = getK(contour2[0].end, contour2[0].control2)\n  const p = intersection(k1, end1.x, getCoordY(end1.y), k2, end2.x, getCoordY(end2.y))\n\n\n  const control = new FP.Joint(\n    'control',\n    {\n      x: contour2[0].control2.x,\n      y: contour2[0].control2.y,\n    },\n  )\n  const control2 = new FP.Joint(\n    'control2',\n    {\n      x: contour1[0].control2.x,\n      y: contour1[0].control2.y,\n    },\n  )\n    const control3 = new FP.Joint(\n    'control3',\n    {\n      x: contour2[0].control1.x,\n      y: contour2[0].control1.y,\n    },\n  )\n  const control4 = new FP.Joint(\n    'control4',\n    {\n      x: contour1[0].control1.x,\n      y: contour1[0].control1.y,\n    },\n  )\n  const end3 = new FP.Joint(\n    'end3',\n    {\n      x: p.x,\n      y: getCanvasY(p.y),\n    },\n  )\n\n  const radius_p_1 = new FP.Joint(\n    'radius_p_1',\n    {\n      x: end3.x + endOption.radius * Math.cos(Math.atan(k1)),\n      y: end3.y - endOption.radius * Math.sin(Math.atan(k1)),\n    },\n  )\n\n  const radius_p_2 = new FP.Joint(\n    'radius_p_2',\n    {\n      x: end3.x + endOption.radius * Math.cos(Math.atan(k2)),\n      y: end3.y - endOption.radius * Math.sin(Math.atan(k2)),\n    },\n  )\n\n  const end_c1_p = intersection(k1, radius_p_1.x, getCoordY(radius_p_1.y), k3, end0.x, getCoordY(end0.y))\n  const end_c2_p = intersection(k4, radius_p_2.x, getCoordY(radius_p_2.y), k5, end2.x, getCoordY(end2.y))\n\n  const end_c1 = new FP.Joint(\n    'end_c1',\n    {\n      x: end_c1_p.x,\n      y: getCanvasY(end_c1_p.y),\n    },\n  )\n  const end_c2 = new FP.Joint(\n    'end_c2',\n    {\n      x: end_c2_p.x,\n      y: getCanvasY(end_c2_p.y),\n    },\n  )\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  const k = getK(contour1[0].end, contour1[0].control2)\n  const angle_1 = Math.atan(-getK(end2, end0))\n  const angle_2 = toRadian(toDegree(angle_1) + 1)\n\n  const r = weight * endRatio\n  const l = (k * (end0.x - end2.x) - (end2.y - end0.y)) / (Math.sin(angle_2) + k * Math.cos(angle_2))\n  const delta = l - r\n\n  const _angle_1 = toDegree(angle_1)\n  const _angle_3 = 200 - toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2)))\n\n  const tan_1 = Math.atan(k)\n  const tan_3 = toRadian(-70)\n\n  //const tan_d = (tan_3 - tan_1) / (_angle_3 - _angle_1)\n\n  const l1 = distance(end2, end0)\n  const l2 = distance(end2, end1)\n  const d = 0\n  let lastX = end0.x\n  let lastY = end0.y\n  let lastTan = tan_1\n  const endPoints = []\n  let sum = 0\n  const pow = 0.05\n  for (let i = 0; i <= _angle_3 - _angle_1; i++) {\n    sum += Math.pow(i, pow)\n  }\n  const a1 = (tan_3 - tan_1) / sum\n  const path = new FP.PolygonComponent()\n  let _l = 0\n  path.beginPath()\n  for (let i = _angle_1; i < _angle_3; i++) {\n    const tan_d = a1 * Math.pow((i - _angle_1), pow)\n    const tan = lastTan + tan_d\n    lastTan = tan\n    const angle = toRadian(i + 1)\n    const _k = Math.tan(tan)\n    _l = (_k * (lastX - end2.x) - (end2.y - lastY)) / (Math.sin(angle) + _k * Math.cos(angle))\n    const _r = r + d * (-0.5 + Math.random())\n    //console.log(r, delta)\n    const x = end2.x + _l * Math.cos(angle)\n    const y = end2.y + _l * Math.sin(angle)\n    if (i === _angle_1) {\n      path.moveTo(end0.x, end0.y)\n    } else {\n      path.lineTo(x, y)\n    }\n    endPoints.push({x, y})\n    //console.log('111', i, angle, x, y)\n    lastX = x\n    lastY = y\n  }\n\n  // 顺时针\n  const pen = new FP.PenComponent()\n  pen.beginPath()\n\n  // const endCurve = FP.fitCurve(endPoints, 2)\n  // pen.moveTo(end0.x, end0.y)\n  // for (let i = 0; i < endCurve.length; i++) {\n  //   const bezier = endCurve[i]\n  //   pen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // }\n\n  pen.moveTo(end0.x, end0.y)\n  pen.quadraticBezierTo(end_c1.x, end_c1.y, radius_p_1.x, radius_p_1.y)\n  pen.quadraticBezierTo(end3.x, end3.y, radius_p_2.x, radius_p_2.y)\n  pen.quadraticBezierTo(end_c2.x, end_c2.y, end2.x, end2.y)\n\n  const controlLength = _l * 0.5\n  //path.closePath()\n  //glyph.addComponent(path)\n\n  const c = new FP.Joint(\n    'c',\n    {\n      x: end2.x - controlLength * Math.cos(Math.atan(getK(contour2[0].end, contour2[0].control2))),\n      y: end2.y + controlLength * Math.sin(Math.atan(getK(contour2[0].end, contour2[0].control2))),\n    },\n  )\n\n  //pen.moveTo(lastX, lastY)\n  //pen.quadraticBezierTo(c.x, c.y, end2.x, end2.y)\n  pen.bezierTo(contour2[0].control2.x, contour2[0].control2.y, contour2[0].control1.x, contour2[0].control1.y, start2.x, start2.y)\n  \n  \n  const getAngle = (p1, p2) => {\n    if (p2.x === p1.x) return 90\n    if (p2.y === p1.y && p2.x > p1.x) return 180\n    if (p2.x > p1.x) {\n      return 180 - toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n    }\n    return -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n  }\n  const startPoints = []\n  let startCurve\n  {\n    const path = new FP.PolygonComponent()\n    path.beginPath()\n    let delta = 1\n    const angle1 = Math.round(getAngle(start, start2))\n    const angle2 = Math.round(getAngle(start, start1))\n    const angle3 = Math.round(getAngle(start, start0))\n    const l1 = distance(start, start2)\n    const l2 = distance(start, start1)\n    const l3 = distance(start, start0)\n    const pow = 0.5\n    let r = l1\n    let sum = 0\n    for (let i = 0; i <= angle2 - angle1; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a1 = (l2 - l1) / sum\n    const n1 = angle2 - angle1\n    sum = 0\n    for (let i = 0; i <= angle3 - angle2; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a2 = (l3 - l2) / sum\n    const n2 = angle3 - angle2\n    const d = 0\n    for (let i = angle1; i <= angle3; i++) {\n      let _i = i\n      if (i >= angle1 && i < angle2) {\n        _i = i - angle1\n        delta = a1 * Math.pow((n1 - _i), pow)\n      }\n      if (i >= angle2 && i < angle3) {\n        _i = i - angle2\n        delta = a2 * Math.pow((i - angle2), pow)\n      }\n      const _r = r + d * (-0.5 + Math.random())\n      r += delta\n      //console.log(r, delta)\n      const angle = Math.PI / 180 * i\n      const x = start.x - _r * Math.cos(angle)\n      const y = start.y - _r * Math.sin(angle)\n      if (i === angle1) {\n        path.moveTo(x, y)\n      } else {\n        path.lineTo(x, y)\n      }\n      startPoints.push({x, y})\n    }\n    path.closePath()\n    //glyph.addComponent(path)\n    //startCurve = FP.fitCurve(startPoints, 2)\n  }\n  const curve = FP.fitCurve(startPoints, 2)\n  for (let i = 0; i < curve.length; i++) {\n    const bezier = curve[i]\n    pen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  }\n\n  pen.bezierTo(contour1[0].control1.x, contour1[0].control1.y, contour1[0].control2.x, contour1[0].control2.y, contour1[0].end.x, contour1[0].end.y)\n  pen.closePath()\n  glyph.addComponent(pen)\n\n  // const _x = end.x + l * Math.cos(angle_2)\n  // const _y = end.y + l * Math.sin(angle_2)\n  // -(end0.y - _y) / (end0.x - _x) = k\n\n  // -(end0.y - (end.y + l * Math.sin(angle_2))) / (end0.x - (end.x + l * Math.cos(angle_2))) = k\n\n  glyph.addJoint(start)\n  glyph.addJoint(bend)\n  glyph.addJoint(end)\n  glyph.addJoint(start0)\n  glyph.addJoint(start1)\n  glyph.addJoint(start2)\n  glyph.addJoint(end0)\n  glyph.addJoint(end1)\n  glyph.addJoint(end2)\n  glyph.addJoint(end3)\n  glyph.addJoint(control)\n  glyph.addJoint(control2)\n  glyph.addJoint(control3)\n  glyph.addJoint(control4)\n  glyph.addJoint(end_c1)\n  glyph.addJoint(end_c2)\n  glyph.addJoint(radius_p_1)\n  glyph.addJoint(radius_p_2)\n\n  const refline = (p1, p2) => {\n    return {\n      name: `${p1.name}-${p2.name}`,\n      start: p1.name,\n      end: p2.name,\n    }\n  }\n  glyph.addRefLine(refline(end1, start))\n  glyph.addRefLine(refline(start0, control4))\n  glyph.addRefLine(refline(start2, control3))\n  glyph.addRefLine(refline(end2, control))\n  glyph.addRefLine(refline(end0, control2))\n  glyph.addRefLine(refline(end0, end2))\n  glyph.addRefLine(refline(start0, start2))\n  glyph.addRefLine(refline(end2, end_c2))\n  glyph.addRefLine(refline(end3, end_c1))\n  glyph.addRefLine(refline(end3, end_c2))\n  glyph.addRefLine(refline(end0, end_c1))\n}","objData":{"_joints":[{"_x":700,"_y":300,"uuid":"WtKPP2OoBjnB-fypB8y_N","name":"start"},{"_x":576.9135233271987,"_y":507.939290415187,"uuid":"QBNdgrPP5zvSwvOaHsaGy","name":"bend"},{"_x":368.97423291201176,"_y":631.0257670879882,"uuid":"62F7HpLljVHnxCiLQnAWC","name":"end"},{"_x":711.4985319853029,"_y":306.8063798147744,"uuid":"AHz9Yy1FQbA0ypuFxCaUj","name":"start0"},{"_x":706.5201063934375,"_y":288.9850913477117,"uuid":"W2cXyoL4q21i1EOL80JoD","name":"start1"},{"_x":688.5014680146971,"_y":293.1936201852256,"uuid":"whBNG1r1__QACxfpiYOAM","name":"start2"},{"_x":391.219895754407,"_y":666.6304906648364,"uuid":"IN7FEQ54kLFa2pcOcDE4u","name":"end0"},{"_x":300,"_y":700,"uuid":"OwRtAPUWMfrxRgxoae6BH","name":"end1"},{"_x":348.39140557042805,"_y":594.4356728752476,"uuid":"RL2H-o6omwgIclIMVIPKF","name":"end2"},{"_x":239.92029980194496,"_y":639.920299801945,"uuid":"N22KVEBUpg_gyUXkXDder","name":"end3"},{"_x":485.4007208765407,"_y":524.1789030821698,"uuid":"00WpoMtLbued8yfZIciek","name":"control"},{"_x":526.6054653299124,"_y":575.4786530862516,"uuid":"QU1IPsUjFpvLNlW5mA-sN","name":"control2"},{"_x":602.2249668073803,"_y":420.7331652197987,"uuid":"O0DUK-RuGF1utecESbV7D","name":"control3"},{"_x":636.676636336086,"_y":451.8568926841996,"uuid":"iEgQh1xCPtVlkwJAijBA-","name":"control4"},{"_x":316.7615191753391,"_y":716.7615191753391,"uuid":"FK6k1ZWe-wULszNGvLHoN","name":"end_c1"},{"_x":283.5143596972814,"_y":627.7038610023162,"uuid":"BGX8wjlDL200EF7ICN44T","name":"end_c2"},{"_x":252.4233016365106,"_y":652.4233016365106,"uuid":"yiR3QvNJxBEZXmRka7D2D","name":"radius_p_1"},{"_x":256.2266368235514,"_y":633.0826479617232,"uuid":"PSvur1pXTEOfSFRPtxGdK","name":"radius_p_2"}],"_reflines":[{"name":"end1-start","start":"end1","end":"start"},{"name":"start0-control4","start":"start0","end":"control4"},{"name":"start2-control3","start":"start2","end":"control3"},{"name":"end2-control","start":"end2","end":"control"},{"name":"end0-control2","start":"end0","end":"control2"},{"name":"end0-end2","start":"end0","end":"end2"},{"name":"start0-start2","start":"start0","end":"start2"},{"name":"end2-end_c2","start":"end2","end":"end_c2"},{"name":"end3-end_c1","start":"end3","end":"end_c1"},{"name":"end3-end_c2","start":"end3","end":"end_c2"},{"name":"end0-end_c1","start":"end0","end":"end_c1"}],"_components":[{"points":[{"uuid":"Fgj2Tx26L1JaNVpQ4SMzL","type":"anchor","x":391.219895754407,"y":666.6304906648364,"origin":null},{"uuid":"iYJXM5WOOj0OvVyGdLz7W","type":"control","x":341.5809780350284,"y":700.0511763385049,"origin":"Fgj2Tx26L1JaNVpQ4SMzL"},{"uuid":"Omx3KuGPec-p3wRMa11y9","type":"control","x":295.31544666239625,"y":695.3154466623963,"origin":"sLGwxinYSVvJ17iN6VM2b"},{"uuid":"sLGwxinYSVvJ17iN6VM2b","type":"anchor","x":252.4233016365106,"y":652.4233016365106,"origin":null},{"uuid":"jOhKtxwn_CGdGVtAzsj5L","type":"control","x":244.0879670801335,"y":644.0879670801336,"origin":"sLGwxinYSVvJ17iN6VM2b"},{"uuid":"GTNdKPXNScIJo0nLzkQ5K","type":"control","x":245.3557454758138,"y":637.6410825218711,"origin":"RIGVnO_1-bi02DbP9UwWG"},{"uuid":"RIGVnO_1-bi02DbP9UwWG","type":"anchor","x":256.2266368235514,"y":633.0826479617232,"origin":null},{"uuid":"A1KxuFCat5S3xcc-pHqEF","type":"control","x":274.4184520727047,"y":629.4967899887852,"origin":"RIGVnO_1-bi02DbP9UwWG"},{"uuid":"rily7V3uA-rs5QD-J0Kdb","type":"control","x":305.14004165499693,"y":616.6144649599601,"origin":"iRkH2BKsT7Q_Vjd_onOGy"},{"uuid":"iRkH2BKsT7Q_Vjd_onOGy","type":"anchor","x":348.39140557042805,"y":594.4356728752476,"origin":null},{"uuid":"4m6WukFJyRNv4UFIzNT9y","type":"control","x":485.4007208765407,"y":524.1789030821698,"origin":"iRkH2BKsT7Q_Vjd_onOGy"},{"uuid":"ZOp0K3avASoGbIcb1rJAp","type":"control","x":602.2249668073803,"y":420.7331652197987,"origin":"oPdGIwYNCHRvZT2qe4TRG"},{"uuid":"oPdGIwYNCHRvZT2qe4TRG","type":"anchor","x":688.5014680146971,"y":293.1936201852256,"origin":null},{"uuid":"bKSqXnUQXtpZgBQd2LGOo","type":"control","x":697.7741216686303,"y":279.3249609282825,"origin":"oPdGIwYNCHRvZT2qe4TRG"},{"uuid":"jxUkNitgW8W0aGf_Y1ubf","type":"control","x":719.2943877351979,"y":292.2565669345722,"origin":"kLTHmXq8CAsB_uiJaaouN"},{"uuid":"kLTHmXq8CAsB_uiJaaouN","type":"anchor","x":711.4455042012477,"y":306.8771527394442,"origin":null},{"uuid":"Z-4MMB8sy3wuZ0EeGmG2g","type":"control","x":636.676636336086,"y":451.8568926841996,"origin":"kLTHmXq8CAsB_uiJaaouN"},{"uuid":"yo7kkbFIZjKtlokSxaO8Z","type":"control","x":526.6054653299124,"y":575.4786530862516,"origin":"CaU_t2dzHsdILrldXH4MV"},{"uuid":"CaU_t2dzHsdILrldXH4MV","type":"anchor","x":391.219895754407,"y":666.6304906648364,"origin":null}],"type":"glyph-pen","hasPathBegan":false,"usedInCharacter":true,"contour":[{"type":2,"start":{"x":391.219895754407,"y":133.36950933516357},"end":{"x":252.4233016365106,"y":147.5766983634894},"control1":{"x":341.5809780350284,"y":99.94882366149511},"control2":{"x":295.31544666239625,"y":104.68455333760369},"fill":false},{"type":2,"start":{"x":252.4233016365106,"y":147.5766983634894},"end":{"x":256.2266368235514,"y":166.91735203827682},"control1":{"x":244.0879670801335,"y":155.91203291986642},"control2":{"x":245.3557454758138,"y":162.3589174781289},"fill":false},{"type":2,"start":{"x":256.2266368235514,"y":166.91735203827682},"end":{"x":348.39140557042805,"y":205.56432712475237},"control1":{"x":274.4184520727047,"y":170.50321001121483},"control2":{"x":305.14004165499693,"y":183.38553504003994},"fill":false},{"type":2,"start":{"x":348.39140557042805,"y":205.56432712475237},"end":{"x":688.5014680146971,"y":506.8063798147744},"control1":{"x":485.4007208765407,"y":275.82109691783023},"control2":{"x":602.2249668073803,"y":379.2668347802013},"fill":false},{"type":2,"start":{"x":688.5014680146971,"y":506.8063798147744},"end":{"x":711.4455042012477,"y":493.1228472605558},"control1":{"x":697.7741216686303,"y":520.6750390717175},"control2":{"x":719.2943877351979,"y":507.7434330654278},"fill":false},{"type":2,"start":{"x":711.4455042012477,"y":493.1228472605558},"end":{"x":391.219895754407,"y":133.36950933516357},"control1":{"x":636.676636336086,"y":348.1431073158004},"control2":{"x":526.6054653299124,"y":224.5213469137484},"fill":false}],"preview":[{"type":2,"start":{"x":39.1219895754407,"y":66.66304906648365},"end":{"x":25.24233016365106,"y":65.24233016365106},"control1":{"x":34.15809780350284,"y":70.00511763385049},"control2":{"x":29.531544666239625,"y":69.53154466623964},"fill":false},{"type":2,"start":{"x":25.24233016365106,"y":65.24233016365106},"end":{"x":25.622663682355142,"y":63.308264796172324},"control1":{"x":24.40879670801335,"y":64.40879670801336},"control2":{"x":24.53557454758138,"y":63.764108252187114},"fill":false},{"type":2,"start":{"x":25.622663682355142,"y":63.308264796172324},"end":{"x":34.8391405570428,"y":59.443567287524765},"control1":{"x":27.441845207270475,"y":62.94967899887852},"control2":{"x":30.514004165499696,"y":61.66144649599601},"fill":false},{"type":2,"start":{"x":34.8391405570428,"y":59.443567287524765},"end":{"x":68.85014680146972,"y":29.31936201852256},"control1":{"x":48.54007208765407,"y":52.41789030821698},"control2":{"x":60.22249668073803,"y":42.073316521979876},"fill":false},{"type":2,"start":{"x":68.85014680146972,"y":29.31936201852256},"end":{"x":71.14455042012477,"y":30.687715273944423},"control1":{"x":69.77741216686303,"y":27.932496092828252},"control2":{"x":71.92943877351979,"y":29.225656693457225},"fill":false},{"type":2,"start":{"x":71.14455042012477,"y":30.687715273944423},"end":{"x":39.1219895754407,"y":66.66304906648365},"control1":{"x":63.6676636336086,"y":45.185689268419964},"control2":{"x":52.66054653299124,"y":57.54786530862516},"fill":false}]}]}},{"uuid":"ZZBtppcyD_RHoiHFKSBWb","type":"system","name":"捺","components":[],"groups":[],"orderedList":[],"selectedComponentsUUIDs":[],"view":{"zoom":100,"translateX":0,"translateY":0},"parameters":[{"uuid":"HQChB7NWEgHxfLS5pTWvf","name":"rightSpan","type":0,"value":400,"min":100,"max":1000},{"uuid":"HVXqgE8FMCIR_T0zTZZg3","name":"downSpan","type":0,"value":400,"min":100,"max":800},{"uuid":"NRnWTtHa0LR35wOCFgfEd","name":"weight","type":0,"value":40,"min":20,"max":100},{"uuid":"cnv8FTft8eQdJqNfWISqZ","name":"bending","type":0,"value":72,"min":0,"max":100},{"uuid":"u-BYY751k2EWjlCoesZ3o","name":"startVariation","type":0,"value":0.5,"min":0,"max":1},{"uuid":"EwKWbnHNh62wXL764nrj6","name":"endVariation","type":0,"value":2.1,"min":1,"max":3},{"uuid":"t7FI1p9kRMH9vG29WaYgp","name":"收笔","type":2,"value":{"radius":{"name":"ratio","min":0.1,"max":0.45,"value":0.18498365855987975},"degree":{"name":"step","min":0,"max":30,"value":11.309932474020215},"params":[{"name":"radius","min":0,"max":100,"value":19.308840307522985},{"name":"hook","min":-30,"max":30,"value":7.635256552805743}]},"min":0,"max":1000}],"joints":[],"reflines":[],"script":"function script_ZZBtppcyD_RHoiHFKSBWb (glyph, constants, FP) {\n\t//Todo something\n  // const length = glyph.getParam('length')\n  const bending = glyph.getParam('bending')\n  const startRatio = glyph.getParam('startVariation')\n  const endRatio = glyph.getParam('endVariation')\n  const ending = glyph.getParam('收笔')\n  const weight = glyph.getParam('weight') || 40\n  const rightSpan = glyph.getParam('rightSpan')\n  const downSpan = glyph.getParam('downSpan')\n  const length = Math.sqrt(rightSpan * rightSpan + downSpan * downSpan)\n  const angle = Math.atan2(downSpan, rightSpan)\n  //const weight = constants.get('weight')\n  // const startRatio = 2 / 3\n  // const endRatio = 1.5\n  const startD = weight * startRatio * 0.4\n  const endD = weight * endRatio * 1.5\n  // const angle = glyph.getParam('angle') / 180 * Math.PI\n  const ox = 500\n  const oy = 500\n\n  const getCoordY = (canvasY) => {\n    return -(canvasY - 500)\n  }\n\n  const getCanvasY = (coordY) => {\n    return -coordY + 500\n  }\n\n  const intersection = (k1, x1, y1, k2, x2, y2) => {\n    if (k1 === Infinity || k1 === -Infinity) {\n      const x = x1\n      const y = k2 * (x - x2) + y2\n      return {\n        x, y,\n      }\n    } else if (k2 === Infinity || k2 === -Infinity) {\n      const x = x2\n      const y = k1 * (x - x1) + y1\n      return {\n        x, y,\n      }\n    }\n    const x = ((y2 - y1) + (k1 * x1 - k2 * x2)) / (k1 - k2)\n    const y = (-k1 * y2 + k2 * y1 + (x2 - x1) * k1 * k2) / (k2 - k1)\n    return {\n      x, y,\n    }\n  }\n\n  const endOption = {\n    // ratio: 0.3,\n    // step: 10,\n    // radius: 30,\n    // hook: 10,\n    ratio: ending.radius.value,\n    step: ending.degree.value,\n    radius: ending.params[0].value,\n    hook: ending.params[1].value,\n  }\n\n  const start = new FP.Joint(\n    'start',\n    {\n      x: ox - length / 2 * Math.cos(angle),\n      y: oy - length / 2 * Math.sin(angle),\n    },\n  )\n  const end = new FP.Joint(\n    'end',\n    {\n      x: ox + length * (0.5 - endOption.ratio) * Math.cos(angle),\n      y: oy + length * (0.5 - endOption.ratio) * Math.sin(angle),\n    }\n  )\n  const bend = new FP.Joint(\n    'bend',\n    {\n      x: (start.x + end.x) / 2 - bending * Math.sin(angle),\n      y: (start.y + end.y) / 2 + bending * Math.cos(angle),\n    },\n  )\n  // const skeleton = new FP.Skeleton(constants.get('weight'))\n  const { contour1, contour2 } = FP.Skeleton.getContours([start, {\n    x: start.x + 2 / 3 * (bend.x - start.x),\n    y: start.y + 2 / 3 * (bend.y - start.y),\n  }, {\n    x: end.x + 2 / 3 * (bend.x - end.x),\n    y: end.y + 2 / 3 * (bend.y - end.y),\n  }, end], [\n  {\n    pos: 0,\n    weight: weight * 2 / 3,\n  },\n  {\n    pos: 1,\n    weight: weight * endRatio\n  }])\n\n\n  const start0 = new FP.Joint(\n    'start0',\n    {\n      x: contour1[0].start.x,\n      y: contour1[0].start.y,\n    },\n  )\n\n  const start2 = new FP.Joint(\n    'start2',\n    {\n      x: contour2[0].start.x,\n      y: contour2[0].start.y,\n    },\n  )\n\n  const angle1 = Math.atan((start0.y - start2.y) / (start0.x - start2.x))\n\n  const start1 = new FP.Joint(\n    'start1',\n    {\n      x: start.x + startD * Math.sin(angle1),\n      y: start.y - startD * Math.cos(angle1),\n    },\n  )\n\n  const end0 = new FP.Joint(\n    'end0',\n    {\n      x: contour1[0].end.x,\n      y: contour1[0].end.y,\n    },\n  )\n\n  const end2 = new FP.Joint(\n    'end2',\n    {\n      x: contour2[0].end.x,\n      y: contour2[0].end.y,\n    },\n  )\n\n  const end1 = new FP.Joint(\n    'end1',\n    {\n      x: ox + length / 2 * Math.cos(angle),\n      y: oy + length / 2 * Math.sin(angle),\n    },\n  )\n\n  const toDegree = (radian) => radian / Math.PI * 180\n  const toRadian = (degree) => Math.PI / 180 * degree\n\n  const getK = (p1, p2) => {\n    return -(p2.y - p1.y) / (p2.x - p1.x)\n  }\n\n  //const k1 = Math.tan(toRadian(-glyph.getParam('angle') + 90))\n  const k1 = Math.tan(toRadian(-toDegree(angle) + 90))\n  const k2 = Math.tan(toRadian(toDegree(Math.atan(getK(contour1[0].end, contour1[0].control2))) + endOption.step))\n  const k3 = getK(contour1[0].end, contour1[0].control2)\n  const k4 = Math.tan(toRadian(toDegree(Math.atan(getK(contour1[0].end, contour1[0].control2))) + endOption.step + endOption.hook))\n  const k5 = getK(contour2[0].end, contour2[0].control2)\n  const p = intersection(k1, end1.x, getCoordY(end1.y), k2, end0.x, getCoordY(end0.y))\n\n\n  const control = new FP.Joint(\n    'control',\n    {\n      x: contour2[0].control2.x,\n      y: contour2[0].control2.y,\n    },\n  )\n  const control2 = new FP.Joint(\n    'control2',\n    {\n      x: contour1[0].control2.x,\n      y: contour1[0].control2.y,\n    },\n  )\n    const control3 = new FP.Joint(\n    'control3',\n    {\n      x: contour2[0].control1.x,\n      y: contour2[0].control1.y,\n    },\n  )\n  const control4 = new FP.Joint(\n    'control4',\n    {\n      x: contour1[0].control1.x,\n      y: contour1[0].control1.y,\n    },\n  )\n  const end3 = new FP.Joint(\n    'end3',\n    {\n      x: p.x,\n      y: getCanvasY(p.y),\n    },\n  )\n\n  const radius_p_1 = new FP.Joint(\n    'radius_p_1',\n    {\n      x: end3.x - endOption.radius * Math.cos(Math.atan(k1)),\n      y: end3.y + endOption.radius * Math.sin(Math.atan(k1)),\n    },\n  )\n\n  const radius_p_2 = new FP.Joint(\n    'radius_p_2',\n    {\n      x: end3.x - endOption.radius * Math.cos(Math.atan(k2)),\n      y: end3.y + endOption.radius * Math.sin(Math.atan(k2)),\n    },\n  )\n\n  const end_c1_p = intersection(k1, radius_p_1.x, getCoordY(radius_p_1.y), k3, end2.x, getCoordY(end2.y))\n  const end_c2_p = intersection(k4, radius_p_2.x, getCoordY(radius_p_2.y), k5, end0.x, getCoordY(end0.y))\n\n  const end_c1 = new FP.Joint(\n    'end_c1',\n    {\n      x: end_c1_p.x,\n      y: getCanvasY(end_c1_p.y),\n    },\n  )\n  const end_c2 = new FP.Joint(\n    'end_c2',\n    {\n      x: end_c2_p.x,\n      y: getCanvasY(end_c2_p.y),\n    },\n  )\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  const k = getK(contour1[0].end, contour1[0].control2)\n  const angle_1 = Math.atan(-getK(end2, end0))\n  const angle_2 = toRadian(toDegree(angle_1) + 1)\n\n  const r = weight * endRatio\n  const l = (k * (end0.x - end2.x) - (end2.y - end0.y)) / (Math.sin(angle_2) + k * Math.cos(angle_2))\n  const delta = l - r\n\n  const _angle_1 = toDegree(angle_1)\n  const _angle_3 = 200 - toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2)))\n\n  const tan_1 = Math.atan(k)\n  const tan_3 = toRadian(-70)\n\n  //const tan_d = (tan_3 - tan_1) / (_angle_3 - _angle_1)\n\n  const l1 = distance(end2, end0)\n  const l2 = distance(end2, end1)\n  const d = 0\n  let lastX = end0.x\n  let lastY = end0.y\n  let lastTan = tan_1\n  const endPoints = []\n  let sum = 0\n  const pow = 0.05\n  for (let i = 0; i <= _angle_3 - _angle_1; i++) {\n    sum += Math.pow(i, pow)\n  }\n  const a1 = (tan_3 - tan_1) / sum\n  const path = new FP.PolygonComponent()\n  let _l = 0\n  path.beginPath()\n  for (let i = _angle_1; i < _angle_3; i++) {\n    const tan_d = a1 * Math.pow((i - _angle_1), pow)\n    const tan = lastTan + tan_d\n    lastTan = tan\n    const angle = toRadian(i + 1)\n    const _k = Math.tan(tan)\n    _l = (_k * (lastX - end2.x) - (end2.y - lastY)) / (Math.sin(angle) + _k * Math.cos(angle))\n    const _r = r + d * (-0.5 + Math.random())\n    const x = end2.x + _l * Math.cos(angle)\n    const y = end2.y + _l * Math.sin(angle)\n    if (i === _angle_1) {\n      path.moveTo(end0.x, end0.y)\n    } else {\n      path.lineTo(x, y)\n    }\n    endPoints.push({x, y})\n    //console.log('111', i, angle, x, y)\n    lastX = x\n    lastY = y\n  }\n\n  // 顺时针\n  const pen = new FP.PenComponent()\n  pen.beginPath()\n\n  // const endCurve = FP.fitCurve(endPoints, 2)\n  // pen.moveTo(end0.x, end0.y)\n  // for (let i = 0; i < endCurve.length; i++) {\n  //   const bezier = endCurve[i]\n  //   pen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // }\n\n  pen.moveTo(end0.x, end0.y)\n  pen.quadraticBezierTo(end_c2.x, end_c2.y, radius_p_2.x, radius_p_2.y)\n  pen.quadraticBezierTo(end3.x, end3.y, radius_p_1.x, radius_p_1.y)\n  pen.quadraticBezierTo(end_c1.x, end_c1.y, end2.x, end2.y)\n\n  const controlLength = _l * 0.5\n  //path.closePath()\n  //glyph.addComponent(path)\n\n  const c = new FP.Joint(\n    'c',\n    {\n      x: end2.x - controlLength * Math.cos(Math.atan(getK(contour2[0].end, contour2[0].control2))),\n      y: end2.y + controlLength * Math.sin(Math.atan(getK(contour2[0].end, contour2[0].control2))),\n    },\n  )\n\n  //pen.moveTo(lastX, lastY)\n  //pen.quadraticBezierTo(c.x, c.y, end2.x, end2.y)\n  pen.bezierTo(contour2[0].control2.x, contour2[0].control2.y, contour2[0].control1.x, contour2[0].control1.y, start2.x, start2.y)\n  \n  \n  const getAngle = (p1, p2) => {\n    if (p2.x === p1.x) return 90\n    if (p2.y === p1.y && p2.x > p1.x) return 180\n    if (p2.x > p1.x) {\n      return 180 - toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n    }\n    return -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n  }\n  const startPoints = []\n  let startCurve\n  {\n    const path = new FP.PolygonComponent()\n    path.beginPath()\n    let delta = 1\n    const angle1 = Math.round(getAngle(start, start2))\n    const angle2 = Math.round(getAngle(start, start1))\n    const angle3 = Math.round(getAngle(start, start0))\n    const l1 = distance(start, start2)\n    const l2 = distance(start, start1)\n    const l3 = distance(start, start0)\n    const pow = 0.5\n    let r = l1\n    let sum = 0\n    for (let i = 0; i <= angle2 - angle1; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a1 = (l2 - l1) / sum\n    const n1 = angle2 - angle1\n    sum = 0\n    for (let i = 0; i <= angle3 - angle2; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a2 = (l3 - l2) / sum\n    const n2 = angle3 - angle2\n    const d = 0\n    for (let i = angle1; i <= angle3; i++) {\n      let _i = i\n      if (i >= angle1 && i < angle2) {\n        _i = i - angle1\n        delta = a1 * Math.pow((n1 - _i), pow)\n      }\n      if (i >= angle2 && i < angle3) {\n        _i = i - angle2\n        delta = a2 * Math.pow((i - angle2), pow)\n      }\n      const _r = r + d * (-0.5 + Math.random())\n      r += delta\n      //console.log(r, delta)\n      const angle = Math.PI / 180 * i\n      const x = start.x - _r * Math.cos(angle)\n      const y = start.y - _r * Math.sin(angle)\n      if (i === angle1) {\n        path.moveTo(x, y)\n      } else {\n        path.lineTo(x, y)\n      }\n      startPoints.push({x, y})\n    }\n    path.closePath()\n    //glyph.addComponent(path)\n    //startCurve = FP.fitCurve(startPoints, 2)\n  }\n  const curve = FP.fitCurve(startPoints, 2)\n  for (let i = 0; i < curve.length; i++) {\n    const bezier = curve[i]\n    pen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  }\n\n  pen.bezierTo(contour1[0].control1.x, contour1[0].control1.y, contour1[0].control2.x, contour1[0].control2.y, contour1[0].end.x, contour1[0].end.y)\n  pen.closePath()\n  glyph.addComponent(pen)\n\n  // const _x = end.x + l * Math.cos(angle_2)\n  // const _y = end.y + l * Math.sin(angle_2)\n  // -(end0.y - _y) / (end0.x - _x) = k\n\n  // -(end0.y - (end.y + l * Math.sin(angle_2))) / (end0.x - (end.x + l * Math.cos(angle_2))) = k\n\n  glyph.addJoint(start)\n  glyph.addJoint(bend)\n  glyph.addJoint(end)\n  glyph.addJoint(start0)\n  glyph.addJoint(start1)\n  glyph.addJoint(start2)\n  glyph.addJoint(end0)\n  glyph.addJoint(end1)\n  glyph.addJoint(end2)\n  glyph.addJoint(end3)\n  glyph.addJoint(control)\n  glyph.addJoint(control2)\n  glyph.addJoint(control3)\n  glyph.addJoint(control4)\n  glyph.addJoint(end_c1)\n  glyph.addJoint(end_c2)\n  glyph.addJoint(radius_p_1)\n  glyph.addJoint(radius_p_2)\n  // console.log('p', end_c2.x, end_c2.y)\n\n  const refline = (p1, p2) => {\n    return {\n      name: `${p1.name}-${p2.name}`,\n      start: p1.name,\n      end: p2.name,\n    }\n  }\n  glyph.addRefLine(refline(end1, start))\n  glyph.addRefLine(refline(start0, control4))\n  glyph.addRefLine(refline(start2, control3))\n  glyph.addRefLine(refline(end2, control))\n  glyph.addRefLine(refline(end0, control2))\n  glyph.addRefLine(refline(end0, end2))\n  glyph.addRefLine(refline(start0, start2))\n  glyph.addRefLine(refline(end0, end_c2))\n  glyph.addRefLine(refline(end3, end_c1))\n  glyph.addRefLine(refline(end3, end_c2))\n  glyph.addRefLine(refline(end2, end_c1))\n}","objData":{"_joints":[{"_x":300,"_y":300,"uuid":"SYIk8INWPP2zpOsOIhffa","name":"start"},{"_x":412.0915800425926,"_y":513.9149565334554,"uuid":"S4_lqfCVFZb0KxyhFH4x4","name":"bend"},{"_x":626.0065365760481,"_y":626.0065365760481,"uuid":"c3NjVVErsRtmLIi0wJavZ","name":"end"},{"_x":311.8355509665767,"_y":293.7981633915779,"uuid":"TQ55dHKSz_bT8er849ADF","name":"start0"},{"_x":296.28688124028014,"_y":292.91390452532454,"uuid":"6Zv8VrwlruUDh8osb3Ixb","name":"start1"},{"_x":288.1644490334233,"_y":306.2018366084221,"uuid":"mkqSvbeItrBgCGrgrKM7R","name":"start2"},{"_x":644.6741725994856,"_y":588.4033602056967,"uuid":"MwzWinXd7sd91J6UYlPym","name":"end0"},{"_x":700,"_y":700,"uuid":"I-BzWD6mxmd10kISOLTcQ","name":"end1"},{"_x":605.6283954873549,"_y":662.712165719047,"uuid":"OxhOqS06AU9_ZpCcD3ZBz","name":"end2"},{"_x":780.588798614881,"_y":619.411201385119,"uuid":"MP9A3GU2CtEmXBaQyPijY","name":"end3"},{"_x":465.5954175773196,"_y":578.6575506711794,"uuid":"CnGbbZ5A5LxckSFN7ZSFC","name":"control"},{"_x":505.84365513944925,"_y":526.1223967732329,"uuid":"Ly_9SkIdSI4PmY48ECAZy","name":"control2"},{"_x":355.44304436330987,"_y":455.02288689914303,"uuid":"f6a_MNt38ZmfpQ6A1ysfe","name":"control3"},{"_x":390.49091577601075,"_y":424.07354516241446,"uuid":"8ZLddMnlPAsYvEWcmkHQa","name":"control4"},{"_x":696.515041715093,"_y":703.4849582849067,"uuid":"Edu8ca08ifsNaZdFeXh_t","name":"end_c1"},{"_x":676.1570809189898,"_y":607.3009354688846,"uuid":"01XOH1xEwkLnGYt9ayJ7Z","name":"end_c2"},{"_x":766.9353866965834,"_y":633.0646133034166,"uuid":"s9wkQEoIQRkbG94rgHE4-","name":"radius_p_1"},{"_x":761.7636571146492,"_y":615.1163950428405,"uuid":"KPfAxyMwBVK6qydButoq0","name":"radius_p_2"}],"_reflines":[{"name":"end1-start","start":"end1","end":"start"},{"name":"start0-control4","start":"start0","end":"control4"},{"name":"start2-control3","start":"start2","end":"control3"},{"name":"end2-control","start":"end2","end":"control"},{"name":"end0-control2","start":"end0","end":"control2"},{"name":"end0-end2","start":"end0","end":"end2"},{"name":"start0-start2","start":"start0","end":"start2"},{"name":"end0-end_c2","start":"end0","end":"end_c2"},{"name":"end3-end_c1","start":"end3","end":"end_c1"},{"name":"end3-end_c2","start":"end3","end":"end_c2"},{"name":"end2-end_c1","start":"end2","end":"end_c1"}],"_components":[{"points":[{"uuid":"B0DrHB9h3Lu3zHHGHvXOt","type":"anchor","x":644.6741725994856,"y":588.4033602056967,"origin":null},{"uuid":"zIZS_zIM8RiZ7vrUY5C_B","type":"control","x":665.6627781458217,"y":601.0017437144886,"origin":"B0DrHB9h3Lu3zHHGHvXOt"},{"uuid":"Yfc_eHZW7LDJaL8Q5hr3W","type":"control","x":704.6926063175429,"y":609.9060886602033,"origin":"fAioLK5GeAgWJINZomPTC"},{"uuid":"fAioLK5GeAgWJINZomPTC","type":"anchor","x":761.7636571146492,"y":615.1163950428405,"origin":null},{"uuid":"cJh1ZtXQRQYEMO-wsj4-i","type":"control","x":774.313751448137,"y":617.9795992710262,"origin":"fAioLK5GeAgWJINZomPTC"},{"uuid":"IqPjm9JfEYcVwQWZkm6QS","type":"control","x":776.0376613087817,"y":623.9623386912183,"origin":"fJzbBy2stmPBTDo5zwJJl"},{"uuid":"fJzbBy2stmPBTDo5zwJJl","type":"anchor","x":766.9353866965834,"y":633.0646133034166,"origin":null},{"uuid":"9qoFw6VH2wSSnzb7FAVj2","type":"control","x":719.9884900422564,"y":680.0115099577433,"origin":"fJzbBy2stmPBTDo5zwJJl"},{"uuid":"M-7aiU2FI9bin3uxoZ0EE","type":"control","x":666.2194929725136,"y":689.8940274296201,"origin":"T8rY8BHzvOe4rdUy8ZAIr"},{"uuid":"T8rY8BHzvOe4rdUy8ZAIr","type":"anchor","x":605.6283954873549,"y":662.712165719047,"origin":null},{"uuid":"HhtfG35ow9KJyso_RydGy","type":"control","x":465.5954175773196,"y":578.6575506711794,"origin":"T8rY8BHzvOe4rdUy8ZAIr"},{"uuid":"3juzQS7RZ16ElIdQd7G5L","type":"control","x":355.44304436330987,"y":455.02288689914303,"origin":"AqFOBVjlEmHDZjquMEy3N"},{"uuid":"AqFOBVjlEmHDZjquMEy3N","type":"anchor","x":288.1644490334233,"y":306.2018366084221,"origin":null},{"uuid":"iaxG3yrnFDSPKbpJe2hgO","type":"control","x":286.83022285666937,"y":294.45627364417146,"origin":"AqFOBVjlEmHDZjquMEy3N"},{"uuid":"77uwrbaIK4ly2RXVzy4NX","type":"control","x":302.686282142596,"y":286.02561336141014,"origin":"0XqG9WpXwwZy5zRO4kbFG"},{"uuid":"0XqG9WpXwwZy5zRO4kbFG","type":"anchor","x":311.7196640143076,"y":293.768544107689,"origin":null},{"uuid":"bEGt8KonjN6nN7jCEVQgM","type":"control","x":390.49091577601075,"y":424.07354516241446,"origin":"0XqG9WpXwwZy5zRO4kbFG"},{"uuid":"9h-LS8pRFOL9qddowqB6M","type":"control","x":505.84365513944925,"y":526.1223967732329,"origin":"MrLSNa1a7_jfxjUykhjgk"},{"uuid":"MrLSNa1a7_jfxjUykhjgk","type":"anchor","x":644.6741725994856,"y":588.4033602056967,"origin":null}],"type":"glyph-pen","hasPathBegan":false,"usedInCharacter":true,"contour":[{"type":2,"start":{"x":644.6741725994856,"y":211.59663979430331},"end":{"x":761.7636571146492,"y":184.8836049571595},"control1":{"x":665.6627781458217,"y":198.9982562855114},"control2":{"x":704.6926063175429,"y":190.0939113397967},"fill":false},{"type":2,"start":{"x":761.7636571146492,"y":184.8836049571595},"end":{"x":766.9353866965834,"y":166.93538669658335},"control1":{"x":774.313751448137,"y":182.02040072897375},"control2":{"x":776.0376613087817,"y":176.0376613087817},"fill":false},{"type":2,"start":{"x":766.9353866965834,"y":166.93538669658335},"end":{"x":605.6283954873549,"y":137.287834280953},"control1":{"x":719.9884900422564,"y":119.98849004225667},"control2":{"x":666.2194929725136,"y":110.10597257037989},"fill":false},{"type":2,"start":{"x":605.6283954873549,"y":137.287834280953},"end":{"x":288.1644490334233,"y":493.7981633915779},"control1":{"x":465.5954175773196,"y":221.34244932882063},"control2":{"x":355.44304436330987,"y":344.97711310085697},"fill":false},{"type":2,"start":{"x":288.1644490334233,"y":493.7981633915779},"end":{"x":311.7196640143076,"y":506.231455892311},"control1":{"x":286.83022285666937,"y":505.54372635582854},"control2":{"x":302.686282142596,"y":513.9743866385899},"fill":false},{"type":2,"start":{"x":311.7196640143076,"y":506.231455892311},"end":{"x":644.6741725994856,"y":211.59663979430331},"control1":{"x":390.49091577601075,"y":375.92645483758554},"control2":{"x":505.84365513944925,"y":273.87760322676706},"fill":false}],"preview":[{"type":2,"start":{"x":64.46741725994856,"y":58.84033602056967},"end":{"x":76.17636571146492,"y":61.511639504284055},"control1":{"x":66.56627781458216,"y":60.100174371448865},"control2":{"x":70.4692606317543,"y":60.99060886602033},"fill":false},{"type":2,"start":{"x":76.17636571146492,"y":61.511639504284055},"end":{"x":76.69353866965834,"y":63.30646133034167},"control1":{"x":77.43137514481371,"y":61.797959927102625},"control2":{"x":77.60376613087817,"y":62.39623386912183},"fill":false},{"type":2,"start":{"x":76.69353866965834,"y":63.30646133034167},"end":{"x":60.56283954873549,"y":66.2712165719047},"control1":{"x":71.99884900422565,"y":68.00115099577434},"control2":{"x":66.62194929725136,"y":68.98940274296201},"fill":false},{"type":2,"start":{"x":60.56283954873549,"y":66.2712165719047},"end":{"x":28.81644490334233,"y":30.620183660842216},"control1":{"x":46.559541757731964,"y":57.86575506711794},"control2":{"x":35.54430443633099,"y":45.50228868991431},"fill":false},{"type":2,"start":{"x":28.81644490334233,"y":30.620183660842216},"end":{"x":31.171966401430765,"y":29.376854410768903},"control1":{"x":28.683022285666937,"y":29.44562736441715},"control2":{"x":30.2686282142596,"y":28.602561336141015},"fill":false},{"type":2,"start":{"x":31.171966401430765,"y":29.376854410768903},"end":{"x":64.46741725994856,"y":58.84033602056967},"control1":{"x":39.049091577601075,"y":42.40735451624145},"control2":{"x":50.58436551394493,"y":52.612239677323295},"fill":false}]}]}},{"uuid":"t9oy8GBS2xraFLBUx4g57","type":"system","name":"点","components":[],"groups":[],"orderedList":[],"selectedComponentsUUIDs":[],"view":{"zoom":100,"translateX":0,"translateY":0},"parameters":[{"uuid":"e2YJPEaI-L9SdQnC3oLx3","name":"length","type":0,"value":80,"min":50,"max":500},{"uuid":"3RSzeMFxGcpzrcKt0YJ-k","name":"weight","type":0,"value":40,"min":20,"max":100},{"uuid":"Sh2WWXSfYDqOUXavI8pw9","name":"angle","type":0,"value":48,"min":-89,"max":89},{"uuid":"mzq8BvSzX6ApNAC9tArvM","name":"weightVariation","type":0,"value":0.35,"min":0.1,"max":1}],"joints":[],"reflines":[],"script":"function script_t9oy8GBS2xraFLBUx4g57 (glyph, constants, FP) {\n\t//Todo something\n\tconst length = glyph.getParam('length')\n  const startVariation = glyph.getParam('startVariation')\n  const endVariation = glyph.getParam('endVariation')\n  const weightVariation = glyph.getParam('weightVariation')\n  const angle = glyph.getParam('angle') / 180 * Math.PI\n  const weight = glyph.getParam('weight') || 40\n  // const weight = constants.get('weight')\n  const ox = 500\n  const oy = 500\n  const startRatio = weight * 0.4 / length\n  const endRatio = weight * weightVariation * 0.4 / length\n\n  const toRadian = (degree) => Math.PI / 180 * degree\n  const toDegree = (radian) => radian / Math.PI * 180\n\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  const start0 = new FP.Joint(\n    'start0',\n    {\n      x: ox - (length / 2 - length * startRatio) * Math.sin(angle),\n      y: oy - (length / 2 - length * startRatio) * Math.cos(angle),\n    },\n  )\n\n  const start1 = new FP.Joint(\n    'start1',\n    {\n      x: start0.x - weight / 2 * Math.cos(angle),\n      y: start0.y + weight / 2 * Math.sin(angle),\n    },\n  )\n\n  const start2 = new FP.Joint(\n    'start2',\n    {\n      x: ox - length / 2 * Math.sin(angle),\n      y: oy - length / 2 * Math.cos(angle),\n    },\n  )\n\n  const start3 = new FP.Joint(\n    'start3',\n    {\n      x: start0.x + weight / 2 * Math.cos(angle),\n      y: start0.y - weight / 2 * Math.sin(angle),\n    },\n  )\n\n  const end0 = new FP.Joint(\n    'end0',\n    {\n\t\t\tx: ox + (length / 2 - length * endRatio) * Math.sin(angle),\n      y: oy + (length / 2 - length * endRatio) * Math.cos(angle),\n    },\n  )\n\n  const end1 = new FP.Joint(\n    'end1',\n    {\n      x: end0.x - weight * weightVariation / 2 * Math.cos(angle),\n      y: end0.y + weight * weightVariation / 2 * Math.sin(angle),\n    },\n  )\n\n  const end2 = new FP.Joint(\n    'end2',\n    {\n      x: ox + length / 2 * Math.sin(angle),\n      y: oy + length / 2 * Math.cos(angle),\n    },\n  )\n\n  const end3 = new FP.Joint(\n    'end3',\n    {\n      x: end0.x + weight * weightVariation / 2 * Math.cos(angle),\n      y: end0.y - weight * weightVariation / 2 * Math.sin(angle),\n    },\n  )\n\n  glyph.addJoint(start0)\n  glyph.addJoint(start1)\n  glyph.addJoint(start2)\n  glyph.addJoint(start3)\n\n  glyph.addJoint(end0)\n  glyph.addJoint(end1)\n  glyph.addJoint(end2)\n  glyph.addJoint(end3)\n\n  const getAngle = (p1, p2) => {\n    if (p2.x === p1.x) return 90\n    if (p2.y === p1.y && p2.x > p1.x) return 180\n\t\tconst k = -(p2.y - p1.y) / (p2.x - p1.x)\n\t\tif (angle > 0) {\n\t\t\tif (p2.x > p1.x && p2.y < p1.y) {\n\t\t\t\treturn -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x))) + 180\n\t\t\t}\n\t\t\treturn -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n\t\t} else {\n\t\t\tif (p2.x > p1.x && p2.y < p1.y) {\n\t\t\t\treturn -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x))) + 180\n\t\t\t} else if (p2.x > p1.x && p2.y > p1.y) {\n\t\t\t\treturn -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x))) + 180\n\t\t\t}\n\t\t\treturn -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n\t\t}\n  }\n\n  const startPoints = []\n  const endPoints = []\n  let startCurve, endCurve\n  {\n    const path = new FP.PolygonComponent()\n    path.beginPath()\n    let delta = 1\n    const angle1 = Math.round(getAngle(start0, start1))\n    const angle2 = Math.round(getAngle(start0, start2))\n    const angle3 = Math.round(getAngle(start0, start3))\n    const l1 = distance(start0, start1)\n    const l2 = distance(start0, start2)\n    const l3 = distance(start0, start3)\n    const pow = 0.5\n    let r = l1\n    let sum = 0\n    for (let i = 0; i <= angle2 - angle1; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a1 = (l2 - l1) / sum\n    const n1 = angle2 - angle1\n    sum = 0\n    for (let i = 0; i <= angle3 - angle2; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a2 = (l3 - l2) / sum\n    const n2 = angle3 - angle2\n    const d = 0\n    for (let i = angle1; i <= angle3; i++) {\n      let _i = i\n      if (i >= angle1 && i < angle2) {\n        _i = i - angle1\n        delta = a1 * Math.pow((n1 - _i), pow)\n      }\n      if (i >= angle2 && i < angle3) {\n        _i = i - angle2\n        delta = a2 * Math.pow((i - angle2), pow)\n      }\n      const _r = r + d * (-0.5 + Math.random())\n      r += delta\n      //console.log(r, delta)\n      const angle = Math.PI / 180 * i\n      const x = start0.x - _r * Math.cos(angle)\n      const y = start0.y - _r * Math.sin(angle)\n      if (i === angle1) {\n        path.moveTo(x, y)\n      } else {\n        path.lineTo(x, y)\n      }\n      startPoints.push({x, y})\n    }\n    path.closePath()\n    //glyph.addComponent(path)\n    startCurve = FP.fitCurve(startPoints, 2)\n  }\n\n  // 顺时针\n  const globalPath = new FP.PenComponent()\n  globalPath.beginPath()\n\n  // const curve = FP.fitCurve(startPoints.reverse(), 2)\n  // for (let i = 0; i < curve.length; i++) {\n  //   const bezier = curve[i]\n  //   if (i === 0) {\n  //     globalPath.moveTo(bezier[0].x, bezier[0].y)\n  //   }\n  //   globalPath.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // }\n\n  const curve = FP.fitCurve(startPoints.reverse(), 2)\n  for (let i = curve.length - 1; i >= 0; i--) {\n    const bezier = curve[i]\n    if (i === curve.length - 1) {\n      globalPath.moveTo(bezier[3].x, bezier[3].y)\n    }\n    globalPath.bezierTo(bezier[2].x, bezier[2].y, bezier[1].x, bezier[1].y, bezier[0].x, bezier[0].y)\n  }\n\n\t{\n    const path = new FP.PolygonComponent()\n    path.beginPath()\n    let delta = 1\n    const angle1 = -Math.round(getAngle(end0, end1))\n    const angle2 = 180 - Math.round(getAngle(end0, end2))\n    const angle3 = 360 - Math.round(getAngle(end0, end3))\n    const l1 = distance(end0, end1)\n    const l2 = distance(end0, end2)\n    const l3 = distance(end0, end3)\n    const pow = 0.5\n    let r = l1\n    let sum = 0\n    for (let i = 0; i <= angle2 - angle1; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a1 = (l2 - l1) / sum\n    const n1 = angle2 - angle1\n    sum = 0\n    for (let i = 0; i <= angle3 - angle2; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a2 = (l3 - l2) / sum\n    const n2 = angle3 - angle2\n    const d = 0\n    for (let i = angle1; i <= angle3; i++) {\n      let _i = i\n      if (i >= angle1 && i < angle2) {\n        _i = i - angle1\n        delta = a1 * Math.pow((n1 - _i), pow)\n      }\n      if (i >= angle2 && i < angle3) {\n        _i = i - angle2\n        delta = a2 * Math.pow((i - angle2), pow)\n      }\n      const _r = r + d * (-0.5 + Math.random())\n      r += delta\n      //console.log(r, delta)\n      const angle = Math.PI / 180 * i\n      const x = end0.x - _r * Math.cos(angle)\n      const y = end0.y + _r * Math.sin(angle)\n      if (i === angle1) {\n        path.moveTo(x, y)\n      } else {\n        path.lineTo(x, y)\n      }\n      endPoints.push({x, y})\n    }\n    path.closePath()\n    //glyph.addComponent(path)\n    endCurve = FP.fitCurve(endPoints, 2)\n  }\n\n\t//globalPath.lineTo(end1.x, end1.y)\n\n  // for (let i = 0; i < endCurve.length; i++) {\n  //   const bezier = endCurve[i]\n  //   globalPath.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // }\n\n  // // globalPath.quadraticBezierTo(end_c1.x, end_c1.y, end2.x, end2.y)\n  // // globalPath.quadraticBezierTo(end_c2.x, end_c2.y, end3.x, end3.y)\n  // globalPath.lineTo(start3.x, start3.y)\n\n  globalPath.lineTo(end3.x, end3.y)\n\n  for (let i = endCurve.length - 1; i >= 0; i--) {\n    const bezier = endCurve[i]\n    globalPath.bezierTo(bezier[2].x, bezier[2].y, bezier[1].x, bezier[1].y, bezier[0].x, bezier[0].y)\n  }\n  globalPath.lineTo(start1.x, start1.y)\n  \n  globalPath.closePath()\n  glyph.addComponent(globalPath)\n}","objData":{"_joints":[{"_x":482.16452418854254,"_y":483.9408654473874,"uuid":"vxxuFdQEiyKXD-rLSvNxl","name":"start0"},{"_x":468.7819120613654,"_y":498.8037619569353,"uuid":"Sad_81jeMTUR-5puFsLFI","name":"start1"},{"_x":470.27420698090424,"_y":473.23477574564566,"uuid":"CgiB64f1FoRB5QFTzPkB_","name":"start2"},{"_x":495.5471363157197,"_y":469.0779689378395,"uuid":"Hm7cTVSDFBb1SbdSgxxEH","name":"start3"},{"_x":525.5641819964223,"_y":523.0180928587447,"uuid":"o8Er7eRabDC6djrhvx8vf","name":"end0"},{"_x":520.8802677519103,"_y":528.2201066370865,"uuid":"Z61vzTjCPeTAn_ZEmaxOr","name":"end1"},{"_x":529.7257930190958,"_y":526.7652242543543,"uuid":"3vdaynuS92fkjJ3Ax8vqD","name":"end2"},{"_x":530.2480962409344,"_y":517.8160790804029,"uuid":"_SYa_wd1Hmro-AhBwaWE0","name":"end3"}],"_reflines":[],"_components":[{"points":[{"uuid":"5Gvvwx5m4XpGWyvrjy9CQ","type":"anchor","x":468.7819120613654,"y":498.8037619569353,"origin":null},{"uuid":"D_mSy-kWbbuSFSELSJENn","type":"control","x":455.8995941831345,"y":481.55475451799043,"origin":"5Gvvwx5m4XpGWyvrjy9CQ"},{"uuid":"-E699Z_GDxm50fC37TqJe","type":"control","x":477.0057219318775,"y":458.110277773464,"origin":"v4FfLlSOYrlgScYUWvi0W"},{"uuid":"v4FfLlSOYrlgScYUWvi0W","type":"anchor","x":495.5028805848373,"y":469.12711990641037,"origin":null},{"uuid":"3niTuyIv8Ve738SQLaHM6","type":"control","x":495.5028805848373,"y":469.12711990641037,"origin":"v4FfLlSOYrlgScYUWvi0W"},{"uuid":"eH6wGpGSIzs6Ldgj5Z_CN","type":"control","x":530.2480962409344,"y":517.8160790804029,"origin":"vsWtgNsPHRjsHcf1MnjU-"},{"uuid":"vsWtgNsPHRjsHcf1MnjU-","type":"anchor","x":530.2480962409344,"y":517.8160790804029,"origin":null},{"uuid":"l2JXU8sTJu3p3s1bskkj_","type":"control","x":534.7440963358731,"y":523.8687714158889,"origin":"vsWtgNsPHRjsHcf1MnjU-"},{"uuid":"BdLXvyTJhJY6MjQbVxyfK","type":"control","x":527.3556473137969,"y":532.0731638704655,"origin":"wQEEBfk8L4d_-NkoHAFjL"},{"uuid":"wQEEBfk8L4d_-NkoHAFjL","type":"anchor","x":520.8802677519103,"y":528.2201066370865,"origin":null},{"uuid":"6usOBH5N8CJfhTVhDoxiG","type":"control","x":520.8802677519103,"y":528.2201066370865,"origin":"wQEEBfk8L4d_-NkoHAFjL"},{"uuid":"pc4ppWsIQlA3mn7oL9wJY","type":"control","x":468.7819120613654,"y":498.8037619569353,"origin":"TzJu_2Ugsm7GknFg8T54l"},{"uuid":"TzJu_2Ugsm7GknFg8T54l","type":"anchor","x":468.7819120613654,"y":498.8037619569353,"origin":null}],"type":"glyph-pen","hasPathBegan":false,"usedInCharacter":true,"contour":[{"type":2,"start":{"x":468.7819120613654,"y":301.1962380430647},"end":{"x":495.5028805848373,"y":330.87288009358963},"control1":{"x":455.8995941831345,"y":318.44524548200957},"control2":{"x":477.0057219318775,"y":341.8897222265359},"fill":false},{"type":2,"start":{"x":495.5028805848373,"y":330.87288009358963},"end":{"x":530.2480962409344,"y":282.1839209195971},"control1":{"x":495.5028805848373,"y":330.87288009358963},"control2":{"x":530.2480962409344,"y":282.1839209195971},"fill":false},{"type":2,"start":{"x":530.2480962409344,"y":282.1839209195971},"end":{"x":520.8802677519103,"y":271.7798933629135},"control1":{"x":534.7440963358731,"y":276.1312285841111},"control2":{"x":527.3556473137969,"y":267.92683612953454},"fill":false},{"type":2,"start":{"x":520.8802677519103,"y":271.7798933629135},"end":{"x":468.7819120613654,"y":301.1962380430647},"control1":{"x":520.8802677519103,"y":271.7798933629135},"control2":{"x":468.7819120613654,"y":301.1962380430647},"fill":false}],"preview":[{"type":2,"start":{"x":46.87819120613654,"y":49.880376195693536},"end":{"x":49.55028805848374,"y":46.91271199064104},"control1":{"x":45.589959418313455,"y":48.15547545179905},"control2":{"x":47.70057219318775,"y":45.8110277773464},"fill":false},{"type":2,"start":{"x":49.55028805848374,"y":46.91271199064104},"end":{"x":53.02480962409344,"y":51.78160790804029},"control1":{"x":49.55028805848374,"y":46.91271199064104},"control2":{"x":53.02480962409344,"y":51.78160790804029},"fill":false},{"type":2,"start":{"x":53.02480962409344,"y":51.78160790804029},"end":{"x":52.08802677519103,"y":52.82201066370865},"control1":{"x":53.474409633587314,"y":52.38687714158889},"control2":{"x":52.7355647313797,"y":53.207316387046546},"fill":false},{"type":2,"start":{"x":52.08802677519103,"y":52.82201066370865},"end":{"x":46.87819120613654,"y":49.880376195693536},"control1":{"x":52.08802677519103,"y":52.82201066370865},"control2":{"x":46.87819120613654,"y":49.880376195693536},"fill":false}]}]}},{"uuid":"D2-UoqGI-3fFJm1rqptzB","type":"system","name":"竖撇","components":[],"groups":[],"orderedList":[],"selectedComponentsUUIDs":[],"view":{"zoom":100,"translateX":0,"translateY":0},"parameters":[{"uuid":"4xuZtOAoMTeDS8tvYHUh2","name":"weight","type":0,"value":40,"min":20,"max":100},{"uuid":"Evg4_1VD9b2MXyA6AFnbl","name":"upSpan","type":0,"value":485,"min":50,"max":1000},{"uuid":"t_nRX8UOiurxwPNZvjfYP","name":"起笔端点","type":2,"value":{"radius":{"name":"端点长度","min":0,"max":50,"value":20},"degree":{"name":"角度","min":-30,"max":30,"value":0},"params":[{"name":"上切角","min":-30,"max":30,"value":10},{"name":"左切角","min":-30,"max":30,"value":-10},{"name":"右切角","min":-30,"max":30,"value":10}]},"min":0,"max":1000},{"uuid":"GQiZd6Ff7YiJ13Yqpy5sO","name":"起笔顿笔","type":2,"value":{"radius":{"name":"顿笔长度","min":0,"max":50,"value":20},"degree":{"name":"顿笔角度","min":-30,"max":30,"value":0},"params":[{"name":"粗细","min":0.5,"max":2,"value":1}]},"min":0,"max":1000},{"uuid":"WL8iQB-99sI2le4VXDpOR","name":"leftSpan","type":0,"value":200,"min":50,"max":800},{"uuid":"KCg35HEHMqQ7kfyYIS6st","name":"downSpan","type":0,"value":255,"min":50,"max":800},{"uuid":"m2jV4AhaRJLh91Yd2VP-N","name":"收笔","type":2,"value":{"radius":{"name":"radius","min":0,"max":100,"value":20},"degree":{"name":"step","min":0,"max":30,"value":30},"params":[{"name":"hook","min":0,"max":25,"value":11},{"name":"variation","min":1,"max":2,"value":1.58},{"name":"ratio","min":0.3,"max":0.5,"value":0.3}]},"min":0,"max":1000}],"joints":[],"reflines":[],"script":"function script_D2_UoqGI_3fFJm1rqptzB (glyph, constants, FP) {\n\t//Todo something\n  \n  const ox = 500\n  const oy = 500\n  const shu_length = glyph.getParam('upSpan')\n  const weight = glyph.getParam('weight') || 40\n\n  const starter = glyph.getParam('起笔端点')\n  const starter_1 = glyph.getParam('起笔顿笔')\n\n  const bending = glyph.getParam('bending')\n  // const startRatio = glyph.getParam('startVariation')\n  // const endRatio = glyph.getParam('endVariation')\n  const ending = glyph.getParam('收笔')\n  const leftSpan = glyph.getParam('leftSpan')\n  const downSpan = glyph.getParam('downSpan')\n  const pie_length = Math.sqrt(leftSpan * leftSpan + downSpan * downSpan)\n  const angle = Math.atan2(downSpan, leftSpan)\n\n  const getCoordY = (canvasY) => {\n    return -(canvasY - 500)\n  }\n\n  const getCanvasY = (coordY) => {\n    return -coordY + 500\n  }\n\n  const toDegree = (radian) => radian / Math.PI * 180\n  const toRadian = (degree) => Math.PI / 180 * degree\n\n  const getK = (p1, p2) => {\n    return -(p2.y - p1.y) / (p2.x - p1.x)\n  }\n\n  const getK2 = (p1, p2) => {\n    return -(p2.x - p1.x) / (p2.y - p1.y)\n  }\n\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  const intersection = (k1, x1, y1, k2, x2, y2) => {\n    if (k1 === Infinity || k1 === -Infinity) {\n      const x = x1\n      const y = k2 * (x - x2) + y2\n      return {\n        x, y,\n      }\n    } else if (k2 === Infinity || k2 === -Infinity) {\n      const x = x2\n      const y = k1 * (x - x1) + y1\n      return {\n        x, y,\n      }\n    }\n    const x = ((y2 - y1) + (k1 * x1 - k2 * x2)) / (k1 - k2)\n    const y = (-k1 * y2 + k2 * y1 + (x2 - x1) * k1 * k2) / (k2 - k1)\n    return {\n      x, y,\n    }\n  }\n\n  const start_turns = [\n    {\n      angle: starter.degree.value,\n      step_top: starter.params[0].value,\n      step_left: starter.params[1].value,\n      step_right: starter.params[2].value,\n      length: starter.radius.value,\n    },\n    {\n      angle: starter_1.degree.value,\n      weight: starter_1.params[0].value * weight,\n      length: starter_1.radius.value,\n    },\n    {\n      angle: 0,\n      weight: weight,\n      length: shu_length * 0,\n    },\n  ]\n\n  const length = downSpan + shu_length\n\n  const start_turn_1_y = oy - length / 2\n  const start_turn_1_a = -toRadian(start_turns[2].angle + start_turns[1].angle + start_turns[0].angle)\n  const start_turn_2_y = start_turn_1_y + start_turns[0].length * Math.cos(start_turn_1_a)\n  const start_turn_2_a = -toRadian(start_turns[2].angle + start_turns[1].angle)\n  const start_turn_3_y = start_turn_2_y + start_turns[1].length * Math.cos(start_turn_2_a)\n  const start_turn_3_a = -toRadian(start_turns[2].angle)\n  const start_y = start_turn_3_y + start_turns[2].length * Math.cos(start_turn_3_a)\n  const end_y = start_turn_1_y + shu_length\n\n  const start_x = ox\n  const start_turn_3_x = start_x + start_turns[2].length * Math.sin(start_turn_3_a)\n  const start_turn_2_x = start_turn_3_x + start_turns[1].length * Math.sin(start_turn_2_a)\n  const start_turn_1_x = start_turn_2_x + start_turns[0].length * Math.sin(start_turn_1_a)\n  const end_x = ox\n\n  const start_turn_1 = new FP.Joint(\n    'start_turn_1',\n    {\n      x: start_turn_1_x,\n      y: start_turn_1_y,\n    },\n  )\n  const start_turn_2 = new FP.Joint(\n    'start_turn_2',\n    {\n      x: start_turn_2_x,\n      y: start_turn_2_y,\n    },\n  )\n  const start_turn_3 = new FP.Joint(\n    'start_turn_3',\n    {\n      x: start_turn_3_x,\n      y: start_turn_3_y,\n    },\n  )\n  const start_turn_2_left = new FP.Joint(\n    'start_turn_2_left',\n    {\n      x: start_turn_2_x - start_turns[1].weight / 2 * Math.cos(start_turn_2_a),\n      y: start_turn_2_y - start_turns[1].weight / 2 * Math.sin(start_turn_2_a),\n    },\n  )\n  const start_turn_2_right = new FP.Joint(\n    'start_turn_2_right',\n    {\n      x: start_turn_2_x + start_turns[1].weight / 2 * Math.cos(start_turn_2_a),\n      y: start_turn_2_y + start_turns[1].weight / 2 * Math.sin(start_turn_2_a),\n    },\n  )\n  const start = new FP.Joint(\n    'start',\n    {\n      x: start_x,\n      y: start_y,\n    },\n  )\n  const end = new FP.Joint(\n    'end',\n    {\n      x: end_x,\n      y: end_y,\n    },\n  )\n\n  const start_left = new FP.Joint(\n    'start_left',\n    {\n      x: start.x - weight / 2,\n      y: start.y,\n    },\n  )\n  const start_right = new FP.Joint(\n    'start_right',\n    {\n      x: start.x + weight / 2,\n      y: start.y,\n    },\n  )\n  const end_left = new FP.Joint(\n    'end_left',\n    {\n      x: end.x - weight / 2,\n      y: end.y,\n    },\n  )\n  const end_right= new FP.Joint(\n    'end_right',\n     {\n      x: end.x + weight / 2,\n      y: end.y,\n    },\n  )\n\n  const start_turn_2_left_a = Math.atan(getK(start_left, start_turn_2_left))\n  const start_turn_2_right_a = Math.atan(getK(start_right, start_turn_2_right))\n\n  const getPointAtPercentage = (start, end, percentage) => {\n    var x = start.x + (end.x - start.x) * percentage;\n    var y = start.y + (end.y - start.y) * percentage;\n    return { x: x, y: y };\n  }\n  let _start_turn_2_left_control_1 = intersection(\n    Math.tan(start_turn_2_left_a + Math.PI / 2), (start_turn_2_left.x + start_left.x) * 0.5, getCoordY((start_turn_2_left.y + start_left.y) * 0.5),\n    Math.tan(toRadian(start_turns[0].step_left) + Math.PI / 2), start_turn_2_left.x, getCoordY(start_turn_2_left.y),\n  )\n  _start_turn_2_left_control_1 = getPointAtPercentage(start_turn_2_left, {\n    x: _start_turn_2_left_control_1.x,\n    y: getCanvasY(_start_turn_2_left_control_1.y)\n  }, 0.75)\n  let _start_turn_2_left_control_2 = intersection(\n    Math.tan(start_turn_2_left_a + Math.PI / 2), (start_turn_2_left.x + start_left.x) * 0.5, getCoordY((start_turn_2_left.y + start_left.y) * 0.5),\n    getK(start_left, end_left), start_left.x, getCoordY(start_left.y)\n  )\n  _start_turn_2_left_control_2 = getPointAtPercentage(start_left, {\n    x: _start_turn_2_left_control_2.x,\n    y: getCanvasY(_start_turn_2_left_control_2.y)\n  }, 0.75)\n  let _start_turn_2_right_control_1 = intersection(\n    Math.tan(start_turn_2_right_a + Math.PI / 2), (start_turn_2_right.x + start_right.x) / 2, getCoordY((start_turn_2_right.y + start_right.y) / 2),\n    Math.tan(toRadian(start_turns[0].step_right) + Math.PI / 2), start_turn_2_right.x, getCoordY(start_turn_2_right.y),\n  )\n\n  _start_turn_2_right_control_1 = getPointAtPercentage(start_turn_2_right, {\n    x: _start_turn_2_right_control_1.x,\n    y: getCanvasY(_start_turn_2_right_control_1.y)\n  }, 0.75)\n  let _start_turn_2_right_control_2 = intersection(\n    Math.tan(start_turn_2_right_a + Math.PI / 2), (start_turn_2_right.x + start_right.x) / 2, getCoordY((start_turn_2_right.y + start_right.y) / 2),\n    getK(start_right, end_right), start_right.x, getCoordY(start_right.y)\n  )\n  _start_turn_2_right_control_2 = getPointAtPercentage(start_right, {\n    x: _start_turn_2_right_control_2.x,\n    y: getCanvasY(_start_turn_2_right_control_2.y)\n  }, 0.75)\n\n  const _start_turn_1_left_control = intersection(\n    Math.tan(-toRadian(start_turns[0].step_top)), start_turn_1.x, getCoordY(start_turn_1.y),\n    Math.tan(toRadian(start_turns[0].step_left) + Math.PI / 2), start_turn_2_left.x, getCoordY(start_turn_2_left.y),\n  )\n  const _start_turn_1_right_control = intersection(\n    Math.tan(-toRadian(start_turns[0].step_top)), start_turn_1.x, getCoordY(start_turn_1.y),\n    Math.tan(toRadian(start_turns[0].step_right) + Math.PI / 2), start_turn_2_right.x, getCoordY(start_turn_2_right.y),\n  )\n\n  const start_turn_2_left_control_1 = new FP.Joint(\n    'start_turn_2_left_control_1',\n    {\n      x: _start_turn_2_left_control_1.x,\n      y: _start_turn_2_left_control_1.y,\n    },\n  )\n  const start_turn_2_left_control_2 = new FP.Joint(\n    'start_turn_2_left_control_2',\n    {\n      x: _start_turn_2_left_control_2.x,\n      y: _start_turn_2_left_control_2.y,\n    },\n  )\n  const start_turn_2_right_control_1 = new FP.Joint(\n    'start_turn_2_right_control_1',\n    {\n      x: _start_turn_2_right_control_1.x,\n      y: _start_turn_2_right_control_1.y,\n    },\n  )\n  const start_turn_2_right_control_2 = new FP.Joint(\n    'start_turn_2_right_control_2',\n    {\n      x: _start_turn_2_right_control_2.x,\n      y: _start_turn_2_right_control_2.y,\n    },\n  )\n  const start_turn_1_left_control = new FP.Joint(\n    'start_turn_1_left_control',\n    {\n      x: _start_turn_1_left_control.x,\n      y: getCanvasY(_start_turn_1_left_control.y),\n    },\n  )\n  const start_turn_1_right_control = new FP.Joint(\n    'start_turn_1_right_control',\n    {\n      x: _start_turn_1_right_control.x,\n      y: getCanvasY(_start_turn_1_right_control.y),\n    },\n  )\n\n  glyph.addJoint(start_turn_1)\n  glyph.addJoint(start_turn_2)\n  glyph.addJoint(start_left)\n  glyph.addJoint(start_right)\n  glyph.addJoint(start_turn_3)\n  glyph.addJoint(start_turn_2_left)\n  glyph.addJoint(start_turn_2_right)\n  glyph.addJoint(start)\n  glyph.addJoint(end)\n  glyph.addJoint(end_left)\n  glyph.addJoint(end_right)\n\n\n  glyph.addJoint(start_turn_1_left_control)\n  glyph.addJoint(start_turn_1_right_control)\n  glyph.addJoint(start_turn_2_right_control_1)\n  glyph.addJoint(start_turn_2_left_control_1)\n  glyph.addJoint(start_turn_2_left_control_2)\n  glyph.addJoint(start_turn_2_right_control_1)\n\n  const refline = (p1, p2) => {\n    return {\n      name: `${p1.name}-${p2.name}`,\n      start: p1.name,\n      end: p2.name,\n    }\n  }\n\n  glyph.addRefLine(refline(start_turn_1, start_turn_1_left_control))\n  glyph.addRefLine(refline(start_turn_1, start_turn_1_right_control))\n  glyph.addRefLine(refline(start_turn_2_left, start_turn_1_left_control))\n  glyph.addRefLine(refline(start_turn_2_right, start_turn_1_right_control))\n  glyph.addRefLine(refline(start_turn_2_left, start_turn_2_left_control_1))\n  glyph.addRefLine(refline(start_turn_2_right, start_turn_2_right_control_1))\n\n  glyph.addRefLine(refline(start_turn_2_left, start_turn_2_right))\n  glyph.addRefLine(refline(end_left, end_right))\n  \n  /**\n   * 撇\n   */\n\n  const endOption = {\n    ratio: ending.params[2].value,\n    step: ending.degree.value,\n    radius: ending.radius.value,\n    hook: ending.params[0].value,\n    variation: ending.params[1].value,\n  }\n\n  const endRatio = endOption.variation\n\n  const pie_start = end\n\n  const pie_end = new FP.Joint(\n    'pie_end',\n   {\n      x: ox - leftSpan * (1 - endOption.ratio),\n      y: end.y + downSpan,\n    }\n  )\n  const bend = new FP.Joint(\n    'bend',\n    {\n      x: ox,\n      y: pie_end.y,\n    },\n  )\n  // const skeleton = new FP.Skeleton(constants.get('weight'))\n  const { contour1, contour2 } = FP.Skeleton.getContours([pie_start, {\n    x: pie_start.x + 2 / 3 * (bend.x - pie_start.x),\n    y: pie_start.y + 2 / 3 * (bend.y - pie_start.y),\n  }, {\n    x: pie_end.x + 2 / 3 * (bend.x - pie_end.x),\n    y: pie_end.y + 2 / 3 * (bend.y - pie_end.y),\n  }, pie_end], [\n  {\n    pos: 0,\n    weight: weight,\n  },\n  {\n    pos: 1,\n    weight: weight * endRatio\n  }])\n\n  const end0 = new FP.Joint(\n    'end0',\n    {\n      x: contour1[contour1.length - 1].end.x,\n      y: contour1[contour1.length - 1].end.y,\n    },\n  )\n\n  const end2 = new FP.Joint(\n    'end2',\n    {\n      x: contour2[contour2.length - 1].end.x,\n      y: contour2[contour2.length - 1].end.y,\n    },\n  )\n\n  const end1 = new FP.Joint(\n    'end1',\n    {\n      x: ox - leftSpan,\n      y: oy + length / 2,\n    },\n  )\n\n  const k1 = Math.tan(toRadian(toDegree(angle) - 90))\n  const k2 = Math.tan(toRadian(toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2))) - endOption.step))\n  const k3 = getK(contour1[0].end, contour1[0].control2)\n  const k4 = Math.tan(toRadian(toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2))) - endOption.step - endOption.hook))\n  const k5 = getK(contour2[0].end, contour2[0].control2)\n  const p = intersection(k1, end1.x, getCoordY(end1.y), k2, end2.x, getCoordY(end2.y))\n\n  const k_step = Math.tan(toRadian(90 + endOption.step))\n  const c_bottom = intersection(k_step, end1.x, getCoordY(end1.y), 0, end0.x, getCoordY(end0.y))\n  const k_top = Math.tan(toRadian(180 - endOption.hook))\n  const p_top = intersection(k_step, end1.x, getCoordY(end1.y), k_top, end2.x, getCoordY(end2.y))\n\n  const control = new FP.Joint(\n    'control',\n    {\n      x: contour2[0].control2.x,\n      y: contour2[0].control2.y,\n    },\n  )\n  const control2 = new FP.Joint(\n    'control2',\n    {\n      x: contour1[0].control2.x,\n      y: contour1[0].control2.y,\n    },\n  )\n    const control3 = new FP.Joint(\n    'control3',\n    {\n      x: contour2[0].control1.x,\n      y: contour2[0].control1.y,\n    },\n  )\n  const control4 = new FP.Joint(\n    'control4',\n    {\n      x: contour1[0].control1.x,\n      y: contour1[0].control1.y,\n    },\n  )\n  const end3 = new FP.Joint(\n    'end3',\n    {\n      x: p.x,\n      y: getCanvasY(p.y),\n    },\n  )\n\n  const c_bottom_p = new FP.Joint(\n    'c_bottom',\n    {\n      x: c_bottom.x,\n      y: getCanvasY(c_bottom.y),\n    },\n  )\n\n\n  const p_top_p = new FP.Joint(\n    'p_top',\n    {\n      x: p_top.x,\n      y: getCanvasY(p_top.y),\n    },\n  )\n\n  const c_top_p = new FP.Joint(\n    'c_top',\n    {\n      x: (p_top_p.x + end2.x) / 2,\n      y: end2.y,\n    },\n  )\n\n  const radius_p_1 = new FP.Joint(\n    'radius_p_1',\n    {\n      x: p_top_p.x + endOption.radius * Math.cos(Math.atan(k_top)),\n      y: p_top_p.y - endOption.radius * Math.sin(Math.atan(k_top)),\n    },\n  )\n\n  const radius_p_2 = new FP.Joint(\n    'radius_p_2',\n    {\n      x: p_top_p.x + endOption.radius * Math.cos(Math.atan(k_step)),\n      y: p_top_p.y - endOption.radius * Math.sin(Math.atan(k_step)),\n    },\n  )\n\n  const end_c1_p = intersection(k1, radius_p_1.x, getCoordY(radius_p_1.y), k3, end0.x, getCoordY(end0.y))\n  const end_c2_p = intersection(k4, radius_p_2.x, getCoordY(radius_p_2.y), k5, end2.x, getCoordY(end2.y))\n\n  const end_c1 = new FP.Joint(\n    'end_c1',\n    {\n      x: end_c1_p.x,\n      y: getCanvasY(end_c1_p.y),\n    },\n  )\n  const end_c2 = new FP.Joint(\n    'end_c2',\n    {\n      x: end_c2_p.x,\n      y: getCanvasY(end_c2_p.y),\n    },\n  )\n  // const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  const k = getK(contour1[0].end, contour1[0].control2)\n  const angle_1 = Math.atan(-getK(end2, end0))\n  const angle_2 = toRadian(toDegree(angle_1) + 1)\n\n  const r = weight * endRatio\n  const l = (k * (end0.x - end2.x) - (end2.y - end0.y)) / (Math.sin(angle_2) + k * Math.cos(angle_2))\n  const delta = l - r\n\n  const _angle_1 = toDegree(angle_1)\n  const _angle_3 = 200 - toDegree(Math.atan(getK(contour2[0].end, contour2[0].control2)))\n\n  const tan_1 = Math.atan(k)\n  const tan_3 = toRadian(-70)\n\n  //const tan_d = (tan_3 - tan_1) / (_angle_3 - _angle_1)\n\n  const l1 = distance(end2, end0)\n  const l2 = distance(end2, end1)\n  const d = 0\n  let lastX = end0.x\n  let lastY = end0.y\n  let lastTan = tan_1\n  const endPoints = []\n  let sum = 0\n  const pow = 0.05\n  for (let i = 0; i <= _angle_3 - _angle_1; i++) {\n    sum += Math.pow(i, pow)\n  }\n  const a1 = (tan_3 - tan_1) / sum\n  const path = new FP.PolygonComponent()\n  let _l = 0\n  path.beginPath()\n  for (let i = _angle_1; i < _angle_3; i++) {\n    const tan_d = a1 * Math.pow((i - _angle_1), pow)\n    const tan = lastTan + tan_d\n    lastTan = tan\n    const angle = toRadian(i + 1)\n    const _k = Math.tan(tan)\n    _l = (_k * (lastX - end2.x) - (end2.y - lastY)) / (Math.sin(angle) + _k * Math.cos(angle))\n    const _r = r + d * (-0.5 + Math.random())\n    //console.log(r, delta)\n    const x = end2.x + _l * Math.cos(angle)\n    const y = end2.y + _l * Math.sin(angle)\n    if (i === _angle_1) {\n      path.moveTo(end0.x, end0.y)\n    } else {\n      path.lineTo(x, y)\n    }\n    endPoints.push({x, y})\n    //console.log('111', i, angle, x, y)\n    lastX = x\n    lastY = y\n  }\n\n  // 顺时针\n  const pen = new FP.PenComponent()\n  pen.beginPath()\n\n  const controlLength = _l * 0.5\n\n  pen.moveTo(start_turn_1.x, start_turn_1.y)\n  pen.quadraticBezierTo(start_turn_1_right_control.x, start_turn_1_right_control.y, start_turn_2_right.x, start_turn_2_right.y)\n  pen.bezierTo(start_turn_2_right_control_1.x, start_turn_2_right_control_1.y, start_turn_2_right_control_2.x, start_turn_2_right_control_2.y, start_right.x, start_right.y)\n  pen.lineTo(end_right.x, end_right.y)\n  for (let i = 0; i < contour1.length; i++) {\n    pen.bezierTo(contour1[i].control1.x, contour1[i].control1.y, contour1[i].control2.x, contour1[i].control2.y, contour1[i].end.x, contour1[i].end.y)\n  }\n  pen.quadraticBezierTo(c_bottom_p.x, c_bottom_p.y, radius_p_2.x, radius_p_2.y)\n  pen.quadraticBezierTo(p_top_p.x, p_top_p.y, radius_p_1.x, radius_p_1.y)\n  pen.quadraticBezierTo(c_top_p.x, c_top_p.y, end2.x, end2.y)\n  for (let i = contour2.length - 1; i >= 0; i--) {\n    pen.bezierTo(contour2[i].control2.x, contour2[i].control2.y, contour2[i].control1.x, contour2[i].control1.y, contour2[i].start.x, contour2[i].start.y)\n  }\n  pen.lineTo(end_left.x, end_left.y)\n  pen.lineTo(start_left.x, start_left.y)\n  pen.bezierTo(start_turn_2_left_control_2.x, start_turn_2_left_control_2.y, start_turn_2_left_control_1.x, start_turn_2_left_control_1.y, start_turn_2_left.x, start_turn_2_left.y)\n  pen.quadraticBezierTo(start_turn_1_left_control.x, start_turn_1_left_control.y, start_turn_1.x, start_turn_1.y)\n  \n  pen.closePath()\n  glyph.addComponent(pen) \n  // const getAngle = (p1, p2) => {\n  //   if (p2.x === p1.x) return 90\n  //   if (p2.y === p1.y && p2.x > p1.x) return 180\n  //   if (p2.x > p1.x) {\n  //     return 180 - toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n  //   }\n  //   return -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n  // }\n  // const startPoints = []\n  // let startCurve\n  // {\n  //   const path = new FP.PolygonComponent()\n  //   path.beginPath()\n  //   let delta = 1\n  //   const angle1 = Math.round(getAngle(start, start2))\n  //   const angle2 = Math.round(getAngle(start, start1))\n  //   const angle3 = Math.round(getAngle(start, start0))\n  //   const l1 = distance(start, start2)\n  //   const l2 = distance(start, start1)\n  //   const l3 = distance(start, start0)\n  //   const pow = 0.5\n  //   let r = l1\n  //   let sum = 0\n  //   for (let i = 0; i <= angle2 - angle1; i++) {\n  //     sum += Math.pow(i, pow)\n  //   }\n  //   const a1 = (l2 - l1) / sum\n  //   const n1 = angle2 - angle1\n  //   sum = 0\n  //   for (let i = 0; i <= angle3 - angle2; i++) {\n  //     sum += Math.pow(i, pow)\n  //   }\n  //   const a2 = (l3 - l2) / sum\n  //   const n2 = angle3 - angle2\n  //   const d = 0\n  //   for (let i = angle1; i <= angle3; i++) {\n  //     let _i = i\n  //     if (i >= angle1 && i < angle2) {\n  //       _i = i - angle1\n  //       delta = a1 * Math.pow((n1 - _i), pow)\n  //     }\n  //     if (i >= angle2 && i < angle3) {\n  //       _i = i - angle2\n  //       delta = a2 * Math.pow((i - angle2), pow)\n  //     }\n  //     const _r = r + d * (-0.5 + Math.random())\n  //     r += delta\n  //     //console.log(r, delta)\n  //     const angle = Math.PI / 180 * i\n  //     const x = start.x - _r * Math.cos(angle)\n  //     const y = start.y - _r * Math.sin(angle)\n  //     if (i === angle1) {\n  //       path.moveTo(x, y)\n  //     } else {\n  //       path.lineTo(x, y)\n  //     }\n  //     startPoints.push({x, y})\n  //   }\n  //   path.closePath()\n  //   //glyph.addComponent(path)\n  //   //startCurve = FP.fitCurve(startPoints, 2)\n  // }\n  // const curve = FP.fitCurve(startPoints, 2)\n  // for (let i = 0; i < curve.length; i++) {\n  //   const bezier = curve[i]\n  //   pen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // }\n\n  // pen.bezierTo(contour1[0].control1.x, contour1[0].control1.y, contour1[0].control2.x, contour1[0].control2.y, contour1[0].end.x, contour1[0].end.y)\n  // pen.closePath()\n  // glyph.addComponent(pen)\n\n  // // const _x = end.x + l * Math.cos(angle_2)\n  // // const _y = end.y + l * Math.sin(angle_2)\n  // // -(end0.y - _y) / (end0.x - _x) = k\n\n  // // -(end0.y - (end.y + l * Math.sin(angle_2))) / (end0.x - (end.x + l * Math.cos(angle_2))) = k\n\n  glyph.addJoint(pie_start)\n  glyph.addJoint(bend)\n  glyph.addJoint(pie_end)\n  glyph.addJoint(end0)\n  glyph.addJoint(end1)\n  glyph.addJoint(end2)\n  glyph.addJoint(c_bottom_p)\n  glyph.addJoint(p_top_p)\n  glyph.addJoint(control)\n  glyph.addJoint(control2)\n  glyph.addJoint(control3)\n  glyph.addJoint(control4)\n  glyph.addJoint(radius_p_1)\n  glyph.addJoint(radius_p_2)\n\n  // const refline = (p1, p2) => {\n  //   return {\n  //     name: `${p1.name}-${p2.name}`,\n  //     start: p1.name,\n  //     end: p2.name,\n  //   }\n  // }\n  // glyph.addRefLine(refline(end1, start))\n  // glyph.addRefLine(refline(end2, control))\n  // glyph.addRefLine(refline(end0, control2))\n  // glyph.addRefLine(refline(end0, end2))\n  // glyph.addRefLine(refline(end2, end_c2))\n  // glyph.addRefLine(refline(end3, end_c1))\n  // glyph.addRefLine(refline(end3, end_c2))\n  // glyph.addRefLine(refline(end0, end_c1))\n}","objData":{"_joints":[{"_x":500,"_y":130,"uuid":"PK-SBedKC1iSOGWqQ19vc","name":"start_turn_1"},{"_x":500,"_y":150,"uuid":"KNEbKvfE7EFqw-6AHuGP_","name":"start_turn_2"},{"_x":480,"_y":170,"uuid":"fFoMGk1Z8INLOXQFnbgHy","name":"start_left"},{"_x":520,"_y":170,"uuid":"qoTpbRlBpP4MW4pwKf2X4","name":"start_right"},{"_x":500,"_y":170,"uuid":"zKQAovla4dcEZ4jNdlGJe","name":"start_turn_3"},{"_x":480,"_y":150,"uuid":"o33c0pt7CtueiEeNapocY","name":"start_turn_2_left"},{"_x":520,"_y":150,"uuid":"xgx6wuOEiq_2WCoOk34z0","name":"start_turn_2_right"},{"_x":500,"_y":170,"uuid":"uUracXeDhmrV6nEaf8UqS","name":"start"},{"_x":500,"_y":615,"uuid":"6YVNVw9yFHmwnjrbCUa3q","name":"end"},{"_x":480,"_y":615,"uuid":"KLTFS-NkYsT-cHHDDxZwi","name":"end_left"},{"_x":520,"_y":615,"uuid":"fGaySqK9KMjFSy9bUG-fO","name":"end_right"},{"_x":484.02327522539764,"_y":127.18287235888425,"uuid":"r3XBK4O4it0bkJylGurlR","name":"start_turn_1_left_control"},{"_x":517.0020753820971,"_y":132.99792461790292,"uuid":"cWDa3eAMJqyX1Fv2dLH0F","name":"start_turn_1_right_control"},{"_x":521.3224523553134,"_y":157.5,"uuid":"z0q9iZLArZtmbfjpiQGlT","name":"start_turn_2_right_control_1"},{"_x":478.67754764468657,"_y":157.5,"uuid":"VEGLkx6kiwEy4yoWFY5rG","name":"start_turn_2_left_control_1"},{"_x":480,"_y":162.5,"uuid":"odxqff-O_AFL7ZTx41yQ-","name":"start_turn_2_left_control_2"},{"_x":521.3224523553134,"_y":157.5,"uuid":"z0q9iZLArZtmbfjpiQGlT","name":"start_turn_2_right_control_1"},{"_x":500,"_y":615,"uuid":"6YVNVw9yFHmwnjrbCUa3q","name":"end"},{"_x":500,"_y":870,"uuid":"EwUbEMZdD14D5FL9CRGKf","name":"bend"},{"_x":360,"_y":870,"uuid":"IZC-b_wO1jzVNuA1mY7w7","name":"pie_end"},{"_x":360.6747418657209,"_y":901.5871695657185,"uuid":"MKbE34UT4wde5qxZPUW-O","name":"end0"},{"_x":300,"_y":870,"uuid":"EGO5nqH_TkEwfuWNLAB3n","name":"end1"},{"_x":360.4441381342792,"_y":838.4107904342817,"uuid":"JRIcCoLWLuVYrb78V-Ugk","name":"end2"},{"_x":318.2368608517059,"_y":901.5871695657185,"uuid":"bVxTIl2fYHDQgho1b6i1j","name":"c_bottom"},{"_x":271.815574360021,"_y":821.1831428094093,"uuid":"RHJT08d6qjGuF2g0zZTxj","name":"p_top"},{"_x":467.51140863196395,"_y":843.5282055667839,"uuid":"LVXSCN_26NL8LeX-HnZvc","name":"control"},{"_x":507.4689345733715,"_y":895.8650281998675,"uuid":"HqtKyIqIc8_4PWJ3_Crvh","name":"control2"},{"_x":478.2155067417813,"_y":690.3357853867146,"uuid":"lR_QJslUWlOa0bJozWf8S","name":"control3"},{"_x":522.4874378065639,"_y":727.5332166249392,"uuid":"HnwNbhc3bXwtHcPsYHxUA","name":"control4"},{"_x":291.4481180289743,"_y":824.9993227169402,"uuid":"y2PaGmRF6W1LWy_jVq67d","name":"radius_p_1"},{"_x":281.815574360021,"_y":838.5036508850981,"uuid":"v_143DcEMcqx_GwsPAjec","name":"radius_p_2"}],"_reflines":[{"name":"start_turn_1-start_turn_1_left_control","start":"start_turn_1","end":"start_turn_1_left_control"},{"name":"start_turn_1-start_turn_1_right_control","start":"start_turn_1","end":"start_turn_1_right_control"},{"name":"start_turn_2_left-start_turn_1_left_control","start":"start_turn_2_left","end":"start_turn_1_left_control"},{"name":"start_turn_2_right-start_turn_1_right_control","start":"start_turn_2_right","end":"start_turn_1_right_control"},{"name":"start_turn_2_left-start_turn_2_left_control_1","start":"start_turn_2_left","end":"start_turn_2_left_control_1"},{"name":"start_turn_2_right-start_turn_2_right_control_1","start":"start_turn_2_right","end":"start_turn_2_right_control_1"},{"name":"start_turn_2_left-start_turn_2_right","start":"start_turn_2_left","end":"start_turn_2_right"},{"name":"end_left-end_right","start":"end_left","end":"end_right"}],"_components":[{"points":[{"uuid":"jxJYUswFqwN6DE0nCP78h","type":"anchor","x":500,"y":130,"origin":null},{"uuid":"8t6152O_-lZ8aEmYpa81m","type":"control","x":511.33471692139807,"y":131.99861641193527,"origin":"jxJYUswFqwN6DE0nCP78h"},{"uuid":"t9g5Y_0yHM2yojXPEZuUl","type":"control","x":518.0013835880648,"y":138.66528307860196,"origin":"MvNPtRsv-b3rpF0vsfVDM"},{"uuid":"MvNPtRsv-b3rpF0vsfVDM","type":"anchor","x":520,"y":150,"origin":null},{"uuid":"4CrmYim_wE81jIrzrgCaS","type":"control","x":521.3224523553134,"y":157.5,"origin":"MvNPtRsv-b3rpF0vsfVDM"},{"uuid":"gG3nPnOJ6L9jDnmU1CKkF","type":"control","x":520,"y":162.5,"origin":"QIgAlKcMr37ALE34wxMow"},{"uuid":"QIgAlKcMr37ALE34wxMow","type":"anchor","x":520,"y":170,"origin":null},{"uuid":"SJD1fATayjYJ4cNgMPN36","type":"control","x":520,"y":170,"origin":"QIgAlKcMr37ALE34wxMow"},{"uuid":"mD7PCJTINf4hT6Ze2jUO1","type":"control","x":520,"y":615,"origin":"ZXqYMTjBXI7OHvmmKyb8K"},{"uuid":"ZXqYMTjBXI7OHvmmKyb8K","type":"anchor","x":520,"y":615,"origin":null},{"uuid":"sg5UdhP4Lt7SMN6u-9NaC","type":"control","x":522.4874378065639,"y":727.5332166249392,"origin":"ZXqYMTjBXI7OHvmmKyb8K"},{"uuid":"uWtnGrDz4-NvwLU0aqaEw","type":"control","x":507.4689345733715,"y":895.8650281998675,"origin":"-WEPshD73pDUxQ6rllUSZ"},{"uuid":"-WEPshD73pDUxQ6rllUSZ","type":"anchor","x":360.6747418657209,"y":901.5871695657185,"origin":null},{"uuid":"7I8mgB7mLWxJJbj164hvx","type":"control","x":332.3828211897109,"y":901.5871695657185,"origin":"-WEPshD73pDUxQ6rllUSZ"},{"uuid":"KdyrKvhSERAJkKGgYhuhP","type":"control","x":306.09643202114427,"y":880.5593300055117,"origin":"yJo-goP1bbOKMYcXAaytM"},{"uuid":"yJo-goP1bbOKMYcXAaytM","type":"anchor","x":281.815574360021,"y":838.5036508850981,"origin":null},{"uuid":"4B23R2gbUOwSeQG6CBk61","type":"control","x":275.1489076933543,"y":826.9566455013056,"origin":"yJo-goP1bbOKMYcXAaytM"},{"uuid":"Q_6i47mFS6-LVgnrD6RA8","type":"control","x":278.35975558300544,"y":822.4552027785863,"origin":"8qmuk1ky0lhcbuPCeVf7f"},{"uuid":"8qmuk1ky0lhcbuPCeVf7f","type":"anchor","x":291.4481180289743,"y":824.9993227169402,"origin":null},{"uuid":"xLDLawunnI4ghIjFYjCkU","type":"control","x":307.9026101744248,"y":833.9403011951679,"origin":"8qmuk1ky0lhcbuPCeVf7f"},{"uuid":"YygX6SyKs4D57YciXVntD","type":"control","x":330.9012835428598,"y":838.4107904342817,"origin":"JnuUmVUvXP1Px57CdiHg7"},{"uuid":"JnuUmVUvXP1Px57CdiHg7","type":"anchor","x":360.4441381342792,"y":838.4107904342817,"origin":null},{"uuid":"SMia4Y2fGuS7ztvowNERS","type":"control","x":467.51140863196395,"y":843.5282055667839,"origin":"JnuUmVUvXP1Px57CdiHg7"},{"uuid":"ZtWRV8fTFDg9gdOVhSp8A","type":"control","x":478.2155067417813,"y":690.3357853867146,"origin":"3nxMTCjLf__Vb6qEvtBLw"},{"uuid":"3nxMTCjLf__Vb6qEvtBLw","type":"anchor","x":479.9884,"y":615,"origin":null},{"uuid":"oTeeXOP98P3Oq-_UYHT7m","type":"control","x":479.9884,"y":615,"origin":"3nxMTCjLf__Vb6qEvtBLw"},{"uuid":"UCAlkHsmHpfDp1wWYwaHR","type":"control","x":480,"y":615,"origin":"oD1dDawkgM9yJ40hBG0W3"},{"uuid":"oD1dDawkgM9yJ40hBG0W3","type":"anchor","x":480,"y":615,"origin":null},{"uuid":"uNoSSJMdFMrhH55iKtoUJ","type":"control","x":480,"y":615,"origin":"oD1dDawkgM9yJ40hBG0W3"},{"uuid":"gYUo-1q03wR5qi5fglerM","type":"control","x":480,"y":170,"origin":"ptzoloHaROiIYt_oBM5dq"},{"uuid":"ptzoloHaROiIYt_oBM5dq","type":"anchor","x":480,"y":170,"origin":null},{"uuid":"DCeB5sfvXHSqj2PoErRQW","type":"control","x":480,"y":162.5,"origin":"ptzoloHaROiIYt_oBM5dq"},{"uuid":"8aHSIKBrHnfnyp4xE1-k3","type":"control","x":478.67754764468657,"y":157.5,"origin":"A8CPJQFb8Wr5rJZ2nls5A"},{"uuid":"A8CPJQFb8Wr5rJZ2nls5A","type":"anchor","x":480,"y":150,"origin":null},{"uuid":"MYsWHofVhLeZqR3NBX5B5","type":"control","x":482.6821834835984,"y":134.7885815725895,"origin":"A8CPJQFb8Wr5rJZ2nls5A"},{"uuid":"9LMZ9H4JWv8udPJIpQpt_","type":"control","x":489.3488501502651,"y":128.12191490592284,"origin":"66j_kedwnOY7IcfG74Fwd"},{"uuid":"66j_kedwnOY7IcfG74Fwd","type":"anchor","x":500,"y":130,"origin":null}],"type":"glyph-pen","hasPathBegan":false,"usedInCharacter":true,"contour":[{"type":2,"start":{"x":500,"y":670},"end":{"x":520,"y":650},"control1":{"x":511.33471692139807,"y":668.0013835880648},"control2":{"x":518.0013835880648,"y":661.334716921398},"fill":false},{"type":2,"start":{"x":520,"y":650},"end":{"x":520,"y":630},"control1":{"x":521.3224523553134,"y":642.5},"control2":{"x":520,"y":637.5},"fill":false},{"type":2,"start":{"x":520,"y":630},"end":{"x":520,"y":185},"control1":{"x":520,"y":630},"control2":{"x":520,"y":185},"fill":false},{"type":2,"start":{"x":520,"y":185},"end":{"x":360.6747418657209,"y":-101.58716956571834},"control1":{"x":522.4874378065639,"y":72.4667833750608},"control2":{"x":507.4689345733715,"y":-95.86502819986754},"fill":false},{"type":2,"start":{"x":360.6747418657209,"y":-101.58716956571834},"end":{"x":281.815574360021,"y":-38.50365088509807},"control1":{"x":332.3828211897109,"y":-101.58716956571834},"control2":{"x":306.09643202114427,"y":-80.55933000551158},"fill":false},{"type":2,"start":{"x":281.815574360021,"y":-38.50365088509807},"end":{"x":291.4481180289743,"y":-24.99932271694024},"control1":{"x":275.1489076933543,"y":-26.956645501305502},"control2":{"x":278.35975558300544,"y":-22.45520277858634},"fill":false},{"type":2,"start":{"x":291.4481180289743,"y":-24.99932271694024},"end":{"x":360.4441381342792,"y":-38.41079043428181},"control1":{"x":307.9026101744248,"y":-33.940301195167876},"control2":{"x":330.9012835428598,"y":-38.41079043428181},"fill":false},{"type":2,"start":{"x":360.4441381342792,"y":-38.41079043428181},"end":{"x":479.9884,"y":185},"control1":{"x":467.51140863196395,"y":-43.52820556678398},"control2":{"x":478.2155067417813,"y":109.66421461328537},"fill":false},{"type":2,"start":{"x":479.9884,"y":185},"end":{"x":480,"y":185},"control1":{"x":479.9884,"y":185},"control2":{"x":480,"y":185},"fill":false},{"type":2,"start":{"x":480,"y":185},"end":{"x":480,"y":630},"control1":{"x":480,"y":185},"control2":{"x":480,"y":630},"fill":false},{"type":2,"start":{"x":480,"y":630},"end":{"x":480,"y":650},"control1":{"x":480,"y":637.5},"control2":{"x":478.67754764468657,"y":642.5},"fill":false},{"type":2,"start":{"x":480,"y":650},"end":{"x":500,"y":670},"control1":{"x":482.6821834835984,"y":665.2114184274105},"control2":{"x":489.3488501502651,"y":671.8780850940772},"fill":false}],"preview":[{"type":2,"start":{"x":50,"y":13},"end":{"x":52,"y":15},"control1":{"x":51.13347169213981,"y":13.199861641193529},"control2":{"x":51.80013835880648,"y":13.866528307860197},"fill":false},{"type":2,"start":{"x":52,"y":15},"end":{"x":52,"y":17},"control1":{"x":52.13224523553134,"y":15.75},"control2":{"x":52,"y":16.25},"fill":false},{"type":2,"start":{"x":52,"y":17},"end":{"x":52,"y":61.5},"control1":{"x":52,"y":17},"control2":{"x":52,"y":61.5},"fill":false},{"type":2,"start":{"x":52,"y":61.5},"end":{"x":36.06747418657209,"y":90.15871695657185},"control1":{"x":52.24874378065639,"y":72.75332166249392},"control2":{"x":50.74689345733715,"y":89.58650281998676},"fill":false},{"type":2,"start":{"x":36.06747418657209,"y":90.15871695657185},"end":{"x":28.1815574360021,"y":83.85036508850982},"control1":{"x":33.23828211897109,"y":90.15871695657185},"control2":{"x":30.609643202114427,"y":88.05593300055118},"fill":false},{"type":2,"start":{"x":28.1815574360021,"y":83.85036508850982},"end":{"x":29.144811802897433,"y":82.49993227169404},"control1":{"x":27.514890769335434,"y":82.69566455013057},"control2":{"x":27.835975558300547,"y":82.24552027785865},"fill":false},{"type":2,"start":{"x":29.144811802897433,"y":82.49993227169404},"end":{"x":36.04441381342792,"y":83.84107904342818},"control1":{"x":30.790261017442482,"y":83.3940301195168},"control2":{"x":33.09012835428598,"y":83.84107904342818},"fill":false},{"type":2,"start":{"x":36.04441381342792,"y":83.84107904342818},"end":{"x":47.99884,"y":61.5},"control1":{"x":46.7511408631964,"y":84.3528205566784},"control2":{"x":47.821550674178134,"y":69.03357853867146},"fill":false},{"type":2,"start":{"x":47.99884,"y":61.5},"end":{"x":48,"y":61.5},"control1":{"x":47.99884,"y":61.5},"control2":{"x":48,"y":61.5},"fill":false},{"type":2,"start":{"x":48,"y":61.5},"end":{"x":48,"y":17},"control1":{"x":48,"y":61.5},"control2":{"x":48,"y":17},"fill":false},{"type":2,"start":{"x":48,"y":17},"end":{"x":48,"y":15},"control1":{"x":48,"y":16.25},"control2":{"x":47.86775476446866,"y":15.75},"fill":false},{"type":2,"start":{"x":48,"y":15},"end":{"x":50,"y":13},"control1":{"x":48.268218348359845,"y":13.47885815725895},"control2":{"x":48.93488501502651,"y":12.812191490592284},"fill":false}]}]}},{"uuid":"A3nz6_ECrrXFn21uqMhZU","type":"system","name":"提","components":[],"groups":[],"orderedList":[],"selectedComponentsUUIDs":[],"view":{"zoom":100,"translateX":0,"translateY":0},"parameters":[{"uuid":"RaAwYnPvVMzfc_SuoVJDX","name":"length","type":0,"value":211,"min":50,"max":500},{"uuid":"Jp7WI_xZ6XYzDdonWaGOb","name":"weight","type":0,"value":55,"min":40,"max":100},{"uuid":"RNXmYpDC1Kxl0nQ-eJ13v","name":"angle","type":0,"value":-55,"min":-89,"max":89},{"uuid":"ZZFzo0d7Hq71wXqs4AFyn","name":"weightVariation","type":0,"value":0.35,"min":0.1,"max":1}],"joints":[],"reflines":[],"script":"function script_A3nz6_ECrrXFn21uqMhZU (glyph, constants, FP) {\n\t//Todo something\n\tconst length = glyph.getParam('length')\n  const startVariation = glyph.getParam('startVariation')\n  const endVariation = glyph.getParam('endVariation')\n  const weightVariation = glyph.getParam('weightVariation')\n  const angle = glyph.getParam('angle') / 180 * Math.PI\n  const weight = glyph.getParam('weight') || 40\n  // const weight = constants.get('weight')\n  const ox = 500\n  const oy = 500\n  const startRatio = weight * weightVariation * 0.4 / length\n  const endRatio = weight * 0.4 / length\n\n  const toRadian = (degree) => Math.PI / 180 * degree\n  const toDegree = (radian) => radian / Math.PI * 180\n\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n  const start0 = new FP.Joint(\n    'start0',\n    {\n      x: ox - (length / 2 - length * startRatio) * Math.sin(angle),\n      y: oy - (length / 2 - length * startRatio) * Math.cos(angle),\n    },\n  )\n\n  const start1 = new FP.Joint(\n    'start1',\n    {\n      x: start0.x - weight * weightVariation / 2 * Math.cos(angle),\n      y: start0.y + weight * weightVariation / 2 * Math.sin(angle),\n    },\n  )\n\n  const start2 = new FP.Joint(\n    'start2',\n    {\n      x: ox - length / 2 * Math.sin(angle),\n      y: oy - length / 2 * Math.cos(angle),\n    },\n  )\n\n  const start3 = new FP.Joint(\n    'start3',\n    {\n      x: start0.x + weight * weightVariation / 2 * Math.cos(angle),\n      y: start0.y - weight * weightVariation / 2 * Math.sin(angle),\n    },\n  )\n\n  const end0 = new FP.Joint(\n    'end0',\n    {\n\t\t\tx: ox + (length / 2 - length * endRatio) * Math.sin(angle),\n      y: oy + (length / 2 - length * endRatio) * Math.cos(angle),\n    },\n  )\n\n  const end1 = new FP.Joint(\n    'end1',\n    {\n      x: end0.x - weight / 2 * Math.cos(angle),\n      y: end0.y + weight / 2 * Math.sin(angle),\n    },\n  )\n\n  const end2 = new FP.Joint(\n    'end2',\n    {\n      x: ox + length / 2 * Math.sin(angle),\n      y: oy + length / 2 * Math.cos(angle),\n    },\n  )\n\n  const end3 = new FP.Joint(\n    'end3',\n    {\n      x: end0.x + weight / 2 * Math.cos(angle),\n      y: end0.y - weight / 2 * Math.sin(angle),\n    },\n  )\n\n  glyph.addJoint(start0)\n  glyph.addJoint(start1)\n  glyph.addJoint(start2)\n  glyph.addJoint(start3)\n\n  glyph.addJoint(end0)\n  glyph.addJoint(end1)\n  glyph.addJoint(end2)\n  glyph.addJoint(end3)\n\n  const getAngle = (p1, p2) => {\n    if (p2.x === p1.x) return 90\n    if (p2.y === p1.y && p2.x > p1.x) return 180\n\t\tconst k = -(p2.y - p1.y) / (p2.x - p1.x)\n\t\tif (angle > 0) {\n\t\t\tif (p2.x > p1.x && p2.y < p1.y) {\n\t\t\t\treturn -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x))) + 180\n\t\t\t}\n\t\t\treturn -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n\t\t} else {\n\t\t\tif (p2.x > p1.x && p2.y < p1.y) {\n\t\t\t\treturn -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x))) + 180\n\t\t\t} else if (p2.x > p1.x && p2.y > p1.y) {\n\t\t\t\treturn -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x))) + 180\n\t\t\t}\n\t\t\treturn -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n\t\t}\n  }\n\n  const startPoints = []\n  const endPoints = []\n  let startCurve, endCurve\n  {\n    const path = new FP.PolygonComponent()\n    path.beginPath()\n    let delta = 1\n    const angle1 = Math.round(getAngle(start0, start1))\n    const angle2 = Math.round(getAngle(start0, start2))\n    const angle3 = Math.round(getAngle(start0, start3))\n    const l1 = distance(start0, start1)\n    const l2 = distance(start0, start2)\n    const l3 = distance(start0, start3)\n    const pow = 0.5\n    let r = l1\n    let sum = 0\n    for (let i = 0; i <= angle2 - angle1; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a1 = (l2 - l1) / sum\n    const n1 = angle2 - angle1\n    sum = 0\n    for (let i = 0; i <= angle3 - angle2; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a2 = (l3 - l2) / sum\n    const n2 = angle3 - angle2\n    const d = 0\n    for (let i = angle1; i <= angle3; i++) {\n      let _i = i\n      if (i >= angle1 && i < angle2) {\n        _i = i - angle1\n        delta = a1 * Math.pow((n1 - _i), pow)\n      }\n      if (i >= angle2 && i < angle3) {\n        _i = i - angle2\n        delta = a2 * Math.pow((i - angle2), pow)\n      }\n      const _r = r + d * (-0.5 + Math.random())\n      r += delta\n      //console.log(r, delta)\n      const angle = Math.PI / 180 * i\n      const x = start0.x - _r * Math.cos(angle)\n      const y = start0.y - _r * Math.sin(angle)\n      if (i === angle1) {\n        path.moveTo(x, y)\n      } else {\n        path.lineTo(x, y)\n      }\n      startPoints.push({x, y})\n    }\n    path.closePath()\n    //glyph.addComponent(path)\n    startCurve = FP.fitCurve(startPoints, 2)\n  }\n\n  // 顺时针\n  const globalPath = new FP.PenComponent()\n  globalPath.beginPath()\n\n  // const curve = FP.fitCurve(startPoints.reverse(), 2)\n  // for (let i = 0; i < curve.length; i++) {\n  //   const bezier = curve[i]\n  //   if (i === 0) {\n  //     globalPath.moveTo(bezier[0].x, bezier[0].y)\n  //   }\n  //   globalPath.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // }\n\n  const curve = FP.fitCurve(startPoints.reverse(), 2)\n  for (let i = curve.length - 1; i >= 0; i--) {\n    const bezier = curve[i]\n    if (i === curve.length - 1) {\n      globalPath.moveTo(bezier[3].x, bezier[3].y)\n    }\n    globalPath.bezierTo(bezier[2].x, bezier[2].y, bezier[1].x, bezier[1].y, bezier[0].x, bezier[0].y)\n  }\n\n\t{\n    const path = new FP.PolygonComponent()\n    path.beginPath()\n    let delta = 1\n    const angle1 = -Math.round(getAngle(end0, end1))\n    const angle2 = 180 - Math.round(getAngle(end0, end2))\n    const angle3 = 360 - Math.round(getAngle(end0, end3))\n    const l1 = distance(end0, end1)\n    const l2 = distance(end0, end2)\n    const l3 = distance(end0, end3)\n    const pow = 0.5\n    let r = l1\n    let sum = 0\n    for (let i = 0; i <= angle2 - angle1; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a1 = (l2 - l1) / sum\n    const n1 = angle2 - angle1\n    sum = 0\n    for (let i = 0; i <= angle3 - angle2; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a2 = (l3 - l2) / sum\n    const n2 = angle3 - angle2\n    const d = 0\n    for (let i = angle1; i <= angle3; i++) {\n      let _i = i\n      if (i >= angle1 && i < angle2) {\n        _i = i - angle1\n        delta = a1 * Math.pow((n1 - _i), pow)\n      }\n      if (i >= angle2 && i < angle3) {\n        _i = i - angle2\n        delta = a2 * Math.pow((i - angle2), pow)\n      }\n      const _r = r + d * (-0.5 + Math.random())\n      r += delta\n      //console.log(r, delta)\n      const angle = Math.PI / 180 * i\n      const x = end0.x - _r * Math.cos(angle)\n      const y = end0.y + _r * Math.sin(angle)\n      if (i === angle1) {\n        path.moveTo(x, y)\n      } else {\n        path.lineTo(x, y)\n      }\n      endPoints.push({x, y})\n    }\n    path.closePath()\n    //glyph.addComponent(path)\n    endCurve = FP.fitCurve(endPoints, 2)\n  }\n\n\t// globalPath.lineTo(end1.x, end1.y)\n\n  // for (let i = 0; i < endCurve.length; i++) {\n  //   const bezier = endCurve[i]\n  //   globalPath.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  // }\n\n  // globalPath.lineTo(start3.x, start3.y)\n\n  globalPath.lineTo(end3.x, end3.y)\n\n  for (let i = endCurve.length - 1; i >= 0; i--) {\n    const bezier = endCurve[i]\n    globalPath.bezierTo(bezier[2].x, bezier[2].y, bezier[1].x, bezier[1].y, bezier[0].x, bezier[0].y)\n  }\n\n  globalPath.lineTo(start1.x, start1.y)\n  \n  globalPath.closePath()\n  glyph.addComponent(globalPath)\n}","objData":{"_joints":[{"_x":580.1130699314634,"_y":443.9042245248677,"uuid":"O2C552o0MoHf-5CrPdbk4","name":"start0"},{"_x":574.5923967315846,"_y":436.01988609858614,"uuid":"1dJCerPhNj6GGol-tzs0r","name":"start1"},{"_x":586.4205406724886,"_y":439.4876859649646,"uuid":"Zo5NX5fF6cx4SzOW4FtUe","name":"start2"},{"_x":585.6337431313423,"_y":451.78856295114923,"uuid":"aD5HSni0GCj_NJNojL88i","name":"start3"},{"_x":431.6008043018692,"_y":547.8936324353124,"uuid":"EmaqelJ3ZqpazWBmhY6dP","name":"end0"},{"_x":415.8274523022154,"_y":525.3669512173651,"uuid":"sTYe_2P-7B_tmceJnPXxn","name":"end1"},{"_x":413.57945932751136,"_y":560.5123140350354,"uuid":"XAd7FKqAnp8CbbcdiEnoF","name":"end2"},{"_x":447.37415630152293,"_y":570.4203136532597,"uuid":"blGiYCn5UHaYrEyyNaNTd","name":"end3"}],"_reflines":[],"_components":[{"points":[{"uuid":"8F-w-2p2cyN8Al9fmgXHt","type":"anchor","x":574.5923967315846,"y":436.01988609858614,"origin":null},{"uuid":"bXUQbNTDl6JsipCUz7sdZ","type":"control","x":584.0753353336762,"y":431.846504147474,"origin":"8F-w-2p2cyN8Al9fmgXHt"},{"uuid":"1i_WShohEBx_O3d6CBqbg","type":"control","x":592.7839153263983,"y":444.28154158158503,"origin":"khyc-0-jDUIx8kOEyjECr"},{"uuid":"khyc-0-jDUIx8kOEyjECr","type":"anchor","x":585.6154864991465,"y":451.7624897782692,"origin":null},{"uuid":"xTN6VmJ0As953YAzrNCdS","type":"control","x":585.6154864991465,"y":451.7624897782692,"origin":"khyc-0-jDUIx8kOEyjECr"},{"uuid":"9F449oKNFoDIXzUOZbhuI","type":"control","x":447.37415630152293,"y":570.4203136532597,"origin":"XDI-gaiakwA8a-WkUMWbO"},{"uuid":"XDI-gaiakwA8a-WkUMWbO","type":"anchor","x":447.37415630152293,"y":570.4203136532597,"origin":null},{"uuid":"zj99UirSRhSk5ztFGt0Gm","type":"control","x":418.6344581110475,"y":586.5372279325749,"origin":"XDI-gaiakwA8a-WkUMWbO"},{"uuid":"_sjE79fMRAg8_XdZARQgt","type":"control","x":391.1593946287817,"y":545.4389930482843,"origin":"CfvBtQFB0hqvPDz7xsstC"},{"uuid":"CfvBtQFB0hqvPDz7xsstC","type":"anchor","x":415.8274523022154,"y":525.3669512173651,"origin":null},{"uuid":"g6JuNc9rJe5Cfp55BxlNE","type":"control","x":415.8274523022154,"y":525.3669512173651,"origin":"CfvBtQFB0hqvPDz7xsstC"},{"uuid":"Z9utLfmGDpvfybjS_A91E","type":"control","x":574.5923967315846,"y":436.01988609858614,"origin":"K6ZnHcVtrnhXrOqMgU9dB"},{"uuid":"K6ZnHcVtrnhXrOqMgU9dB","type":"anchor","x":574.5923967315846,"y":436.01988609858614,"origin":null}],"type":"glyph-pen","hasPathBegan":false,"usedInCharacter":true,"contour":[{"type":2,"start":{"x":574.5923967315846,"y":363.9801139014139},"end":{"x":585.6154864991465,"y":348.2375102217309},"control1":{"x":584.0753353336762,"y":368.153495852526},"control2":{"x":592.7839153263983,"y":355.7184584184149},"fill":false},{"type":2,"start":{"x":585.6154864991465,"y":348.2375102217309},"end":{"x":447.37415630152293,"y":229.57968634674035},"control1":{"x":585.6154864991465,"y":348.2375102217309},"control2":{"x":447.37415630152293,"y":229.57968634674035},"fill":false},{"type":2,"start":{"x":447.37415630152293,"y":229.57968634674035},"end":{"x":415.8274523022154,"y":274.6330487826349},"control1":{"x":418.6344581110475,"y":213.46277206742513},"control2":{"x":391.1593946287817,"y":254.56100695171574},"fill":false},{"type":2,"start":{"x":415.8274523022154,"y":274.6330487826349},"end":{"x":574.5923967315846,"y":363.9801139014139},"control1":{"x":415.8274523022154,"y":274.6330487826349},"control2":{"x":574.5923967315846,"y":363.9801139014139},"fill":false}],"preview":[{"type":2,"start":{"x":57.459239673158464,"y":43.601988609858616},"end":{"x":58.561548649914656,"y":45.17624897782692},"control1":{"x":58.407533533367626,"y":43.1846504147474},"control2":{"x":59.27839153263983,"y":44.428154158158506},"fill":false},{"type":2,"start":{"x":58.561548649914656,"y":45.17624897782692},"end":{"x":44.7374156301523,"y":57.04203136532597},"control1":{"x":58.561548649914656,"y":45.17624897782692},"control2":{"x":44.7374156301523,"y":57.04203136532597},"fill":false},{"type":2,"start":{"x":44.7374156301523,"y":57.04203136532597},"end":{"x":41.58274523022155,"y":52.536695121736514},"control1":{"x":41.863445811104754,"y":58.65372279325749},"control2":{"x":39.115939462878174,"y":54.54389930482843},"fill":false},{"type":2,"start":{"x":41.58274523022155,"y":52.536695121736514},"end":{"x":57.459239673158464,"y":43.601988609858616},"control1":{"x":41.58274523022155,"y":52.536695121736514},"control2":{"x":57.459239673158464,"y":43.601988609858616},"fill":false}]}]}},{"uuid":"AQKKGhP29js1rEmOQQbDC","type":"system","name":"撇2","components":[],"groups":[],"orderedList":[],"selectedComponentsUUIDs":[],"view":{"zoom":100,"translateX":0,"translateY":0},"parameters":[{"uuid":"gRBo-OlosV1V1DKVa4Ts0","name":"weight","type":0,"value":40,"min":20,"max":100},{"uuid":"RbcQmZuzy4aZxEfSf85Gr","name":"startVariation","type":0,"value":0.66,"min":0,"max":2},{"uuid":"_Zr4WDmBP5RYZZjFnhWAQ","name":"bendVariation","type":0,"value":0.5,"min":0.5,"max":2.5},{"uuid":"OMEMkp4ERzoJ0GB8uoQuU","name":"leftSpan","type":0,"value":300,"min":50,"max":1000},{"uuid":"PRP6vEBxX3UHskWXvexGl","name":"downSpan","type":0,"value":300,"min":50,"max":1000},{"uuid":"uW5g-oikM5W6_gyb84egK","name":"bendingRatio","type":0,"value":0.5,"min":0,"max":1},{"uuid":"Q4IzHgVs10H2lFwUY42ub","name":"bending","type":0,"value":140,"min":0,"max":140},{"uuid":"107hHYczm9PZBjaLWOTUz","name":"endSpan","type":0,"value":150,"min":20,"max":300},{"uuid":"UxT-wxG52Js8AcTu0Jrc0","name":"endVariation","type":0,"value":1.5,"min":1,"max":3}],"joints":[],"reflines":[],"script":"function script_AQKKGhP29js1rEmOQQbDC (glyph, constants, FP) {\n\t//Todo something\n  const bending = glyph.getParam('bending')\n  const bendingRatio = glyph.getParam('bendingRatio')// || 0.5\n  const startRatio = glyph.getParam('startVariation')\n  const endRatio = glyph.getParam('bendVariation')\n\tconst endVariation = glyph.getParam('endVariation')\n\tconst endSpan = glyph.getParam('endSpan')\n  const ending = glyph.getParam('收笔')\n  const weight = glyph.getParam('weight') || 40\n  const leftSpan = glyph.getParam('leftSpan')\n  const downSpan = glyph.getParam('downSpan')\n  const length = Math.sqrt(leftSpan * leftSpan + downSpan * downSpan)\n  const angle = Math.atan2(downSpan, leftSpan)\n\n  const startD = weight * startRatio * 0.4\n  const ox = 500\n  const oy = 500\n\n  const getCoordY = (canvasY) => {\n    return -(canvasY - 500)\n  }\n\n  const getCanvasY = (coordY) => {\n    return -coordY + 500\n  }\n\n  const intersection = (k1, x1, y1, k2, x2, y2) => {\n    if (k1 === Infinity || k1 === -Infinity) {\n      const x = x1\n      const y = k2 * (x - x2) + y2\n      return {\n        x, y,\n      }\n    } else if (k2 === Infinity || k2 === -Infinity) {\n      const x = x2\n      const y = k1 * (x - x1) + y1\n      return {\n        x, y,\n      }\n    }\n    const x = ((y2 - y1) + (k1 * x1 - k2 * x2)) / (k1 - k2)\n    const y = (-k1 * y2 + k2 * y1 + (x2 - x1) * k1 * k2) / (k2 - k1)\n    return {\n      x, y,\n    }\n  }\n\n  const endOption = {\n    ratio: 0.05,\n  }\n\n  const start = new FP.Joint(\n    'start',\n    {\n      x: ox + length / 2 * Math.cos(angle),\n      y: oy - length / 2 * Math.sin(angle),\n    },\n  )\n  const end = new FP.Joint(\n    'end',\n    {\n      x: ox - length * (0.5 - endOption.ratio) * Math.cos(angle),\n      y: oy + length * (0.5 - endOption.ratio) * Math.sin(angle),\n    }\n  )\n  const bend = new FP.Joint(\n    'bend',\n    {\n      x: start.x + (end.x - start.x) * bendingRatio + bending * Math.sin(angle),\n      y: start.y + (end.y - start.y) * bendingRatio + bending * Math.cos(angle),\n    },\n  )\n\n  const { contour1, contour2 } = FP.Skeleton.getContours([start, {\n    x: start.x + 2 / 3 * (bend.x - start.x),\n    y: start.y + 2 / 3 * (bend.y - start.y),\n  }, {\n    x: end.x + 2 / 3 * (bend.x - end.x),\n    y: end.y + 2 / 3 * (bend.y - end.y),\n  }, end], [\n  {\n    pos: 0,\n    weight: weight * 2 / 3,\n  },\n  {\n    pos: 1,\n    weight: weight * endRatio\n  }])\n\n\n  const start0 = new FP.Joint(\n    'start0',\n    {\n      x: contour1[0].start.x,\n      y: contour1[0].start.y,\n    },\n  )\n\n  const start2 = new FP.Joint(\n    'start2',\n    {\n      x: contour2[0].start.x,\n      y: contour2[0].start.y,\n    },\n  )\n\n  const angle1 = Math.atan((start0.y - start2.y) / (start0.x - start2.x))\n\n  const start1 = new FP.Joint(\n    'start1',\n    {\n      x: start.x + startD * Math.sin(angle1),\n      y: start.y - startD * Math.cos(angle1),\n    },\n  )\n\n  const end0 = new FP.Joint(\n    'end0',\n    {\n      x: contour1[0].end.x,\n      y: contour1[0].end.y,\n    },\n  )\n\n  const end2 = new FP.Joint(\n    'end2',\n    {\n      x: contour2[0].end.x,\n      y: contour2[0].end.y,\n    },\n  )\n\n  const end1 = new FP.Joint(\n    'end1',\n    {\n      x: ox - length / 2 * Math.cos(angle),\n      y: oy + length / 2 * Math.sin(angle),\n    },\n  )\n\n  const toDegree = (radian) => radian / Math.PI * 180\n  const toRadian = (degree) => Math.PI / 180 * degree\n\n  const getK = (p1, p2) => {\n    return -(p2.y - p1.y) / (p2.x - p1.x)\n  }\n\n\tconst origin_end = new FP.Joint(\n    'origin_end',\n    {\n      x: ox - length * 0.5 * Math.cos(angle),\n      y: oy + length * 0.5 * Math.sin(angle),\n    }\n  )\n\n  const origin_end_bottom = new FP.Joint(\n    'origin_end_bottom',\n    {\n      x: contour1[contour1.length - 1].end.x - length * endOption.ratio * Math.cos(angle),\n      y: contour1[contour1.length - 1].end.y + length * endOption.ratio * Math.sin(angle),\n    }\n  )\n\n\tconst end_bottom_1 = new FP.Joint(\n    'end_bottom_1',\n    {\n      x: contour1[contour1.length - 1].end.x - 0.5 * endSpan,\n      y: origin_end_bottom.y,\n    }\n  )\n\n\n\tconst end_bottom_2 = new FP.Joint(\n    'end_bottom_2',\n    {\n      x: contour1[contour1.length - 1].end.x - 0.7 * endSpan,\n      y: origin_end_bottom.y,\n    }\n  )\n\n\tconst end_bottom_3 = new FP.Joint(\n    'end_bottom_3',\n    {\n      x: contour1[contour1.length - 1].end.x - endSpan,\n      y: origin_end_bottom.y,\n    }\n  )\n\n\tconst end_top_1 = new FP.Joint(\n    'end_top_1',\n    {\n      x: end_bottom_1.x,\n      y: end_bottom_1.y - endVariation * weight,\n    }\n  )\n\n\tconst end_top_2 = new FP.Joint(\n    'end_top_2',\n    {\n      x: end_top_1.x - 0.15 * endSpan,\n      y: end_top_1.y,\n    }\n  )\n\n\tconst end_top_3 = new FP.Joint(\n    'end_top_3',\n    {\n      x: end_top_1.x - 0.15 * endSpan,\n      y: end_top_1.y - Math.min(endSpan / 100 * endVariation * weight * 0.1, 10)//endVariation * weight * 0.1,\n    }\n  )\n\n\tconst end_top_4 = new FP.Joint(\n    'end_top_4',\n    {\n      x: end_top_1.x - 0.3 * endSpan,\n      y: end_top_3.y,//endVariation * weight * 0.1,\n    }\n  )\n\n\tconst end_top_5 = new FP.Joint(\n    'end_top_5',\n    {\n      x: end_top_1.x - 0.5 * endSpan,\n      y: end_top_3.y,//endVariation * weight * 0.15,\n    }\n  )\n\n\tconst end_bottom_k = getK(contour1[contour1.length - 1].end, contour1[contour1.length - 1].control2)\n\tconst end_top_k = getK(contour2[contour2.length - 1].end, contour2[contour2.length - 1].control2)\n\tconst end_control_bottom_p = intersection(0, end_bottom_1.x, getCoordY(end_bottom_1.y), end_bottom_k, contour1[contour1.length - 1].control2.x, getCoordY(contour1[contour1.length - 1].control2.y))\n\tconst end_control_top_p = intersection(0, end_top_1.x, getCoordY(end_top_1.y), end_top_k, contour2[contour2.length - 1].control2.x, getCoordY(contour2[contour2.length - 1].control2.y))\n\n  const end_control_bottom = new FP.Joint(\n    'end_control_bottom',\n    {\n      x: end_control_bottom_p.x,\n      y: getCanvasY(end_control_bottom_p.y),\n    },\n  )\n\n\n  const end_control_top = new FP.Joint(\n    'end_control_top',\n    {\n      x: end_control_top_p.x,\n      y: getCanvasY(end_control_top_p.y),\n    },\n  )\n\n  const end_bottom = new FP.Joint(\n    'end_bottom',\n    {\n      x: contour1[contour1.length - 1].end.x,\n      y: contour1[contour1.length - 1].end.y,\n    },\n  )\n\n  const end_top = new FP.Joint(\n    'end_top',\n    {\n      x: contour2[contour2.length - 1].end.x,\n      y: contour2[contour2.length - 1].end.y,\n    },\n  )\n\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n  \n  const getAngle = (p1, p2) => {\n    if (p2.x === p1.x) return 90\n    if (p2.y === p1.y && p2.x > p1.x) return 180\n    if (p2.x > p1.x) {\n      return 180 - toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n    }\n    return -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n  }\n  const startPoints = []\n  let startCurve\n  {\n    const path = new FP.PolygonComponent()\n    path.beginPath()\n    let delta = 1\n    const angle1 = Math.round(getAngle(start, start2))\n    const angle2 = Math.round(getAngle(start, start1))\n    const angle3 = Math.round(getAngle(start, start0))\n    const l1 = distance(start, start2)\n    const l2 = distance(start, start1)\n    const l3 = distance(start, start0)\n    const pow = 0.5\n    let r = l1\n    let sum = 0\n    for (let i = 0; i <= angle2 - angle1; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a1 = (l2 - l1) / sum\n    const n1 = angle2 - angle1\n    sum = 0\n    for (let i = 0; i <= angle3 - angle2; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a2 = (l3 - l2) / sum\n    const n2 = angle3 - angle2\n    const d = 0\n    for (let i = angle1; i <= angle3; i++) {\n      let _i = i\n      if (i >= angle1 && i < angle2) {\n        _i = i - angle1\n        delta = a1 * Math.pow((n1 - _i), pow)\n      }\n      if (i >= angle2 && i < angle3) {\n        _i = i - angle2\n        delta = a2 * Math.pow((i - angle2), pow)\n      }\n      const _r = r + d * (-0.5 + Math.random())\n      r += delta\n      //console.log(r, delta)\n      const angle = Math.PI / 180 * i\n      const x = start.x - _r * Math.cos(angle)\n      const y = start.y - _r * Math.sin(angle)\n      if (i === angle1) {\n        path.moveTo(x, y)\n      } else {\n        path.lineTo(x, y)\n      }\n      startPoints.push({x, y})\n    }\n    path.closePath()\n  }\n\n  // 顺时针\n  const pen = new FP.PenComponent()\n  pen.beginPath()\n  const curve = FP.fitCurve(startPoints, 2)\n  pen.moveTo(curve[0][0].x, curve[0][0].y)\n  for (let i = 0; i < curve.length; i++) {\n    const bezier = curve[i]\n    pen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n  }\n\n  //pen.lineTo(contour2[contour2.length - 1].end.x, contour2[contour2.length - 1].end.y)\n\n  if (end_control_bottom.x <= end_bottom_1.x) {\n    for (let i = 0; i < contour1.length - 1; i++) {\n      pen.bezierTo(contour1[i].control1.x, contour1[i].control1.y, contour1[i].control2.x, contour1[i].control2.y, contour1[i].end.x, contour1[i].end.y)\n    }\n    // pen.bezierTo(contour1[contour1.length - 1].control1.x, contour1[contour1.length - 1].control1.y, end_control_bottom.x, end_control_bottom.y, end_bottom_1.x, end_bottom_1.y)\n    pen.bezierTo(contour1[contour1.length - 1].control1.x, contour1[contour1.length - 1].control1.y, contour1[contour1.length - 1].control2.x, contour1[contour1.length - 1].control2.y, end_bottom_1.x, end_bottom_1.y)\n  } else {\n    for (let i = 0; i < contour1.length; i++) {\n      pen.bezierTo(contour1[i].control1.x, contour1[i].control1.y, contour1[i].control2.x, contour1[i].control2.y, contour1[i].end.x, contour1[i].end.y)\n    }\n    pen.quadraticBezierTo(end_control_bottom.x, end_control_bottom.y, end_bottom_1.x, end_bottom_1.y)\n  }\n\n\tpen.lineTo(end_bottom_2.x, end_bottom_2.y)\n\tpen.quadraticBezierTo(end_bottom_3.x, end_bottom_3.y, end_bottom_3.x, end_bottom_3.y - 0.5 * weight * endVariation)\n  pen.quadraticBezierTo(end_top_5.x, end_top_5.y, end_top_4.x, end_top_4.y)\n\tpen.bezierTo(end_top_3.x, end_top_3.y, end_top_2.x, end_top_2.y, end_top_1.x, end_top_1.y)\n\n  if (end_control_top.x >= end.x) {\n    pen.bezierTo(end_control_top.x, end_control_top.y, contour2[contour2.length - 1].control1.x, contour2[contour2.length - 1].control1.y, contour2[contour2.length - 1].start.x, contour2[contour2.length - 1].start.y)\n    if (contour2.length >= 2) {\n      for (let i = contour2.length - 2; i >= 0; i--) {\n        pen.bezierTo(contour2[i].control2.x, contour2[i].control2.y, contour2[i].control1.x, contour2[i].control1.y, contour2[i].start.x, contour2[i].start.y)\n      }\n    }\n  } else {\n    pen.quadraticBezierTo(end_control_top.x, end_control_top.y, contour2[contour2.length - 1].end.x, contour2[contour2.length - 1].end.y)\n    for (let i = contour2.length - 1; i >= 0; i--) {\n      pen.bezierTo(contour2[i].control2.x, contour2[i].control2.y, contour2[i].control1.x, contour2[i].control1.y, contour2[i].start.x, contour2[i].start.y)\n    }\n  }\n\n  pen.closePath()\n  glyph.addComponent(pen)\n\n  glyph.addJoint(start)\n  glyph.addJoint(bend)\n  glyph.addJoint(end)\n  glyph.addJoint(start0)\n  glyph.addJoint(start1)\n  glyph.addJoint(start2)\n  glyph.addJoint(end0)\n  glyph.addJoint(end1)\n  glyph.addJoint(end2)\n\n\tglyph.addJoint(origin_end)\n\tglyph.addJoint(end_bottom_1)\n\tglyph.addJoint(end_bottom_2)\n\tglyph.addJoint(end_bottom_3)\n\n\tglyph.addJoint(end_top_1)\n\tglyph.addJoint(end_top_2)\n\tglyph.addJoint(end_top_3)\n  glyph.addJoint(end_top_4)\n  glyph.addJoint(end_top_5)\n  \n  glyph.addJoint(end_top)\n  glyph.addJoint(end_bottom)\n\n\tglyph.addJoint(end_control_bottom)\n\tglyph.addJoint(end_control_top)\n  glyph.addJoint(origin_end_bottom)\n\n  const refline = (p1, p2) => {\n    return {\n      name: `${p1.name}-${p2.name}`,\n      start: p1.name,\n      end: p2.name,\n    }\n  }\n  glyph.addRefLine(refline(end1, start))\n  glyph.addRefLine(refline(start0, start2))\n\n  glyph.addRefLine(refline(end_top_1, end_top_2))\n  glyph.addRefLine(refline(end_top_3, end_top_4))\n  glyph.addRefLine(refline(end_top_4, end_top_5))\n  glyph.addRefLine(refline(end_top_5, end_bottom_3))\n}","objData":{"_joints":[{"_x":650,"_y":350,"uuid":"4eSuFoakfHywBWi0sKVAV","name":"start"},{"_x":606.4949493661167,"_y":591.4949493661167,"uuid":"HO8jjq-mBd4jcuZ00AYfa","name":"bend"},{"_x":365,"_y":635,"uuid":"XlnETh58nuOyZP3P_3nlg","name":"end"},{"_x":663.1188229851964,"_y":352.3633415925509,"uuid":"VgS21Dj43MeYHxPrvjWFP","name":"start0"},{"_x":651.8722345999503,"_y":339.6072940192292,"uuid":"UAIDcproUaJIur8_6ZTpU","name":"start1"},{"_x":636.8811770148036,"_y":347.6366584074491,"uuid":"2QRadAs4pgSxv78UkmhgG","name":"start2"},{"_x":367.75720103675667,"_y":644.666700245665,"uuid":"LiahUefqvdnMxlvaw1dQn","name":"end0"},{"_x":350,"_y":650,"uuid":"y2rmYqeiEa8x2AGYSCLIW","name":"end1"},{"_x":364.17317463898235,"_y":624.9836754300741,"uuid":"mFk_3suVR8ZRucK_NFG_1","name":"end2"},{"_x":350,"_y":650,"uuid":"xTwzE3Qx6iHBz_7xiETo4","name":"origin_end"},{"_x":292.75720103675667,"_y":659.666700245665,"uuid":"xwXLUWsa_La2I4UE9tytV","name":"end_bottom_1"},{"_x":262.75720103675667,"_y":659.666700245665,"uuid":"ULXt7wY9ucdgw9fi9vZ0E","name":"end_bottom_2"},{"_x":217.75720103675667,"_y":659.666700245665,"uuid":"jVkDZ8phVbHCX0IjDHgLA","name":"end_bottom_3"},{"_x":292.75720103675667,"_y":599.666700245665,"uuid":"D6Bxyxc5eNwgtvFlqkVr8","name":"end_top_1"},{"_x":270.25720103675667,"_y":599.666700245665,"uuid":"Grbk9jymZ8Gy_5SDDUYZ1","name":"end_top_2"},{"_x":270.25720103675667,"_y":590.666700245665,"uuid":"xGZPoaPCgK8OpBTYf1Uxr","name":"end_top_3"},{"_x":247.75720103675667,"_y":590.666700245665,"uuid":"fC1hI3iAgYf-zJorz2jUO","name":"end_top_4"},{"_x":217.75720103675667,"_y":590.666700245665,"uuid":"5_-Zj3fSqwa4mdvhu_TS0","name":"end_top_5"},{"_x":364.17317463898235,"_y":624.9836754300741,"uuid":"X80Un2ZjWTzSexykzKbpk","name":"end_top"},{"_x":367.75720103675667,"_y":644.666700245665,"uuid":"E-wO0TJOXpN5Wmyfd5twW","name":"end_bottom"},{"_x":282.3764443030189,"_y":659.666700245665,"uuid":"XjNctfWMMNKBTE20snWTB","name":"end_control_bottom"},{"_x":497.5964102431586,"_y":599.666700245665,"uuid":"bZflXGkonbenMcSAe4C-N","name":"end_control_top"},{"_x":352.75720103675667,"_y":659.666700245665,"uuid":"XxTpry1FgExjxBWwGnntO","name":"origin_end_bottom"}],"_reflines":[{"name":"end1-start","start":"end1","end":"start"},{"name":"start0-start2","start":"start0","end":"start2"},{"name":"end_top_1-end_top_2","start":"end_top_1","end":"end_top_2"},{"name":"end_top_3-end_top_4","start":"end_top_3","end":"end_top_4"},{"name":"end_top_4-end_top_5","start":"end_top_4","end":"end_top_5"},{"name":"end_top_5-end_bottom_3","start":"end_top_5","end":"end_bottom_3"}],"_components":[{"points":[{"uuid":"uKA05i_4YDJ4rqAZend28","type":"anchor","x":636.8725126523473,"y":347.68526979169985,"origin":null},{"uuid":"kN2FCqWmoxh3na5QTylKo","type":"control","x":642.1299724573316,"y":334.443987222119,"origin":"uKA05i_4YDJ4rqAZend28"},{"uuid":"HRwoarYWTg0m2yVjNU-VK","type":"control","x":662.6765560794033,"y":338.0651263017589,"origin":"-KOm7G_ITOMjFuSwb70sE"},{"uuid":"-KOm7G_ITOMjFuSwb70sE","type":"anchor","x":663.0823818105075,"y":352.30677688512213,"origin":null},{"uuid":"l0oJo6Ta3bNRMxNXX9giD","type":"control","x":632.3885754395951,"y":516.2730327211502,"origin":"-KOm7G_ITOMjFuSwb70sE"},{"uuid":"NWsy6i5I95VIEQymafIPp","type":"control","x":532.0390838398713,"y":615.8050651850683,"origin":"vnIh3yCTk4fK9ykC8y0n3"},{"uuid":"vnIh3yCTk4fK9ykC8y0n3","type":"anchor","x":292.75720103675667,"y":659.666700245665,"origin":null},{"uuid":"uHIxigqG0wkbILde5JN3o","type":"control","x":292.75720103675667,"y":659.666700245665,"origin":"vnIh3yCTk4fK9ykC8y0n3"},{"uuid":"DpcZQvrCnXDookh_c47A0","type":"control","x":262.75720103675667,"y":659.666700245665,"origin":"kGyEQQ6SC1Bnnyob6WmK4"},{"uuid":"kGyEQQ6SC1Bnnyob6WmK4","type":"anchor","x":262.75720103675667,"y":659.666700245665,"origin":null},{"uuid":"-6FsOe9rDI4N7H-Dsqbl7","type":"control","x":232.75720103675667,"y":659.666700245665,"origin":"kGyEQQ6SC1Bnnyob6WmK4"},{"uuid":"G3YCvRkwZdOaLdJ5csUhV","type":"control","x":217.75720103675667,"y":649.666700245665,"origin":"NYArghTVT7JvAGvJx8WYE"},{"uuid":"NYArghTVT7JvAGvJx8WYE","type":"anchor","x":217.75720103675667,"y":629.666700245665,"origin":null},{"uuid":"g9w_FIHxbGvzxraDr06F3","type":"control","x":217.75720103675667,"y":603.666700245665,"origin":"NYArghTVT7JvAGvJx8WYE"},{"uuid":"a5D9i4WTkWtLutgMjVKwF","type":"control","x":227.75720103675667,"y":590.666700245665,"origin":"td3UOFzeMybhOS_XAXDwX"},{"uuid":"td3UOFzeMybhOS_XAXDwX","type":"anchor","x":247.75720103675667,"y":590.666700245665,"origin":null},{"uuid":"eVopfl3kwezLJUniBMfQ9","type":"control","x":270.25720103675667,"y":590.666700245665,"origin":"td3UOFzeMybhOS_XAXDwX"},{"uuid":"j2yJipjrRZUVgxe2V_1bj","type":"control","x":270.25720103675667,"y":599.666700245665,"origin":"Np124yXG4l5rCERIxo-Au"},{"uuid":"Np124yXG4l5rCERIxo-Au","type":"anchor","x":292.75720103675667,"y":599.666700245665,"origin":null},{"uuid":"kvSs4TlKqaGX8aDRYo08y","type":"control","x":497.5964102431586,"y":599.666700245665,"origin":"Np124yXG4l5rCERIxo-Au"},{"uuid":"1Av-ORru0hrighO0G4lc4","type":"control","x":610.0501203814582,"y":502.3337882203093,"origin":"LxcJ5Vju7dpTNDDEA3dVH"},{"uuid":"LxcJ5Vju7dpTNDDEA3dVH","type":"anchor","x":636.8811770148036,"y":347.6366584074491,"origin":null}],"type":"glyph-pen","hasPathBegan":false,"usedInCharacter":true,"contour":[{"type":2,"start":{"x":636.8725126523473,"y":452.31473020830015},"end":{"x":663.0823818105075,"y":447.6932231148778},"control1":{"x":642.1299724573316,"y":465.55601277788105},"control2":{"x":662.6765560794033,"y":461.93487369824106},"fill":false},{"type":2,"start":{"x":663.0823818105075,"y":447.6932231148778},"end":{"x":292.75720103675667,"y":140.33329975433503},"control1":{"x":632.3885754395951,"y":283.72696727884977},"control2":{"x":532.0390838398713,"y":184.19493481493168},"fill":false},{"type":2,"start":{"x":292.75720103675667,"y":140.33329975433503},"end":{"x":262.75720103675667,"y":140.33329975433503},"control1":{"x":292.75720103675667,"y":140.33329975433503},"control2":{"x":262.75720103675667,"y":140.33329975433503},"fill":false},{"type":2,"start":{"x":262.75720103675667,"y":140.33329975433503},"end":{"x":217.75720103675667,"y":170.33329975433503},"control1":{"x":232.75720103675667,"y":140.33329975433503},"control2":{"x":217.75720103675667,"y":150.33329975433503},"fill":false},{"type":2,"start":{"x":217.75720103675667,"y":170.33329975433503},"end":{"x":247.75720103675667,"y":209.33329975433503},"control1":{"x":217.75720103675667,"y":196.33329975433503},"control2":{"x":227.75720103675667,"y":209.33329975433503},"fill":false},{"type":2,"start":{"x":247.75720103675667,"y":209.33329975433503},"end":{"x":292.75720103675667,"y":200.33329975433503},"control1":{"x":270.25720103675667,"y":209.33329975433503},"control2":{"x":270.25720103675667,"y":200.33329975433503},"fill":false},{"type":2,"start":{"x":292.75720103675667,"y":200.33329975433503},"end":{"x":636.8811770148036,"y":452.3633415925509},"control1":{"x":497.5964102431586,"y":200.33329975433503},"control2":{"x":610.0501203814582,"y":297.6662117796907},"fill":false}],"preview":[{"type":2,"start":{"x":63.68725126523473,"y":34.768526979169984},"end":{"x":66.30823818105075,"y":35.230677688512216},"control1":{"x":64.21299724573316,"y":33.4443987222119},"control2":{"x":66.26765560794034,"y":33.80651263017589},"fill":false},{"type":2,"start":{"x":66.30823818105075,"y":35.230677688512216},"end":{"x":29.275720103675667,"y":65.9666700245665},"control1":{"x":63.23885754395951,"y":51.62730327211503},"control2":{"x":53.203908383987134,"y":61.58050651850684},"fill":false},{"type":2,"start":{"x":29.275720103675667,"y":65.9666700245665},"end":{"x":26.275720103675667,"y":65.9666700245665},"control1":{"x":29.275720103675667,"y":65.9666700245665},"control2":{"x":26.275720103675667,"y":65.9666700245665},"fill":false},{"type":2,"start":{"x":26.275720103675667,"y":65.9666700245665},"end":{"x":21.775720103675667,"y":62.9666700245665},"control1":{"x":23.275720103675667,"y":65.9666700245665},"control2":{"x":21.775720103675667,"y":64.9666700245665},"fill":false},{"type":2,"start":{"x":21.775720103675667,"y":62.9666700245665},"end":{"x":24.775720103675667,"y":59.0666700245665},"control1":{"x":21.775720103675667,"y":60.3666700245665},"control2":{"x":22.775720103675667,"y":59.0666700245665},"fill":false},{"type":2,"start":{"x":24.775720103675667,"y":59.0666700245665},"end":{"x":29.275720103675667,"y":59.9666700245665},"control1":{"x":27.025720103675667,"y":59.0666700245665},"control2":{"x":27.025720103675667,"y":59.9666700245665},"fill":false},{"type":2,"start":{"x":29.275720103675667,"y":59.9666700245665},"end":{"x":63.688117701480365,"y":34.76366584074491},"control1":{"x":49.75964102431586,"y":59.9666700245665},"control2":{"x":61.00501203814582,"y":50.233378822030936},"fill":false}]}]}},{"uuid":"yrnPnn_hLXRgeRtH75nsm","type":"system","name":"捺2","components":[],"groups":[],"orderedList":[],"selectedComponentsUUIDs":[],"view":{"zoom":"100","translateX":0,"translateY":0},"parameters":[{"uuid":"g5gXBGaXtcJCvfJzjhyH1","name":"weight","type":0,"value":40,"min":20,"max":100},{"uuid":"vBGnTk1ryBjaKtLZuuqyG","name":"rightSpan","type":0,"value":547,"min":0,"max":1000},{"uuid":"n3ScHSw4yZXSfcEuUjU6L","name":"downSpan","type":0,"value":386,"min":0,"max":1000},{"uuid":"90fe_FZKHT4bl1ieqkhTx","name":"bendingRatio","type":0,"value":0.5,"min":0,"max":1},{"uuid":"-6ScnOl11pJMf_LsIDT5w","name":"bending","type":0,"value":0,"min":0,"max":140},{"uuid":"pUU4AI9WBNa5R0mDcRtYL","name":"bendingVariation","type":0,"value":0.81,"min":0.5,"max":1},{"uuid":"iSq0uW0GImhZUluaxirr2","name":"startVariation","type":0,"value":1.01,"min":1,"max":2.5},{"uuid":"vVyyo6eDAmg8RYXeslsMR","name":"endVariation","type":0,"value":1,"min":1,"max":2.5},{"uuid":"a1IMvXOa6cAjwJbgIHxsd","name":"endStep","type":0,"value":49,"min":0,"max":60},{"uuid":"gF4rUEh4J4SJ1pfKCBc6e","name":"startSpan","type":0,"value":100,"min":0,"max":300},{"uuid":"lEcmG3NInFduBrhiJtE_Y","name":"endSpan","type":0,"value":187,"min":50,"max":300},{"uuid":"kCdY6UVKmY6efCdvm8qmt","name":"endWeight","type":0,"value":1.45,"min":1,"max":2.5}],"joints":[],"reflines":[],"script":"function script_yrnPnn_hLXRgeRtH75nsm (glyph, constants, FP) {\n\t//Todo something\n  const bending = glyph.getParam('bending')\n\tconst bendingRatio = glyph.getParam('bendingRatio')\n\tconst bendingVariation = glyph.getParam('bendingVariation')\n  const startRatio = glyph.getParam('startVariation')\n  const endRatio = glyph.getParam('endVariation')\n  const weight = glyph.getParam('weight') || 40\n  const rightSpan = glyph.getParam('rightSpan')\n  const downSpan = glyph.getParam('downSpan')\n\tconst endStep = glyph.getParam('endStep')\n\tconst endSpan = glyph.getParam('endSpan')\n  const endWeight = glyph.getParam('endWeight')\n\tconst startSpan = glyph.getParam('startSpan')\n  const length = Math.sqrt(rightSpan * rightSpan + downSpan * downSpan)\n  const angle = Math.atan2(downSpan, rightSpan)\n  const startD = weight * startRatio * 0.4\n  const ox = 500\n  const oy = 500\n\n  const getCoordY = (canvasY) => {\n    return -(canvasY - 500)\n  }\n\n  const getCanvasY = (coordY) => {\n    return -coordY + 500\n  }\n\n  const intersection = (k1, x1, y1, k2, x2, y2) => {\n    if (k1 === Infinity || k1 === -Infinity) {\n      const x = x1\n      const y = k2 * (x - x2) + y2\n      return {\n        x, y,\n      }\n    } else if (k2 === Infinity || k2 === -Infinity) {\n      const x = x2\n      const y = k1 * (x - x1) + y1\n      return {\n        x, y,\n      }\n    }\n    const x = ((y2 - y1) + (k1 * x1 - k2 * x2)) / (k1 - k2)\n    const y = (-k1 * y2 + k2 * y1 + (x2 - x1) * k1 * k2) / (k2 - k1)\n    return {\n      x, y,\n    }\n  }\n\n  const start = new FP.Joint(\n    'start',\n    {\n      x: ox - length / 2 * Math.cos(angle),\n      y: oy - length / 2 * Math.sin(angle),\n    },\n  )\n  const end = new FP.Joint(\n    'end',\n    {\n      x: ox + length * 0.5 * Math.cos(angle),\n      y: oy + length * 0.5 * Math.sin(angle),\n    }\n  )\n  const bend = new FP.Joint(\n    'bend',\n    {\n      x: start.x + (end.x - start.x) * bendingRatio - bending * Math.sin(angle),\n      y: start.y + (end.y - start.y) * bendingRatio + bending * Math.cos(angle),\n    },\n  )\n\n  const { contour1, contour2 } = FP.Skeleton.getContours([start, {\n    x: start.x + 2 / 3 * (bend.x - start.x),\n    y: start.y + 2 / 3 * (bend.y - start.y),\n  }, {\n    x: end.x + 2 / 3 * (bend.x - end.x),\n    y: end.y + 2 / 3 * (bend.y - end.y),\n  }, end], [\n  {\n    pos: 0,\n    weight: weight * startRatio,\n  },\n\t  {\n    pos: 0.5,\n    weight: weight * bendingVariation,\n  },\n  {\n    pos: 1,\n    weight: weight * endRatio,\n  }])\n\n\n  const start0 = new FP.Joint(\n    'start0',\n    {\n      x: contour1[0].start.x,\n      y: contour1[0].start.y,\n    },\n  )\n\n  const start2 = new FP.Joint(\n    'start2',\n    {\n      x: contour2[0].start.x,\n      y: contour2[0].start.y,\n    },\n  )\n\n  const angle1 = Math.atan((start0.y - start2.y) / (start0.x - start2.x))\n\n  const start1 = new FP.Joint(\n    'start1',\n    {\n      x: start.x + startD * Math.sin(angle1),\n      y: start.y - startD * Math.cos(angle1),\n    },\n  )\n\n  const end0 = new FP.Joint(\n    'end0',\n    {\n      x: contour1[0].end.x,\n      y: contour1[0].end.y,\n    },\n  )\n\n  const end2 = new FP.Joint(\n    'end2',\n    {\n      x: contour2[0].end.x,\n      y: contour2[0].end.y,\n    },\n  )\n\n  const end1 = new FP.Joint(\n    'end1',\n    {\n      x: ox + length / 2 * Math.cos(angle),\n      y: oy + length / 2 * Math.sin(angle),\n    },\n  )\n\n  const toDegree = (radian) => radian / Math.PI * 180\n  const toRadian = (degree) => Math.PI / 180 * degree\n\n  const getK = (p1, p2) => {\n    return -(p2.y - p1.y) / (p2.x - p1.x)\n  }\n\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))\n\n\n\tconst start_top_1 = new FP.Joint(\n    'start_top_1',\n    {\n      x: start.x - 0.7 * startSpan,\n      y: contour1[0].start.y - weight,\n    },\n  )\n\n\tconst start_bottom_1 = new FP.Joint(\n    'start_bottom_1',\n    {\n      x: start.x - 0.7 * startSpan,\n      y: contour2[0].start.y - 20,\n    },\n  )\n\n\tconst start_top_2 = new FP.Joint(\n    'start_top_2',\n    {\n      x: start.x - startSpan,\n      y: contour1[0].start.y - weight,\n    },\n  )\n\n\tconst start_bottom_2 = new FP.Joint(\n    'start_bottom_2',\n    {\n      x: start.x - startSpan,\n      y: contour2[0].start.y - 10,\n    },\n  )\n\n\tconst end_top_1 = new FP.Joint(\n    'end_top_1',\n    {\n      x: end.x + 0.5 * endSpan,\n      y: contour1[contour1.length - 1].end.y + 10,\n    },\n  )\n\n\tconst end_bottom_1 = new FP.Joint(\n    'end_bottom_1',\n    {\n      x: end.x + 0.5 * endSpan,\n      y: end_top_1.y + weight * endWeight,//0.6 * weight * endRatio,\n    },\n  )\n\n\tconst end_top_2 = new FP.Joint(\n    'end_top_2',\n    {\n      x: end.x + endSpan,\n      y: contour1[contour1.length - 1].end.y + 10,\n    },\n  )\n\n\n  const start_top_k = getK(contour1[0].start, contour1[0].control1)\n  const start_bottom_k = getK(contour2[0].start, contour2[0].control1)\n  const start_bottom_0_p = intersection(0, start_bottom_1.x, getCoordY(start_bottom_1.y), start_bottom_k, contour2[0].control1.x, getCoordY(contour2[0].control1.y))\n  const start_top_0_p = intersection(0, start_top_1.x, getCoordY(start_top_1.y), start_top_k, contour1[0].control1.x, getCoordY(contour1[0].control1.y))\n\n\n  const start_bottom_0 = new FP.Joint(\n    'start_bottom_0',\n    {\n      x: start_bottom_0_p.x,\n      y: getCanvasY(start_bottom_0_p.y),\n    },\n  )\n\n  const start_top_0 = new FP.Joint(\n    'start_top_0',\n    {\n      x: start_top_0_p.x,\n      y: getCanvasY(start_top_0_p.y),\n    },\n  )\n\n  const end_top_k = getK(contour1[0].end, contour1[0].control2)\n  const end_bottom_k = getK(contour2[0].end, contour2[0].control2)\n\tconst end_bottom_a = Math.abs(Math.atan(end_bottom_k))\n\tconst end_step_k = Math.tan(toRadian(90-endStep))\n\tconst end_bottom_0_p = intersection(0, end_bottom_1.x, getCoordY(end_bottom_1.y), end_bottom_k, contour2[contour2.length - 1].control2.x, getCoordY(contour2[contour2.length - 1].control2.y))\n  const end_top_0_p = intersection(0, end_top_1.x, getCoordY(end_top_1.y), end_top_k, contour1[contour1.length - 1].control2.x, getCoordY(contour1[contour1.length - 1].control2.y))\n  const end_bottom_2_p = intersection(0, end_bottom_1.x, getCoordY(end_bottom_1.y), end_step_k, end_top_2.x, getCoordY(end_top_2.y))\n\n\n  const end_control_l_1 = weight * endRatio * 0.5\n\tconst end_control_l_2 = endSpan * 0.3\n\tconst end_bottom_0_1 = new FP.Joint(\n    'end_bottom_0_1',\n    {\n      x: contour2[contour2.length - 1].end.x + end_control_l_1 * Math.cos(end_bottom_a),\n      y: contour2[contour2.length - 1].end.y + end_control_l_1 * Math.sin(end_bottom_a),\n    },\n  )\n\tconst end_bottom_0_2 = new FP.Joint(\n    'end_bottom_0_2',\n    {\n      x: end_bottom_1.x - end_control_l_2,\n      y: end_bottom_1.y,\n    },\n  )\n\n  const end_bottom_0 = new FP.Joint(\n    'end_bottom_0',\n    {\n      x: end_bottom_0_p.x,\n      y: getCanvasY(end_bottom_0_p.y),\n    },\n  )\n\n  const end_top_0 = new FP.Joint(\n    'end_top_0',\n    {\n      x: end_top_0_p.x,\n      y: getCanvasY(end_top_0_p.y),\n    },\n  )\n\n\tconst end_bottom_2_backup = new FP.Joint(\n    'end_bottom_2_backup',\n    {\n      x: end.x + endSpan,\n      y: contour2[contour2.length - 1].end.y + weight * endRatio,\n    },\n  )\n\n\tconst end_bottom_2 = new FP.Joint(\n\t\t'end_bottom_2',\n\t\t{\n\t\t\tx: end_bottom_2_p.x,\n\t\t\ty: getCanvasY(end_bottom_2_p.y),\n\t\t},\n\t)\n\n\tconst end_top = new FP.Joint(\n    'end_top',\n    {\n      x: contour1[contour1.length - 1].end.x,\n      y: contour1[contour1.length - 1].end.y,\n    },\n  )\n\n\tconst end_bottom = new FP.Joint(\n    'end_bottom',\n    {\n      x: contour2[contour2.length - 1].end.x,\n      y: contour2[contour2.length - 1].end.y,\n    },\n  )\n\n\n  // 顺时针\n  const pen = new FP.PenComponent()\n  pen.beginPath()\n  \n  const getAngle = (p1, p2) => {\n    if (p2.x === p1.x) return 90\n    if (p2.y === p1.y && p2.x > p1.x) return 180\n    if (p2.x > p1.x) {\n      return 180 - toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n    }\n    return -toDegree(Math.atan(-(p2.y - p1.y) / (p2.x - p1.x)))\n  }\n  const startPoints = []\n  let startCurve\n  {\n    const path = new FP.PolygonComponent()\n    path.beginPath()\n    let delta = 1\n    const angle1 = Math.round(getAngle(start, start2))\n    const angle2 = Math.round(getAngle(start, start1))\n    const angle3 = Math.round(getAngle(start, start0))\n    const l1 = distance(start, start2)\n    const l2 = distance(start, start1)\n    const l3 = distance(start, start0)\n    const pow = 0.5\n    let r = l1\n    let sum = 0\n    for (let i = 0; i <= angle2 - angle1; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a1 = (l2 - l1) / sum\n    const n1 = angle2 - angle1\n    sum = 0\n    for (let i = 0; i <= angle3 - angle2; i++) {\n      sum += Math.pow(i, pow)\n    }\n    const a2 = (l3 - l2) / sum\n    const n2 = angle3 - angle2\n    const d = 0\n    for (let i = angle1; i <= angle3; i++) {\n      let _i = i\n      if (i >= angle1 && i < angle2) {\n        _i = i - angle1\n        delta = a1 * Math.pow((n1 - _i), pow)\n      }\n      if (i >= angle2 && i < angle3) {\n        _i = i - angle2\n        delta = a2 * Math.pow((i - angle2), pow)\n      }\n      const _r = r + d * (-0.5 + Math.random())\n      r += delta\n      //console.log(r, delta)\n      const angle = Math.PI / 180 * i\n      const x = start.x - _r * Math.cos(angle)\n      const y = start.y - _r * Math.sin(angle)\n      if (i === angle1) {\n        path.moveTo(x, y)\n      } else {\n        path.lineTo(x, y)\n      }\n      startPoints.push({x, y})\n    }\n    path.closePath()\n  }\n  const curve = FP.fitCurve(startPoints, 2)\n\n\tif (start_top_0.x <= start_top_1.x || start_bottom_0 <= start_bottom_1.x || startSpan < 10) {\n\t\t// 无起笔\n\t\tpen.moveTo(curve[0][0].x, curve[0][0].y)\n\t\tfor (let i = 0; i < curve.length; i++) {\n\t\t\tconst bezier = curve[i]\n\t\t\tpen.bezierTo(bezier[1].x, bezier[1].y, bezier[2].x, bezier[2].y, bezier[3].x, bezier[3].y)\n\t\t}\n\t} else {\n\t\tpen.moveTo(contour2[0].start.x, contour2[0].start.y)\n\t\tpen.quadraticBezierTo(start_bottom_0.x, start_bottom_0.y, start_bottom_1.x, start_bottom_1.y)\n\t\tpen.quadraticBezierTo(start_bottom_2.x, start_bottom_2.y, start_bottom_2.x, (start_top_2.y + start_bottom_2.y) / 2)\n\t\tpen.quadraticBezierTo(start_top_2.x, start_top_2.y, start_top_1.x, start_top_1.y)\n\t\tpen.quadraticBezierTo(start_top_0.x, start_top_0.y, contour1[0].start.x, contour1[0].start.y)\n\t}\n\n\tfor (let i = 0; i < contour1.length - 1; i++) {\n\t\tpen.bezierTo(contour1[i].control1.x, contour1[i].control1.y, contour1[i].control2.x, contour1[i].control2.y, contour1[i].end.x, contour1[i].end.y)\n\t}\n\n  pen.bezierTo(\n    contour1[contour1.length - 1].control1.x,\n    contour1[contour1.length - 1].control1.y,\n    contour1[contour1.length - 1].control2.x,\n    contour1[contour1.length - 1].control2.y,\n    end_top_2.x,\n    end_top_2.y,\n  )\n\n\t//pen.quadraticBezierTo(end_top_0.x, end_top_0.y, end_top_2.x, end_top_2.y)\n\n\tif (end_bottom_2.x <= end_bottom_1.x) {\n\t\tpen.quadraticBezierTo(end_bottom_2_backup.x, end_bottom_2_backup.y, end_bottom_1.x, end_bottom_1.y)\n\t} else {\n\t\tpen.quadraticBezierTo(end_bottom_2.x, end_bottom_2.y, end_bottom_1.x, end_bottom_1.y)\n\t}\n\n\tpen.bezierTo(end_bottom_0_2.x, end_bottom_0_2.y, end_bottom_0_1.x, end_bottom_0_1.y, contour2[contour2.length - 1].end.x, contour2[contour2.length - 1].end.y)\n\n\n\t//pen.lineTo(contour2[contour2.length - 1].end.x, contour2[contour2.length - 1].end.y)\n\n\tfor (let i = contour2.length - 1; i >= 0; i--) {\n\t\tpen.bezierTo(contour2[i].control2.x, contour2[i].control2.y, contour2[i].control1.x, contour2[i].control1.y, contour2[i].start.x, contour2[i].start.y)\n\t}\n\n  pen.closePath()\n  glyph.addComponent(pen)\n\n\n  glyph.addJoint(start)\n  glyph.addJoint(bend)\n  glyph.addJoint(end)\n  glyph.addJoint(start0)\n  glyph.addJoint(start1)\n  glyph.addJoint(start2)\n  glyph.addJoint(end0)\n  glyph.addJoint(end1)\n  glyph.addJoint(end2)\n\n\tglyph.addJoint(start_top_0)\n\tglyph.addJoint(start_top_1)\n\tglyph.addJoint(start_top_2)\n\tglyph.addJoint(start_bottom_0)\n\tglyph.addJoint(start_bottom_1)\n\tglyph.addJoint(start_bottom_2)\n\n\tglyph.addJoint(end_top_0)\n\tglyph.addJoint(end_top_1)\n\tglyph.addJoint(end_top_2)\n\tglyph.addJoint(end_bottom_0_1)\n\tglyph.addJoint(end_bottom_0_2)\n\tglyph.addJoint(end_bottom_1)\n\tglyph.addJoint(end_bottom_2)\n\tglyph.addJoint(end_bottom)\n\tglyph.addJoint(end_top)\n\n  const refline = (p1, p2) => {\n    return {\n      name: `${p1.name}-${p2.name}`,\n      start: p1.name,\n      end: p2.name,\n    }\n  }\n  glyph.addRefLine(refline(end1, start))\n  glyph.addRefLine(refline(end0, end2))\n  glyph.addRefLine(refline(start0, start2))\n\n\tglyph.addRefLine(refline(end_top_2, end_bottom_2))\n\tglyph.addRefLine(refline(end_bottom_1, end_bottom_0_2))\n\tglyph.addRefLine(refline(end_bottom, end_bottom_0_1))\n}","objData":{"_joints":[{"_x":226.5,"_y":307,"uuid":"SX3VmxvXqi4Mm3jo-6Yfs","name":"start"},{"_x":500,"_y":500,"uuid":"K1edC0sAbIfEE4V-qVw2L","name":"bend"},{"_x":773.5,"_y":693,"uuid":"HtU_ekOnR8T3-C_FmbVfZ","name":"end"},{"_x":238.14201873157043,"_y":290.50211335189374,"uuid":"JxrY4i2-tNeVXXnkkQV1a","name":"start0"},{"_x":213.2964615573793,"_y":297.68269499295866,"uuid":"t0ZX83-xGOeaFB9s3eBrv","name":"start1"},{"_x":214.85798126842957,"_y":323.49788664810626,"uuid":"YI2T5QU9etZ1MmtnLomxz","name":"start2"},{"_x":783.9329454022062,"_y":675.8931835880652,"uuid":"cRWf4E8IP1HSGhtf3Aw1-","name":"end0"},{"_x":773.5,"_y":693,"uuid":"lmGvAROYkE4gBbewwWQUg","name":"end1"},{"_x":760.8790545977937,"_y":708.5628164119347,"uuid":"1tTrMpsrMIrFRgj5PMaBt","name":"end2"},{"_x":182.87198867823537,"_y":250.50211335189374,"uuid":"f_zNk5zT4p8XIk74NAubh","name":"start_top_0"},{"_x":156.5,"_y":250.50211335189374,"uuid":"Kn7wk7i9xf5ilRVrWGkan","name":"start_top_1"},{"_x":126.5,"_y":250.50211335189374,"uuid":"xf1d0xu4O7mWBHyCNlug4","name":"start_top_2"},{"_x":185.78470337057348,"_y":303.49788664810626,"uuid":"rW7tbk52EYTPkui9YiS6T","name":"start_bottom_0"},{"_x":156.5,"_y":303.49788664810626,"uuid":"fXwN49_5iZ1Ly_4jqM0-G","name":"start_bottom_1"},{"_x":126.5,"_y":313.49788664810626,"uuid":"530Rt6PIT4nfDg7ppkIdc","name":"start_bottom_2"},{"_x":798.4502601026329,"_y":685.8931835880652,"uuid":"zecBsEV40hLdq93uIPEu8","name":"end_top_0"},{"_x":867,"_y":685.8931835880652,"uuid":"NRCNzzevdPicisbA6FxSS","name":"end_top_1"},{"_x":960.5,"_y":685.8931835880652,"uuid":"u7mx4cirPbVBGBuqAnQ_S","name":"end_top_2"},{"_x":777.0883987052792,"_y":720.2784966570217,"uuid":"DTgv-UYOhY7gMtNkO0QlJ","name":"end_bottom_0_1"},{"_x":810.9,"_y":743.8931835880652,"uuid":"3bM0oqVkFq4g7ZTWHiZbb","name":"end_bottom_0_2"},{"_x":867,"_y":743.8931835880652,"uuid":"L34FGsIOu-gZSmSV3hU3x","name":"end_bottom_1"},{"_x":893.7786323811815,"_y":743.8931835880652,"uuid":"PvUHvI6_l15K4-MQjOXQd","name":"end_bottom_2"},{"_x":760.8790545977937,"_y":708.5628164119347,"uuid":"aZEPfpNaTLPdeCPQoIQHv","name":"end_bottom"},{"_x":783.9329454022062,"_y":675.8931835880652,"uuid":"_-B69CoKT-cdZLPClVxer","name":"end_top"}],"_reflines":[{"name":"end1-start","start":"end1","end":"start"},{"name":"end0-end2","start":"end0","end":"end2"},{"name":"start0-start2","start":"start0","end":"start2"},{"name":"end_top_2-end_bottom_2","start":"end_top_2","end":"end_bottom_2"},{"name":"end_bottom_1-end_bottom_0_2","start":"end_bottom_1","end":"end_bottom_0_2"},{"name":"end_bottom-end_bottom_0_1","start":"end_bottom","end":"end_bottom_0_1"}],"_components":[{"points":[{"uuid":"nuo4luFSr_oVId321WPFy","type":"anchor","x":214.85798126842957,"y":323.49788664810626,"origin":null},{"uuid":"kUhS8C_k1KBA70_x88pZg","type":"control","x":195.4757960031922,"y":310.16455331477295,"origin":"nuo4luFSr_oVId321WPFy"},{"uuid":"RIL2Vu1jebZbM6cA4eYbi","type":"control","x":176.02313558038233,"y":303.49788664810626,"origin":"M3A4sGKdzOD4r7VdAf36r"},{"uuid":"M3A4sGKdzOD4r7VdAf36r","type":"anchor","x":156.5,"y":303.49788664810626,"origin":null},{"uuid":"abV8iDrETtGsxbqtR79eq","type":"control","x":136.5,"y":310.16455331477295,"origin":"M3A4sGKdzOD4r7VdAf36r"},{"uuid":"scX2VFc0gv8Wu_2nveNQX","type":"control","x":126.5,"y":302.9985910987375,"origin":"8DwDd6NeFutqeuywfhQe_"},{"uuid":"8DwDd6NeFutqeuywfhQe_","type":"anchor","x":126.5,"y":282,"origin":null},{"uuid":"J0wV5b2KrAnPELRNrUag-","type":"control","x":126.5,"y":261.0014089012625,"origin":"8DwDd6NeFutqeuywfhQe_"},{"uuid":"A_t2c4e0n2kwbZvBiSrqg","type":"control","x":136.5,"y":250.50211335189374,"origin":"COEqtjYhZxPlzDwopoTmv"},{"uuid":"COEqtjYhZxPlzDwopoTmv","type":"anchor","x":156.5,"y":250.50211335189374,"origin":null},{"uuid":"MzOQwYvlJhpmpvo2laBTx","type":"control","x":174.08132578549024,"y":250.50211335189374,"origin":"COEqtjYhZxPlzDwopoTmv"},{"uuid":"axnXU3aQyp5ecjFSJ6fP4","type":"control","x":201.29533202934707,"y":263.83544668522705,"origin":"JlqGAJPyf9YeCQvYsP53p"},{"uuid":"JlqGAJPyf9YeCQvYsP53p","type":"anchor","x":238.14201873157043,"y":290.50211335189374,"origin":null},{"uuid":"UsBF_PNjLGRGQvGnm7sGQ","type":"control","x":418.67171753418256,"y":421.1549815543554,"origin":"JlqGAJPyf9YeCQvYsP53p"},{"uuid":"dy5OuWwNanU8rNmAX1x2t","type":"control","x":600.4112757930709,"y":549.4774700789131,"origin":"a7QaRFuw-FAVaxOsTfeXB"},{"uuid":"a7QaRFuw-FAVaxOsTfeXB","type":"anchor","x":960.5,"y":685.8931835880652,"origin":null},{"uuid":"N8xihJ90lwyw82_9oAiV6","type":"control","x":916.019088254121,"y":724.5598502547318,"origin":"a7QaRFuw-FAVaxOsTfeXB"},{"uuid":"yIQvpLlJSSV8h_bKMibaM","type":"control","x":884.8524215874544,"y":743.8931835880652,"origin":"1opSIz-TIYW8St2oe_xkQ"},{"uuid":"1opSIz-TIYW8St2oe_xkQ","type":"anchor","x":867,"y":743.8931835880652,"origin":null},{"uuid":"AZLq7I94FaHwyMDOwwxqh","type":"control","x":810.9,"y":743.8931835880652,"origin":"1opSIz-TIYW8St2oe_xkQ"},{"uuid":"hRTEwCjr0ZCL1D2rSQx8C","type":"control","x":777.0883987052792,"y":720.2784966570217,"origin":"4MIaY8elIp4ulP-SK3nPA"},{"uuid":"4MIaY8elIp4ulP-SK3nPA","type":"anchor","x":760.8790545977937,"y":708.5628164119347,"origin":null},{"uuid":"Kb7fCpGhe4AfE5cMQk6yT","type":"control","x":580.2682320489535,"y":578.0221460582717,"origin":"4MIaY8elIp4ulP-SK3nPA"},{"uuid":"ROi_azBNfPWP4YrSIHq7V","type":"control","x":398.4581719004942,"y":449.7995656518376,"origin":"j250y4VXmGP32BwVDf_g8"},{"uuid":"j250y4VXmGP32BwVDf_g8","type":"anchor","x":214.85798126842957,"y":323.49788664810626,"origin":null}],"type":"glyph-pen","hasPathBegan":false,"usedInCharacter":true,"contour":[{"type":2,"start":{"x":214.85798126842957,"y":476.50211335189374},"end":{"x":156.5,"y":496.50211335189374},"control1":{"x":195.4757960031922,"y":489.83544668522705},"control2":{"x":176.02313558038233,"y":496.50211335189374},"fill":false},{"type":2,"start":{"x":156.5,"y":496.50211335189374},"end":{"x":126.5,"y":518},"control1":{"x":136.5,"y":489.83544668522705},"control2":{"x":126.5,"y":497.0014089012625},"fill":false},{"type":2,"start":{"x":126.5,"y":518},"end":{"x":156.5,"y":549.4978866481063},"control1":{"x":126.5,"y":538.9985910987375},"control2":{"x":136.5,"y":549.4978866481063},"fill":false},{"type":2,"start":{"x":156.5,"y":549.4978866481063},"end":{"x":238.14201873157043,"y":509.49788664810626},"control1":{"x":174.08132578549024,"y":549.4978866481063},"control2":{"x":201.29533202934707,"y":536.164553314773},"fill":false},{"type":2,"start":{"x":238.14201873157043,"y":509.49788664810626},"end":{"x":960.5,"y":114.1068164119348},"control1":{"x":418.67171753418256,"y":378.84501844564466},"control2":{"x":600.4112757930709,"y":250.52252992108686},"fill":false},{"type":2,"start":{"x":960.5,"y":114.1068164119348},"end":{"x":867,"y":56.1068164119348},"control1":{"x":916.019088254121,"y":75.44014974526817},"control2":{"x":884.8524215874544,"y":56.1068164119348},"fill":false},{"type":2,"start":{"x":867,"y":56.1068164119348},"end":{"x":760.8790545977937,"y":91.4371835880653},"control1":{"x":810.9,"y":56.1068164119348},"control2":{"x":777.0883987052792,"y":79.72150334297828},"fill":false},{"type":2,"start":{"x":760.8790545977937,"y":91.4371835880653},"end":{"x":214.85798126842957,"y":476.50211335189374},"control1":{"x":580.2682320489535,"y":221.9778539417283},"control2":{"x":398.4581719004942,"y":350.2004343481624},"fill":false}],"preview":[{"type":2,"start":{"x":21.48579812684296,"y":32.349788664810625},"end":{"x":15.65,"y":30.349788664810628},"control1":{"x":19.54757960031922,"y":31.016455331477296},"control2":{"x":17.602313558038233,"y":30.349788664810628},"fill":false},{"type":2,"start":{"x":15.65,"y":30.349788664810628},"end":{"x":12.65,"y":28.200000000000003},"control1":{"x":13.65,"y":31.016455331477296},"control2":{"x":12.65,"y":30.29985910987375},"fill":false},{"type":2,"start":{"x":12.65,"y":28.200000000000003},"end":{"x":15.65,"y":25.050211335189374},"control1":{"x":12.65,"y":26.10014089012625},"control2":{"x":13.65,"y":25.050211335189374},"fill":false},{"type":2,"start":{"x":15.65,"y":25.050211335189374},"end":{"x":23.814201873157046,"y":29.050211335189374},"control1":{"x":17.408132578549026,"y":25.050211335189374},"control2":{"x":20.12953320293471,"y":26.383544668522706},"fill":false},{"type":2,"start":{"x":23.814201873157046,"y":29.050211335189374},"end":{"x":96.05000000000001,"y":68.58931835880652},"control1":{"x":41.86717175341826,"y":42.115498155435546},"control2":{"x":60.041127579307094,"y":54.947747007891316},"fill":false},{"type":2,"start":{"x":96.05000000000001,"y":68.58931835880652},"end":{"x":86.7,"y":74.38931835880652},"control1":{"x":91.60190882541211,"y":72.45598502547318},"control2":{"x":88.48524215874545,"y":74.38931835880652},"fill":false},{"type":2,"start":{"x":86.7,"y":74.38931835880652},"end":{"x":76.08790545977938,"y":70.85628164119348},"control1":{"x":81.09,"y":74.38931835880652},"control2":{"x":77.70883987052792,"y":72.02784966570218},"fill":false},{"type":2,"start":{"x":76.08790545977938,"y":70.85628164119348},"end":{"x":21.48579812684296,"y":32.349788664810625},"control1":{"x":58.02682320489535,"y":57.802214605827174},"control2":{"x":39.845817190049424,"y":44.97995656518376},"fill":false}]}]}}],"constants":[],"constantGlyphMap":{},"version":1}